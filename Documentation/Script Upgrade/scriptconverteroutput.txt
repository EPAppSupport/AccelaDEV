ACA ALL DOCUMENT BEFORE^`
showDebug=true;
showMessage=true;
comment('Rolands comment on the document page.  cap: ' + cap);
cancel = false;
`^
ACA ONSUBMIT BEFORE BLDG PARCELCOND CHECK^`
showDebug=false;
oParcel = cap.getParcelModel();
l1ParcelID = oParcel.getParcelNo();
logDebug('Parcel ID = ' + l1ParcelID);
extUID= oParcel.getUID();
logDebug('extUID = ' + extUID);
Rcancel = validateBuildingParcelCondition(l1ParcelID, extUID);
logDebug('Cancel = ' + Rcancel);
if (Rcancel) {
	showMessage=true;
	comment('We are unable to process your request at this time because there is an active condition attached to this parcel. Please contact or visit the One Stop Shop for further assistance. You may call us at 915-212-0104 or visit us at 811 Texas Ave. El Paso, Texas 79901');
	cancel = true;
	}
`^
ACA ONSUBMIT BEFORE PARCEL COND CHECK^`
showDebug=true;
var parcelBusiness = cap.parcelModel.parcelModel;
obj2explore = parcelBusiness;
logDebug('Object Methods:');
for(x in obj2explore) if (typeof(obj2explore[x]) == 'function') logDebug(' ' + x);
logDebug('Object Properties:');
for(x in obj2explore) if (typeof(obj2explore[x]) != 'function') logDebug(' ' + x + ' = ' + obj2explore[x]);
showDebug=true;
logDebug('capId ' + getParentLicenseCapID(capId));
parentId = getParentLicenseCapID(capId);
tblLiquorClass = loadASITable('LIQUOR CLASS', parentId);
logDebug('typeof tblLiquorClass: ' + typeof(tblLiquorClass));
for(rec in tblLiquorClass) logDebug(tblLiquorClass[rec]['Class']);
if (arrPConditions.length) {
	if(arrPConditions.length > 0) cancel = true;
	}

showDebug=false;
parentId = getParentLicenseCapID(capId);
parentId = String(parentId);
logDebug('Parent ID: ' + parentId);
var arrParentIds = new Array();
arrParentIds = parentId.split('-');
logDebug('arrParentIds[0]: ' + arrParentIds[0]);
var parentAltID = aa.cap.getCapID(arrParentIds[0], arrParentIds[1], arrParentIds[2]).getOutput();
parentAltID = parentAltID.getCustomID();
logDebug('parentAltID: ' + parentAltID);
cancel = validateLicenseParcelCondition(parentAltID);
var parcelId = cap.parcelModel.parcelNo;
var severity = 'Notice';
if(parcelHasConditionWithSeverityOf(parcelId, severity)) cancel = true;
if (cancel) {
	showMessage=true;
	comment('We are unable to process your request at this time. Please contact or visit the One Stop Shop for further assistance. You may call us at 915-212-0104 or visit us at 811 Texas Ave. El Paso, Texas 79901');
	}
`^
ACA_ASA_EMAIL_APPLICANT^`
if ((conArray[y].getPeople().contactType == 'APPLICANT')) {
	appFirstName = conArray[y].getPeople().firstName;
	appEmail = conArray[y].getPeople().email;
	senderEmail = 'accela@elpasotexas.gov';
	email(appEmail, senderEmail, 'New ' + appTypeArray[2] + ' submitted', 'Dear ' + appFirstName + '<BR> <BR> Your new <b>' + appTypeArray[1] + ' ' + appTypeArray[2] + '</b> with record ID <b>' + capIDString  + '</b> has been submitted. <BR><BR> To access your application please go to the link below:<BR>http://epermit.elpasotexas.gov/CitizenAccess/ ');
	}
`^
ACA_ISSUE_BLDG_PERMITS^`
closeTask('Application Submittal', 'Completed', 'Closed by Script - ACA');
activateTask('Issue');
closeTask('Issue', 'Issued', 'Closed by Script - ACA');
editAppSpecific('Expiration Date',dateAdd(null,180));
`^
ACA_PAGEFLOW_LP_BEFORE_PLUMBING^`
showMessage=false;
showDebug=false;
stopThePage=true;
licenseTypeArray = new Array();
validLicenseTypes = lookup('ACA_RECORDTYPE_LICENSETYPE_LOOKUP',appTypeString);
logDebug('Valid License Types: ' + validLicenseTypes);
if (validLicenseTypes != undefined) {
	licenseTypeArray = validLicenseTypes.split(',');
	}

lpList = cap.getLicenseProfessionalList();
if(lpList != null && lpList.size() > 0) rlpId = lpList.get(0);
if (rlpId) {
	LicenseType = rlpId.getLicenseType();
	for(lt in licenseTypeArray) logDebug('licenseTypeArray[lt]: ' + licenseTypeArray[lt]);
	for(lt in licenseTypeArray) if (LicenseType.equals(licenseTypeArray[lt])) stopThePage = false;
	}

if (stopThePage) {
	cancel = true;
	showMessage=true;
	comment('License Type: ' + LicenseType + ' is not valid for this Permit Type (' + appTypeString + ')');
	}
`^
ACA_PAGEFLOW_LP_BLDG_FENCE_BEFORE^`
if (validRecordTypes != undefined) {
	parentCap4Trades = ACAASIInfo['Building Permit Number'];
	ACAASITEmpty= AreASITables4ACAEmpty();
	loadAppSpecific4ACA(ACAASIInfoTrades);
	ACACommercial = ACAASIInfoTrades['Type of Work'];
	}

showMessage=false;
showDebug=false;
stopThePage=true;
ACAASIInfo = new Array();
ACAASIInfoTrades = new Array();
ACAAddressArray = new Array();
parentEmpty = true;
var parentCap4Trades = '';
if (!parentEmpty && (pStreetNumber != houseNumberStart || !pStreetName.toLowerCase().trim().equals(streetName.toLowerCase().trim()))) {
	showMessage=true;
	comment('****Different Addresses***** Parent record address is different from current application address.');
	cancel=true;
	}

ACAASIInfo = new Array();
loadAppSpecific4ACA(ACAASIInfo);
ACAHomeowner = ACAASIInfo['Home Owner'];
lpList = cap.getLicenseProfessionalList();
if (ACAHomeowner == 'No' && lpList == null) {
	cancel=true;
	showMessage=true;
	comment('Licensed Professional Must be filled out.  If your account has not been associated to a Licensed Professional, please contact the One Stop Shop at 915-212-1501.');
	logDebug('***********Homeowner is No******** ' + ACAHomeowner + '******** ' );
	}

if (!rlpId) {
	showMessage=true;
	comment('Licensed Professional Must be filled out. If your account has not been associated to a Licensed Professional, please contact the One Stop Shop at 915-212-1501.');
	logDebug('***********Homeowner is No******** ' + test + '******** ' + rlpId );
	}

validRecordTypes = lookup('ACA_VALIDATE_RECORDTYPE_LOOKUP',appTypeString);
logDebug('Valid License Types: ' + validRecordTypes );
if (parentCap4Trades == '' && validRecordTypes != undefined  && ACAASITEmpty == true && ACACommercial == 'Residential') {
	cancel=true;
	showMessage=true;
	comment('ACA ASI Table is Empty ' + ACAASIInfo );
	}

ACAAddressArray = cap.getAddressModel();
houseNumberStart = ACAAddressArray.getHouseNumberStart();
streetName = ACAAddressArray.getStreetName();
parentCap = ACAASIInfo['Building Permit Number'];
if (parentCap != '' && parentCap != null) {
	parentEmpty = false;
	myCap = aa.cap.getCapID(parentCap).getOutput();
	addrResult = aa.address.getAddressByCapId(myCap);
	addrArray = new Array();
	addrArray = addrResult.getOutput();
	pStreetNumber = addrArray[0].getHouseNumberStart();
	pStreetName = addrArray[0].getStreetName();
	}
`^
ACA_PAGEFLOW_LP_BLDG_WINDOW_BEFORE^`
showMessage=false;
showDebug=false;
stopThePage=true;
ACAASIInfo = new Array();
ACAASIInfo = new Array();
loadAppSpecific4ACA(ACAASIInfo);
ACAHomeowner = ACAASIInfo['Home Owner'];
lpList = cap.getLicenseProfessionalList();
if (ACAHomeowner == 'No' && lpList == null) {
	cancel=true;
	showMessage=true;
	comment('Licensed Professional Must be filled out.  If your account has not been associated to a Licensed Professional, please contact the One Stop Shop at 915-212-1501.');
	logDebug('***********Homeowner is No******** ' + ACAHomeowner + '******** ' );
	}

cancel=true;
showMessage=true;
comment('Licensed Professional Must be filled out ' + ACAHomeowner);
logDebug('***********Homeowner is No******** ' + ACAHomeowner + '******** ' );
`^
ACA_PAGEFLOW_LP_OR_HOMEONWER_BEFORE^`
showMessage=false;
showDebug=false;
stopThePage=true;
licenseTypeArray = new Array();
var homeOwner = false;
var rlpId = false;
validLicenseTypes = lookup('ACA_RECORDTYPE_LICENSETYPE_LOOKUP',appTypeString);
logDebug('Valid License Types: ' + validLicenseTypes);
if (validLicenseTypes != undefined) {
	licenseTypeArray = validLicenseTypes.split(',');
	}

lpList = cap.getLicenseProfessionalList();
if(lpList == null) homeOwner = true;
if(lpList != null && lpList.size() > 0) rlpId = lpList.get(0);
if (rlpId && !homeOwner) {
	LicenseType = rlpId.getLicenseType();
	}

if (rlpId && !homeOwner) {
	for(lt in licenseTypeArray) logDebug('licenseTypeArray[lt]: ' + licenseTypeArray[lt]);
	for(lt in licenseTypeArray) if (LicenseType.equals(licenseTypeArray[lt])) stopThePage = false;
	}

if (stopThePage && !homeOwner) {
	cancel = true;
	showMessage=true;
	comment('License Type: ' + LicenseType + ' is not valid for this Permit Type (' + appTypeString + ')' );
	}
`^
ACA_PAGEFLOW_TEST_BEFORE^`
showDebug = false;
showMessage = true;
cancel=false;
`^
ADD_CONTAINERS_FEES^`
row = CONTAINERS[eachrow];
contType = row['Container Type'];
repReason = row['Replacement Reason'];
if (((contType == 'Deliver Additional' || contType == 'Deliver New' || contType == 'Pickup') && !feeExists('EC110'))) {
	logDebug(contType + ' - ' + feeExists('EC110'));
	addFee('EC110','ESDCONSCONTAINERS','STANDARD',1,'N');
	}

if (((contType == 'Replacement' && repReason == 'Burnt Container') && !feeExists('EC110'))) {
	logDebug(contType + ' - ' + feeExists('EC110'));
	addFee('EC110','ESDCONSCONTAINERS','STANDARD',1,'N');
	addFee('EC100','ESDCONSCONTAINERS','STANDARD',1,'N');
	}

if (((contType == 'Replacement' && repReason == 'Burnt Container') && (feeExists('EC110') && !feeExists('EC100')))) {
	logDebug(contType + ' - ' + feeExists('EC110'));
	addFee('EC100','ESDCONSCONTAINERS','STANDARD',1,'N');
	}

if (feeExists('EC110')) {
	logDebug ('FEE EXISTS: ' + feeExists('EC110'));
	}

if (!feeExists('EC110')) {
	logDebug ('NO FEE EXISTS: ' + feeExists('EC110'));
	}
`^
ADD_CONTAINER_FEES_ASIA^`
editASITableRow(capId,'CONTAINERS','Fee Reference', 'Fee Reference');
showDebug = true;
`^
ASA;AMS!ESD!Containers!~^`
branch('DEPARTMENT_GENERATEDBY');
`^
ASA;AMS!ESD!Containers!NA^`
branch('ES_AMS_CONTAINERS_ASSIGN_WO');
if (typeof(CONTAINERS) == 'object') {
	for (eachrow in CONTAINERS) branch('ADD_CONTAINERS_FEES');
	}

updateAppStatus('Submittal - Completed', 'Updated by Script');
`^
ASA;AMS!ESD!Missed Garbage!Missed Garbage^`
branch('DEPARTMENT_GENERATEDBY');
`^
ASA;Animal!~!~!~^`
branch('ES_Animal_AppSubmitAfter');
branch('GIS DATA');
`^
ASA;Animal!Animal!NA!NA^`
if ((AInfo['Owner Surrender'] == 'Surrender' || AInfo['Owner Surrender'] == 'EU Surrender')) {
	editAppSpecific('Due Out Date', dateAdd(null, 0));
	}
`^
ASA;Animal!Cage!NA!NA^`
if (AInfo['Delivery']=='Yes') {
	addFee('EA0118','ANIMALCAGE','STANDARD',1,'Y',capId);
	}
`^
ASA;Animal!Complaint!NA!NA^`
if (AInfo['Complaint Type']) {
	var inspType = lookup('LKUP_Animal_ComplaintTypeToInspectionType', String(AInfo['Complaint Type']).toUpperCase());
	var theInsp = lookup('LKUP_Animal_Inspector','LEAD');
	if(inspType!=undefined)scheduleInspection(inspType,0,theInsp);
	}

branch('DEPARTMENT_GENERATEDBY');
`^
ASA;Animal!License!Renewal!NA^`
logDebug('Running ASA4Renewal');
aa.runScript('APPLICATIONSUBMITAFTER4RENEW');
logDebug('Return from ASA4Renewal: ' + aa.env.getValue('ScriptReturnMessage'));
//  call renewal script;
`^
ASA;Building!~!~!~^`
if (AInfo['Flood Plain'] == 'Yes') {
	branch('ES_BLDG_ADDASITBL_SITEPLN');
	}

branch('GIS DATA');
comment('GIS HISTORICAL ' + getGISInfo('Accela_map', 'HistoricalDistrict', 'NAME'));
if ((getGISInfo('Accela_map', 'HistoricalDistrict', 'NAME') != null && getGISInfo('Accela_map', 'HistoricalDistrict', 'NAME') != '' && getGISInfo('Accela_map', 'HistoricalDistrict', 'NAME') != 'undefined')) {
	addParcelCondition('','Parcel','Applied','Historic Property','Historic Property','Notice');
	}

if (getParent() !='') {
	editAppSpecific(AInfo['Cloned Record'],'Yes');
	}
`^
ASA;Building!Commercial!New!NA^`
if (AInfo['Plan Includes Swimming Pool'] == 'Yes') {
	updateFee('FB110','COMMNEW','STANDARD',1,'Y','N');
	}

if (AInfo['Plan Includes Spa'] == 'Yes') {
	updateFee('FB115','COMMNEW','STANDARD',1,'Y','N');
	}
`^
ASA;Building!Commercial!Tenant Improvement!NA^`
branch('ES_BUILDING_APPLICATIONSUBMITAFTER');
if (publicUser) {
	updateFee('FB015','COMMTI','STANDARD',1,'Y','N');
	updateFee('CC003-A','COMMTI','STANDARD',1,'Y','N');
	updateFee('TF001','COMMTI','STANDARD',1,'Y','N');
	}
`^
ASA;Building!Electrical!NA!NA^`
if (AInfo['Type of Work'] == 'Elec Permit B') {
	branch('COEP_BLDG_ELEC_ADDASIT');
	}

if (resNew) {
	holdId = capId;
	capId = pCapId;
	resNewFeeAmount = feeAmount('FB028', 'INVOICED');
	capId = holdId;
	if(resNewFeeAmount > 0) updateFee('FRN001', 'BLDGELEC', 'STANDARD', resNewFeeAmount, 'Y', 'N');
	updateFee('TF001','BLDGELEC','STANDARD',1,'Y','N');
	updateFee('CC003','BLDGELEC','STANDARD',1,'Y','N');
	}

if (resAdditionOrAlteration) {
	updateFee('FB051','BLDGELEC','STANDARD',1,'Y','N');
	updateFee('TF001','BLDGELEC','STANDARD',1,'Y','N');
	updateFee('CC003','BLDGELEC','STANDARD',1,'Y','N');
	}

if (resCommercial) {
	holdId = capId;
	capId = pCapId;
	var addInfo = aa.cap.getBValuatn4AddtInfo(capId).getOutput();
	var parValuation = addInfo.getEstimatedValue();
	capId = holdId;
	if(parValuation > 0) updateFee('FB050','BLDGELEC', 'STANDARD',parValuation,'N','N');
	updateFee('TF001','BLDGELEC','STANDARD',1,'Y','N');
	updateFee('CC003','BLDGELEC','STANDARD',1,'Y','N');
	}

if (publicUser && !matches(parentRecordID, '', null) && !resNew && !resAdditionOrAlteration && !resCommercial) {
	updateFee('FB051','BLDGELEC','STANDARD',1,'Y','N');
	updateFee('TF001','BLDGELEC','STANDARD',1,'Y','N');
	updateFee('CC003','BLDGELEC','STANDARD',1,'Y','N');
	}

if (publicUser) {
	updateFee('TF001','BLDGELEC','STANDARD',1,'Y','N');
	}

addRowArray1 = new Array;
addRowArray1['Equipment Type'] = '';
addRowArray1['Fixture Type'] = '';
addRowArray1['Quantity/Tons'] = '';
addRowArray1['Units'] = '';
addRowArray1['Notes'] = '';
addRowArray1['Alt Id'] = '';
if (ELECTRICALEQUIPMENT.length < 1) {
	addToASITable('ELECTRICAL EQUIPMENT', addRowArray1);
	}

parentRecordID = AInfo['Building Permit Number'];
resNew = false;
resAdditionOrAlteration = false;
resCommercial = false;
if (publicUser && matches(parentRecordID, '', null)) {
	updateFee('FB051','BLDGELEC','STANDARD',1,'Y','N');
	}

if (publicUser && matches(parentRecordID, '', null) && typeof(ELECTRICALEQUIPMENT)=='object') {
	for (eachrow in ELECTRICALEQUIPMENT) branch('ES_BLDGELEC_ADDFEES_LOOP');
	}

if (publicUser && matches(parentRecordID, '', null)) {
	updateFee('TF001','BLDGELEC','STANDARD',1,'Y','N');
	updateFee('CC003','BLDGELEC','STANDARD',1,'Y','N');
	}

if (publicUser && !matches(parentRecordID, '', null)) {
	pCapId = aa.cap.getCapID(parentRecordID).getOutput();
	pCap = aa.cap.getCap(pCapId).getOutput();
	pAppTypeResult = pCap.getCapType();
	pAppTypeString = pAppTypeResult.toString();
	pAppTypeArray = pAppTypeString.split('/');
	}

if (publicUser && !matches(parentRecordID, '', null)) {
	if(pAppTypeArray[0] == 'Building' && pAppTypeArray[1] == 'Residential' && pAppTypeArray[2] == 'New') resNew = true;
	if(pAppTypeArray[0] == 'Building' && pAppTypeArray[1] == 'Residential' && (pAppTypeArray[2] == 'Addition' || pAppTypeArray[2] == 'Alteration')) resAdditionOrAlteration = true;
	if(pAppTypeArray[0] == 'Building' && pAppTypeArray[1] == 'Commercial')  resCommercial = true;
	}
`^
ASA;Building!Existing Building C of O!NA!NA^`
branch('COEP_SCHED_BECO_INSP');
`^
ASA;Building!Irrigation!NA!NA^`
if (AInfo['Type of Use'] == 'Commercial') {
	addFee('FB095','BLDGIRR','STANDARD',1,'Y');
	}

if (AInfo['Type of Use'] == 'Residential') {
	addFee('FB090','BLDGIRR','STANDARD',1,'Y');
	}

if (currentUserID.indexOf('PUBLICUSER') > -1 && typeof(IRRIGATIONFIXTURES) == 'object') {
	for (eachrow in IRRIGATIONFIXTURES) branch('ES_BLDGIRR_ADDFEES_LOOP');
	}

if (AInfo['Type of Use'] == 'Commercial') {
	branch('COEP_IRR_ADDASIT');
	}
`^
ASA;Building!Mechanical!NA!NA^`
branch('COEP_BLDG_MECH_ADDASIT');
if (publicUser && matches(parentRecordID, '', null)) {
	updateFee('TF001','BLDGMECH','STANDARD',1,'Y','N');
	updateFee('CC003','BLDGMECH','STANDARD',1,'Y','N');
	}

if (publicUser && !matches(parentRecordID, '', null)) {
	pCapId = aa.cap.getCapID(parentRecordID).getOutput();
	pCap = aa.cap.getCap(pCapId).getOutput();
	pAppTypeResult = pCap.getCapType();
	pAppTypeString = pAppTypeResult.toString();
	pAppTypeArray = pAppTypeString.split('/');
	}

if (publicUser && !matches(parentRecordID, '', null)) {
	if(pAppTypeArray[0] == 'Building' && pAppTypeArray[1] == 'Residential' && pAppTypeArray[2] == 'New') resNew = true;
	if(pAppTypeArray[0] == 'Building' && pAppTypeArray[1] == 'Residential' && (pAppTypeArray[2] == 'Addition' || pAppTypeArray[2] == 'Alteration')) resAdditionOrAlteration = true;
	if(pAppTypeArray[0] == 'Building' && pAppTypeArray[1] == 'Commercial')  resCommercial = true;
	}

if (resNew) {
	holdId = capId;
	capId = pCapId;
	resNewFeeAmount = feeAmount('FB028', 'INVOICED');
	capId = holdId;
	if(resNewFeeAmount > 0) updateFee('FRN001', 'BLDGMECH', 'STANDARD', resNewFeeAmount, 'Y', 'N');
	updateFee('TF001','BLDGMECH','STANDARD',1,'Y','N');
	updateFee('CC003','BLDGMECH','STANDARD',1,'Y','N');
	}

if (resAdditionOrAlteration || resCommercial) {
	updateFee('FB084','BLDGMECH','STANDARD',1,'Y','N');
	updateFee('TF001','BLDGMECH','STANDARD',1,'Y','N');
	updateFee('CC003','BLDGMECH','STANDARD',1,'Y','N');
	}

if (publicUser) {
	updateFee('TF001','BLDGMECH','STANDARD',1,'Y','N');
	}

if (AInfo['Refrigerated Air'] == 'Yes') {
	branch('COEP_SERVICEREQUEST_REF_AIR');
	}

if (publicUser) {
	branch('ES_BLDGMECH_ADDFEES');
	}

if (publicUser) {
	updateFee('TF001','BLDGMECH','STANDARD',1,'Y','N');
	updateFee('CC003','BLDGMECH','STANDARD',1,'Y','N');
	}

addRowArray1 = new Array;
addRowArray1['Equipment Type'] = '';
addRowArray1['Fixture Type'] = '';
addRowArray1['Quantity/Tons'] = '';
addRowArray1['Units'] = '';
addRowArray1['Notes'] = '';
addRowArray1['Alt Id'] = '';
if (MECHANICALEQUIPMENT.length < 1) {
	addToASITable('MECHANICAL EQUIPMENT', addRowArray1);
	}

parentRecordID = AInfo['Building Permit Number'];
resNew = false;
resAdditionOrAlteration = false;
resCommercial = false;
if (publicUser && matches(parentRecordID, '', null)) {
	updateFee('FB084','BLDGMECH','STANDARD',1,'Y','N');
	}

if (publicUser && matches(parentRecordID, '', null) && typeof(MECHANICALEQUIPMENT)=='object') {
	for (eachrow in MECHANICALEQUIPMENT) branch('ES_BLDGMECH_ADDFEES_LOOP');
	}
`^
ASA;Building!Plumbing!NA!NA^`
if (publicUser && matches(parentRecordID, '', null)) {
	updateFee('TF001','BLDGPLUMB','STANDARD',1,'Y','N');
	updateFee('CC003','BLDGPLUMB','STANDARD',1,'Y','N');
	}

addRowArray1 = new Array;
addRowArray1['Fixture Type'] = '';
addRowArray1['Quantity'] = '';
addRowArray1['Notes'] = '';
if (publicUser) {
	updateFee('TF001','BLDGPLUMB','STANDARD',1,'Y','N');
	}

if (PLUMBINGFIXTURES.length < 1) {
	addToASITable('PLUMBING FIXTURES', addRowArray1);
	}

parentRecordID = AInfo['Building Permit Number'];
resNew = false;
resAdditionOrAlteration = false;
resCommercial = false;
if (publicUser && matches(parentRecordID, '', null)) {
	updateFee('FB106','BLDGPLUMB','STANDARD',1,'Y','N');
	}

if (publicUser && matches(parentRecordID, '', null) && typeof(PLUMBINGFIXTURES)=='object') {
	for (eachrow in PLUMBINGFIXTURES) branch('ES_BLDGPLUMB_ADDFEES_LOOP');
	}

if (publicUser && !matches(parentRecordID, '', null)) {
	pCapId = aa.cap.getCapID(parentRecordID).getOutput();
	pCap = aa.cap.getCap(pCapId).getOutput();
	pAppTypeResult = pCap.getCapType();
	pAppTypeString = pAppTypeResult.toString();
	pAppTypeArray = pAppTypeString.split('/');
	}

if (publicUser && !matches(parentRecordID, '', null)) {
	if(pAppTypeArray[0] == 'Building' && pAppTypeArray[1] == 'Residential' && pAppTypeArray[2] == 'New') resNew = true;
	if(pAppTypeArray[0] == 'Building' && pAppTypeArray[1] == 'Residential' && (pAppTypeArray[2] == 'Addition' || pAppTypeArray[2] == 'Alteration')) resAdditionOrAlteration = true;
	if(pAppTypeArray[0] == 'Building' && pAppTypeArray[1] == 'Commercial')  resCommercial = true;
	}

if (resNew) {
	holdId = capId;
	capId = pCapId;
	resNewFeeAmount = feeAmount('FB028', 'INVOICED');
	capId = holdId;
	if(resNewFeeAmount > 0) updateFee('FRN001', 'BLDGPLUMB', 'STANDARD', resNewFeeAmount, 'Y', 'N');
	updateFee('TF001','BLDGPLUMB','STANDARD',1,'Y','N');
	updateFee('CC003','BLDGPLUMB','STANDARD',1,'Y','N');
	}

if (resAdditionOrAlteration || resCommercial) {
	updateFee('FB106','BLDGPLUMB','STANDARD',1,'Y','N');
	updateFee('TF001','BLDGPLUMB','STANDARD',1,'Y','N');
	updateFee('CC003','BLDGPLUMB','STANDARD',1,'Y','N');
	}
`^
ASA;Building!Reroof!NA!NA^`
if (publicUser) {
	updateFee('FB160','BLDGROOF','STANDARD', 1, 'Y','N');
	updateFee('TF001','BLDGROOF','STANDARD',1,'Y','N');
	updateFee('CC003','BLDGROOF','STANDARD', 1, 'Y','N');
	}
`^
ASA;Building!Siding!NA!NA^`
if (publicUser) {
	updateFee('FB038','BLDGGEN','STANDARD', 1, 'Y','N');
	updateFee('TF001','BLDGGEN','STANDARD', 1, 'Y','N');
	updateFee('CC003','BLDGGEN','STANDARD', 1, 'Y','N');
	}

if (publicUser) {
	updateFee('CCACA003','BLDGGEN','STANDARD', 1, 'Y','N');
	}
`^
ASA;Building!Windows!NA!NA^`
if (publicUser) {
	updateFee('FB038','BLDGGEN','STANDARD', 1, 'Y','N');
	updateFee('TF001','BLDGGEN','STANDARD', 1, 'Y','N');
	updateFee('CC003','BLDGGEN','STANDARD', 1, 'Y','N');
	}
`^
ASA;City!Permit!Super!NA^`
branch('ES_CITY_ApplicationSubmitAfter');
branch('GIS DATA');
`^
ASA;EPDOT!Traffic Control Plans!NA!NA^`
if (currentUserID.indexOf('PUBLICUSER') > -1) {
	branch('ES_EPDOT_ACA_EMAIL_NOTIFICATION');
	}
`^
ASA;Enforcement!~!~!~^`
branch('GIS DATA');
if (appMatch('Enforcement/Environmental Complaints/NA/NA') && AInfo['PCN'] == 'Yes') {
	assignTask('Receive Complaint','LUZ.M.MARQUEZ');
	}

if ((getGISInfo('Accela_map', 'HistoricalDistrict', 'NAME') != null && getGISInfo('Accela_map', 'HistoricalDistrict', 'NAME') != '' && getGISInfo('Accela_map', 'HistoricalDistrict', 'NAME') != 'undefined')) {
	addParcelCondition('','Parcel','Applied','Historic Property','Historic Property','Notice');
	}

theStreet = '';
myAddressArray = new Array();
arterialStreets = '';
loadAddressAttributes(myAddressArray);
theStreet = myAddressArray['AddressAttribute.StreetName'];
arterialStreets = lookup('ES_ARTERIAL_STREETS', theStreet);
comment('Street: ' + arterialStreets);
if (arterialStreets != undefined) editAppSpecific('Arterials', 'Arterial');
if(arterialStreets == undefined || arterialStreets == '') editAppSpecific('Arterials', 'Non-Arterial');
`^
ASA;Enforcement!Building Complaints!NA!NA^`
branch('DEPARTMENT_GENERATEDBY');
`^
ASA;Enforcement!Engineering!Complaint!NA^`
branch('DEPARTMENT_GENERATEDBY');
`^
ASA;Enforcement!Environmental Complaints!NA!NA^`
branch ('ES_PROJECT_NAME');
branch ('ES_AMO_SCHEDULE_FOLLOWUP');
branch ('ES_AMO_ASSIGN_SUPERVISOR');
`^
ASA;Enforcement!Fire Code Compliance!NA!NA^`
branch('ENF_FIRECODECOMPLIANCE_getGIS_DATA');
if (AInfo['Certificate of Occupancy'] == 'No') {
	branch('ES_ENFORCEMENT_COO');
	}

branch('ENF_FIRECODECOMPLIANCE_getGIS_DATA');
`^
ASA;Enforcement!Property Maintenance!Housing Safety!NA^`
branch('ENF_PROPERTYMAIN_HOUSINGSAFETY_getGIS_DATA');
branch('ENF_PROPERTYMAIN_HOUSINGSAFETY_Add_Violation');
`^
ASA;Environmental!~!~!~^`
branch('GIS DATA');
`^
ASA;Fire!~!~!~^`
branch('GIS DATA');
`^
ASA;Health!~!~!~^`
branch('GIS_DATA_HEALTH');
`^
ASA;Health!Food Inspections!Mobile!NA^`
if (matches(AInfo['Section'],'4(c)')) {
	addFee('FHC0004','HLTHCOUNTY','STANDARD',1,'N');
	}

if (matches(AInfo['Section'],'4(d)')) {
	addFee('FHC0005','HLTHCOUNTY','STANDARD',1,'N');
	}
`^
ASA;Health!Food Inspections!Roadside-Outdoor Market!NA^`
if (matches(AInfo['Section'],'4(e)')) {
	addFee('FHC0006','HLTHCOUNTY','STANDARD',1,'N');
	}

if (matches(AInfo['Section'],'9.12.070L')) {
	addFee('FH054','HLTHOS','STANDARD',1,'N');
	addFee('FH057','HLTHOS','STANDARD',1,'N');
	}
`^
ASA;Health!Food Inspections!Temporary!NA^`
asiDate = new Date(AInfo['Start Date'] +' ' + AInfo['Start Time']).getTime();
currentDate = new Date().getTime();
diffDate = new Number((asiDate.toString()-currentDate.toString())/3600000).toFixed(0);
if (diffDate < 72 && AInfo['Section'] == '9.12.070C1') {
	addFee('FH083','HLTHTEMP','STANDARD',1,'N');
	}

if (diffDate < 72 && AInfo['Section'] == '9.12.070D1') {
	addFee('FH084','HLTHTEMP','STANDARD',1,'N');
	}

if (AInfo['Section'] == '4(f)') {
	addFee('FHC0007','HLTHCOUNTY','STANDARD',1,'N');
	}

if (AInfo['Section'] =='4(g)') {
	addFee('FHC0008','HLTHCOUNTY','STANDARD',1,'N');
	}
`^
ASA;Licenses!~!~!~^`
branch('GIS DATA');
branch('LIC Establish Links to Reference Contacts');
if (appMatch('Licenses/Sexually Oriented Business/NA/NA') || appMatch('Licenses/Sexually Oriented Business Emp/NA/NA')) {
	branch('SEX_LIC_POPULATE_CREATED_ON_DATE');
	}

if (appMatch('Licenses/Fire/NA/NA') && AInfo['Notify Building Department'] == 'Yes') {
	branch('ES_LICENSE_FIRE_COO');
	}

theStreet = '';
myAddressArray = new Array();
arterialStreets = '';
loadAddressAttributes(myAddressArray);
theStreet = myAddressArray['AddressAttribute.StreetName'];
arterialStreets = lookup('ES_ARTERIAL_STREETS', theStreet);
logDebug(arterialStreets);
if (arterialStreets != undefined) editAppSpecific('Arterials', 'Arterial');
if(arterialStreets == undefined) editAppSpecific('Arterials', 'Not Arterial');
`^
ASA;Licenses!Animal!~!~^`
email('gutierrezma@elpasotexas.gov','accela@elpasotexas.gov',('Record Number: ' + capIDString ),'An Animal License has been created');
`^
ASA;Licenses!Laundry!NA!NA^`
assignedInsp = 'SOTODY';
comment('Assigned Inspector is: ' +assignedInsp);
nextInspDate = dateAdd(null,1);
comment('nextInspDate is: ' + nextInspDate);
inspType='1600 Site Inspection';
scheduleInspectDate(inspType,nextInspDate,assignedInsp);
`^
ASA;Licenses!Renewal!~!~^`
logDebug('Running ASA4Renewal');
aa.runScript('APPLICATIONSUBMITAFTER4RENEW');
logDebug('Return from ASA4Renewal: ' + aa.env.getValue('ScriptReturnMessage'));
//  call renewal script;
`^
ASA;Licenses!Renewal!Alcohol!NA^`
classCode = '';
feeQuantity = 0;
tblLiquorClass=null;
parentId = getParentLicenseCapID(capId);
logDebug('Parent ID: ' + parentId);
if(AInfo['Term of License'] == '1 Year') feeQuantity = 1;
if(AInfo['Term of License'] == '2 Year') feeQuantity = 2;
if(parentId != false) tblLiquorClass = loadASITable('LIQUOR CLASS', parentId);
if (typeof(tblLiquorClass) == 'object') {
	for(rec in tblLiquorClass) if(!matches(tblLiquorClass[rec]['Class'], 'Dancing', 'MI-Mini Bar After 3rd year')) branch('RENEWAL:ALCOHOL_FEES_01');
	}
`^
ASA;Licenses!Renewal!Car Dealer!NA^`
termOfLicense = AInfo['Term of License'];
if (termOfLicense == '2 Year') {
	updateFee('FL090A','RENEWALLICCARDEAL','STANDARD',0,'Y','N');
	updateFee('FL091','RENEWALLICCARDEAL','STANDARD',1,'Y','N');
	}

if (termOfLicense == '1 Year') {
	updateFee('FL091','RENEWALLICCARDEAL','STANDARD',0,'Y','N');
	updateFee('FL090A','RENEWALLICCARDEAL','STANDARD',1,'Y','N');
	}

if (publicUser) {
	updateFee('TF001','RENEWALLICCARDEAL','STANDARD',1,'Y','N');
	updateFee('CC003','RENEWALLICCARDEAL','STANDARD',1,'Y','N');
	}
`^
ASA;Licenses!Renewal!City Contractor Registration!NA^`
updateFee('FL001','RENEWALLICCREG','STANDARD',1,'Y','N');
if (publicUser) {
	updateFee('TF001','RENEWALLICCREG','STANDARD',1,'Y','N');
	updateFee('CC003','RENEWALLICCREG','STANDARD',1,'Y','N');
	}
`^
ASA;Licenses!Renewal!DowntownResidentialParking!NA^`
addDowntownResidentialParkingRenewalFee();
if (publicUser) {
	updateFee('CC003','RENEWALLICDTRESPARK','STANDARD',1,'Y','N');
	}
`^
ASA;Licenses!Renewal!Flea Market!NA^`
updateFee('FL260','RENEWALLICFLEAMARKET','STANDARD',1,'Y','N');
if (publicUser) {
	updateFee('TF001','RENEWALLICFLEAMARKET','STANDARD',1,'Y','N');
	updateFee('CC003','RENEWALLICFLEAMARKET','STANDARD',1,'Y','N');
	}
`^
ASA;Licenses!Renewal!Hotel Motel!NA^`
updateFee('FL070','RENEWALLICHOTEL','STANDARD',1,'Y','N');
if (publicUser) {
	logDebug('Add Renewal fees');
	updateFee('FL070','RENEWALLICHOTEL','STANDARD',1,'Y');
	updateFee('TF001','RENEWALLICHOTEL','STANDARD',1,'Y');
	}

if (publicUser) {
	updateFee('TF001','RENEWALLICHOTEL','STANDARD',1,'Y','N');
	updateFee('CC003','RENEWALLICHOTEL','STANDARD',1,'Y','N');
	}
`^
ASA;Licenses!Renewal!Lodging!NA^`
updateFee('FL072','RENEWALLICLODGE','STANDARD',1,'Y','N');
if (publicUser) {
	updateFee('TF001','RENEWALLICLODGE','STANDARD',1,'Y','N');
	updateFee('CC003','RENEWALLICLODGE','STANDARD',1,'Y','N');
	}
`^
ASA;Licenses!Renewal!Residential Parking!NA^`
if (publicUser) {
	updateFee('FL074R','RENEWALLICRESPK','STANDARD',1,'Y','N');
	}

if (publicUser) {
	updateFee('CC003','RENEWALLICRESPK','STANDARD',1,'Y','N');
	}
`^
ASA;Licenses!Renewal!Security Alarm!NA^`
if (publicUser) {
	updateFee('CCACA','RENEWALLICSECALM','STANDARD',1,'Y','N');
	}

if(AInfo['Term of License'] == '1 Year') updateFee('FL030R','RENEWALLICSECALM','STANDARD',0,'Y','N');
if(AInfo['Term of License'] == '1 Year') updateFee('FL021R','RENEWALLICSECALM','STANDARD',1,'Y','N');
if(AInfo['Term of License'] == '3 Year') updateFee('FL021R','RENEWALLICSECALM','STANDARD',0,'Y','N');
if(AInfo['Term of License'] == '3 Year') updateFee('FL030R','RENEWALLICSECALM','STANDARD',1,'Y','N');
`^
ASA;Licenses!Renewal!Sign!NA^`
if (AInfo['Type of License'] == 'Sign Painting Only') {
	updateFee('FL086','RENEWALLICSIGN','STANDARD',0,'Y','N');
	updateFee('FL087','RENEWALLICSIGN','STANDARD',0,'Y','N');
	updateFee('FL088','RENEWALLICSIGN','STANDARD',0,'Y','N');
	updateFee('FL085','RENEWALLICSIGN','STANDARD',1,'Y','N');
	}

if (AInfo['Type of License'] == 'On/Off Premise') {
	updateFee('FL086','RENEWALLICSIGN','STANDARD',1,'Y','N');
	updateFee('FL087','RENEWALLICSIGN','STANDARD',0,'Y','N');
	updateFee('FL088','RENEWALLICSIGN','STANDARD',0,'Y','N');
	updateFee('FL085','RENEWALLICSIGN','STANDARD',0,'Y','N');
	}

if (AInfo['Type of License'] == 'Inflatable Sign B-3') {
	updateFee('FL086','RENEWALLICSIGN','STANDARD',0,'Y','N');
	updateFee('FL087','RENEWALLICSIGN','STANDARD',1,'Y','N');
	updateFee('FL088','RENEWALLICSIGN','STANDARD',0,'Y','N');
	updateFee('FL085','RENEWALLICSIGN','STANDARD',0,'Y','N');
	}

if (AInfo['Type of License'] == 'Inflatable Sign B-4') {
	updateFee('FL086','RENEWALLICSIGN','STANDARD',0,'Y','N');
	updateFee('FL087','RENEWALLICSIGN','STANDARD',0,'Y','N');
	updateFee('FL088','RENEWALLICSIGN','STANDARD',1,'Y','N');
	updateFee('FL085','RENEWALLICSIGN','STANDARD',0,'Y','N');
	}

if (publicUser) {
	updateFee('TF001','RENEWALLICSIGN','STANDARD',1,'Y','N');
	updateFee('CC003','RENEWALLICSIGN','STANDARD',1,'Y','N');
	}
`^
ASA;Licenses!Renewal!Vendor!NA^`
updateFee('FL065','RENEWALLICVEND','STANDARD',1,'Y','N');
if (publicUser) {
	updateFee('TF001','RENEWALLICVEND','STANDARD',1,'Y','N');
	updateFee('CC003','RENEWALLICVEND','STANDARD',1,'Y','N');
	}
`^
ASA;Licenses!Security Alarm!NA!NA^`
if (currentUserID.indexOf('PUBLICUSER') == 0) {
	updateFee('CCACA','LICSECALM','STANDARD',1,'Y');
	}
`^
ASA;Licenses!Sexually Oriented Business!NA!NA^`
email('CantuBR@elpasotexas.gov;
DeLaFuenteJr@elpasotexas.gov', 'accela@elpasotexas.gov', ('New Sexual Oriented Business ' + capIDString), 'This is a Notification that a new Sexual Oriented Business Application have been created, record ID is : ' + capIDString);
`^
ASA;Licenses!Swimming Pool and Spa!NA!NA^`
assignedInsp = 'SOTODY';
comment('Assigned Inspector is: ' +assignedInsp);
nextInspDate = dateAdd(null,1);
comment('nextInspDate is: ' + nextInspDate);
inspType='1600 Site Inspection';
scheduleInspectDate(inspType,nextInspDate,assignedInsp);
`^
ASA;Licenses!Tattoo Body Piercing Employee!NA!NA^`
assignedInsp = 'SOTODY';
comment('Assigned Inspector is: ' +assignedInsp);
nextInspDate = dateAdd(null,1);
comment('nextInspDate is: ' + nextInspDate);
inspType='1600 Site Inspection';
scheduleInspectDate(inspType,nextInspDate,assignedInsp);
`^
ASA;Licenses!Trailer Court!NA!NA^`
assignedInsp = 'SOTODY';
comment('Assigned Inspector is: ' +assignedInsp);
nextInspDate = dateAdd(null,1);
comment('nextInspDate is: ' + nextInspDate);
inspType='1600 Site Inspection';
scheduleInspectDate(inspType,nextInspDate,assignedInsp);
`^
ASA;Licenses!Vacant!Building!NA^`
branch('LIC_VACANT_BLDG_getGIS_DATA');
`^
ASA;Planning!~!~!~^`
branch('GIS DATA');
if ((getGISInfo('Accela_map', 'HistoricalDistrict', 'NAME') != null && getGISInfo('Accela_map', 'HistoricalDistrict', 'NAME') != '' && getGISInfo('Accela_map', 'HistoricalDistrict', 'NAME') != 'undefined')) {
	addParcelCondition('','Parcel','Applied','Historic Property','Historic Property','Notice');
	}
`^
ASA;Planning!Subdivision!Easement!NA^`
if (AInfo['Right-of-Way Type'] == 'Dedication') {
	addFee('FP016','PLNEASE','STANDARD',1,'N');
	}

if (AInfo['Right-of-Way Type'] == 'Vacation') {
	addFee('FP015','PLNEASE','STANDARD',1,'N');
	}
`^
ASA;Planning!Subdivision!Five Day Review!NA^`
editAppSpecific('Fourth Business Day', dateAdd(null, 5, 'Y'));
`^
ASA;Planning!Subdivision!Plat Determination!NA^`
if (publicUser) {
	updateFee('TF001A','PLNPLAT','STANDARD',1,'Y','N');
	updateFee('CC003_ONL','PLNPLAT','STANDARD',1,'Y','N');
	}
`^
ASA;Planning!Subdivision!Right of Way!NA^`
if (AInfo['Right-of-Way Type'] == 'Vacation') {
	addFee('FP017','PLNROW','STANDARD',1,'N');
	}

if (AInfo['Right-of-Way Type'] == 'Dedication') {
	addFee('FP018','PLNROW','STANDARD',1,'N');
	}
`^
ASA;Planning!Subdivision!Subdivision!Combo^`
if (AInfo['Type'] == 'Major') {
	addFee('FP002C','PLNSDSD','STANDARD',1,'N');
	}

if (AInfo['Type'] == 'Minor') {
	addFee('FP002E','PLNSDSD','STANDARD',1,'N');
	}

if (AInfo['Type'] == 'Resubdivision') {
	addFee('FP002G','PLNSDSD','STANDARD',1,'N');
	}
`^
ASA;Planning!Subdivision!Subdivision!Final^`
if (AInfo['Type'] == 'Major') {
	addFee('FP002B','PLNSDSD','STANDARD',1,'N');
	}

if (AInfo['Type'] == 'Minor') {
	addFee('FP002E','PLNSDSD','STANDARD',1,'N');
	}

if (AInfo['Type'] == 'Resubdivision') {
	addFee('FP002F','PLNSDSD','STANDARD',1,'N');
	}
`^
ASA;Planning!Subdivision!Subdivision!Preliminary^`
if (AInfo['Type'] == 'Major') {
	addFee('FP002','PLNSDSD','STANDARD',1,'N');
	}

if (AInfo['Type'] == 'Minor') {
	addFee('FP002E','PLNSDSD','STANDARD',1,'N');
	}

if (AInfo['Type'] == 'Resubdivision') {
	addFee('FP002D','PLNSDSD','STANDARD',1,'N');
	}
`^
ASA;Planning!Subdivision!Vacation of Recorded Plat!NA^`
addFee('FP019','PLNROW','STANDARD',1,'N');
`^
ASA;Planning!Zoning Verification!NA!NA^`
for (eachrow in GROUPHOUSING) branch('ES_PZVE_CHECKMARK_LOOP');
`^
ASA;Planning!Zoning!Condition Amend or Release!NA^`
branch('ES_PLANNING_AMENDMNT_ACA_ADD_FEES');
`^
ASA;Planning!Zoning!Detailed Site Plan!NA^`
zoningDist = AInfo['Zoning Dist'];
if (!matches(zoningDist, 'G-MU General Mixed Use','R-MU Residential Mixed Use','I-MU Industrial Mixed Use')) {
	branch('ES_PLANNING_DETSITEP_ACA_ADD_FEES');
	}
`^
ASA;Planning!Zoning!Legal Non-Conforming!NA^`
for (eachrow in GROUPHOUSING) branch('ES_PLAC_DROPDOWN_LOOP');
`^
ASA;Planning!Zoning!PWSF Communications!NA^`
if (AInfo['Fast Track'] == 'Yes') {
	sender = 'accela@elpasotexas.gov';
	theRecipient = 'chavezj1@elpasotexas.gov;
	salloumam@elpasotexas.gov;
	mcelroyms@elpasotexas.gov;
	rubioax@elpasotexas.gov';
	subject = ('Planning Zoning Record Number: ' + capIDString);
	content = ('The Planning Zoning Record Number ' + capIDString + ' has been submitted'+ '<BR><BR>' +'This item needs to be fast tracked in order to meet FCC regulations on Personal Wireless Service facilities');
	email(theRecipient, sender, subject, content);
	}
`^
ASA;Planning!Zoning!Rezoning!NA^`
zoningDist = AInfo['Zoning Dist'];
if (!matches(zoningDist, 'G-MU General Mixed Use','R-MU Residential Mixed Use','I-MU Industrial Mixed Use')) {
	branch('ES_PLANNING_REZONING_ACA_ADD_FEES');
	}
`^
ASA;Planning!Zoning!Sign Permit!NA^`
branch('COEP_PLAN_ADD_VALUATION_FEE');
`^
ASA;Planning!Zoning!Special Permit!NA^`
for (eachrow in GROUPHOUSING) branch('ES_PZST_DROPDOWN_LOOP');
zoningDist = AInfo['Zoning Dist'];
if (!matches(zoningDist, 'G-MU General Mixed Use','R-MU Residential Mixed Use','I-MU Industrial Mixed Use')) {
	branch('ES_PLANNING_SPECIALP_ACA_ADD_FEES');
	}

if (AInfo['Special Permit Type'] == 'PWSF (Personal Wireless Service Facility)') {
	sender = 'accela@elpasotexas.gov';
	theRecipient = 'chavezj1@elpasotexas.gov;
	salloumam@elpasotexas.gov;
	mcelroyms@elpasotexas.gov;
	rubioax@elpasotexas.gov';
	subject = ('Planning Zoning Record Number: ' + capIDString);
	content = ('The Planning Zoning Record Number ' + capIDString + ' has been submitted'+ '<BR><BR>' +'This is an Expedited review for a Personal Wireless Service Facility Special Permit.  The expedited review is Required so that the City of El Paso will be in compliance with new FCC Regulations governing the expedited processing time on these types of facilities. Please review within 5 days of review of the distribution.');
	email(theRecipient, sender, subject, content);
	}
`^
ASA;ServiceRequest!Service Request!NA!NA^`
branch('COEP_SERVICE_REQUEST_EMAIL');
branch('COEP_SERVICE_REQ_UPDATE_WORKFLOW');
branch('ES_SERVICEREQUEST_APPLICATIONSUBMITAFTER');
branch('ES_SERVICEREQUEST_GIS_DATA');
branch('DEPARTMENT_GENERATEDBY');
branch ('ES_CREATE_AESP_CHILD');
branch ('ES_CREATE_AEAP_CHILD');
`^
ASB;Planning!Zoning!Rezoning!NA^`
showMessage = true;
`^
ASIA;AMS!ESD!Containers!Pick up^`
var canSerialNumber = AInfo['Can Serial No.'];
parentCapId = getParent();
if (parentCapId != false) {
	pCapObj = aa.cap.getCap(parentCapId).getOutput();
	pGroupType = pCapObj.getCapType().getType();
	pGroupTypeString = pGroupType.toString();
	pSubType = pCapObj.getCapType().getSubType();
	pSubTypeString = pSubType.toString();
	pCategory = pCapObj.getCapType().getCategory();
	pCategoryString = pCategory.toString();
	}

if (parentCapId != false && pGroupTypeString == 'Solid Waste' && pSubTypeString == 'Residential' && pCategory == 'Recycling') {
	editAppSpecific('Can Serial No.',canSerialNumber,parentCapId);
	}
`^
ASIA;AMS!ESD!Missed Garbage!Missed Garbage^`
branch('COEP_MISSED_GARBAGE_FEE');
if (typeof(SUPERVISORLOG) == 'object') {
	for(eachrow in SUPERVISORLOG) branch('ES_MISSED_GARBAGE_LOOP');
	}
`^
ASIA;Animal!~!~!~^`
if (AInfo['Update ASI from Parent']) {
	branch('ES_Animal_Copy_ParentASI');
	}
`^
ASIA;Animal!Animal!NA!NA^`
branch('ES_Animal_Animal_UpdateKennel');
branch('ES_Animal_AppSpecInfoUpdateAfter');
`^
ASIA;Animal!Complaint!NA!NA^`
matches(AInfo['Condition'],'Injured','Sick');
`^
ASIA;Building!~!~!~^`
email('gutierrezma@elpasotexas.gov;
snyper19@gmail.com','accela@elpasotexas.gov','test','test');
`^
ASIA;Building!Commercial!New!NA^`
if (AInfo['BUILDING INFO.Plan Includes Swimming Pool'] == 'Yes') {
	updateFee('FB110','COMMNEW','STANDARD',1,'Y','N');
	}

if (AInfo['BUILDING INFO.Plan Includes Spa'] == 'Yes') {
	updateFee('FB115','COMMNEW','STANDARD',1,'Y','N');
	}
`^
ASIA;Building!Placement!NA!NA^`
branch(''COEP_BUILDING_GET_LATEST_EXPDATE');
`^
ASIA;Building!Plumbing!NA!NA^`
branch('ES_BLDGPLUMB_ADDFEES');
branch('COEP_BLDG_PLUM_ADDASIT');
`^
ASIA;Economic!Incentives!380 Agreement!NA^`
if (KEYDATES.length > 0) {
	for(eachrow in KEYDATES) var isCompleted = false;
	branch('ES_ECONOMIC_INCENTIVES_GET_KEYDATE');
	}
`^
ASIA;Enforcement!Environmental Complaints!NA!NA^`
branch('COEP_ADD_ASIT_ENV_COMPLAINTS');
branch('COEP_SUM_TOTAL_PROPERTY_CLEANUP_BILLING');
branch ('ES_PROJECT_NAME');
`^
ASIA;Enforcement!Property Maintenance!Housing Safety!NA^`
branch('COEP_SCHED_FUTURE_INSP');
branch('ENF_PROPERTYMAIN_HOUSINGSAFETY_Add_Violation');
`^
ASIA;Engineering!Special Privilege!NA!NA^`
branch('ES_ENGSPPRIV_ADDFEES');
`^
ASIA;Engineering!Traffic Control Plans!NA!NA^`
branch('COEP_EXP_TCP_UPDATE');
`^
ASIA;Health!Food Inspections!Mobile!NA^`
if (matches(AInfo['PERMIT INFO.Section'],'4(c)')) {
	addFee('FHC0004','HLTHCOUNTY','STANDARD',1,'N');
	}

if (matches(AInfo['PERMIT INFO.Section'],'4(d)')) {
	addFee('FHC0005','HLTHCOUNTY','STANDARD',1,'N');
	}
`^
ASIA;Health!Food Inspections!Roadside-Outdoor Market!NA^`
if (matches(AInfo['Section'],'4(e)')) {
	addFee('FHC0006','HLTHCOUNTY','STANDARD',1,'N');
	}

if (matches(AInfo['Section'],'9.12.070L')) {
	addFee('FH054','HLTHOS','STANDARD',1,'N');
	addFee('FH057','HLTHOS','STANDARD',1,'N');
	}
`^
ASIA;Health!Food Inspections!Temporary!NA^`
if (AInfo['Section'] == '4(f)') {
	addFee('FHC0007','HLTHCOUNTY','STANDARD',1,'N');
	}

if (AInfo['Section'] =='4(g)') {
	addFee('FHC0008','HLTHCOUNTY','STANDARD',1,'N');
	}
`^
ASIA;Licenses!Fire!NA!NA^`
branch('ES_ADD_LICFIRE_LICTYPE_FEES');
var emailRecipient = 'delacruzja@elpasotexas.gov;
RuizAM@elpasotexas.gov';
var occupancy = false;
var cOfUse = false;
var notify = false;
if (AInfo['Valid Certificate of Occupancy on Site'] == 'Yes') {
	occupancy = true;
	}

if (AInfo['Change of Use'] == 'Yes') {
	cOfUse = true;
	}

if (AInfo['Notify Building Department'] == 'Yes') {
	notify = true;
	}

if (notify && occupancy &&  !cOfUse) {
	email(emailRecipient, 'accela@elpasotexas.gov', 'Valid Certificate of Occupancy on Site for ' + capIDString, 'Valid Certificate of Occupancy on Site was set to yes for ' + capIDString);
	}

if (notify && cOfUse && !occupancy) {
	email(emailRecipient, 'accela@elpasotexas.gov', 'Change of Use for ' + capIDString, 'Change of Use was set to yes for ' + capIDString);
	}

if (notify && occupancy && cOfUse) {
	email(emailRecipient, 'accela@elpasotexas.gov', 'Valid Certificate of Occupancy on Site and Change of Use for ' + capIDString, 'Valid Certificate of Occupancy on Site and Change of Use were set to yes for ' + capIDString);
	}
`^
ASIA;Planning!Subdivision!Subdivision!Combo^`
if (AInfo['Park Zone #'] != null && AInfo['Calculated Total Parkland Fees'] > 0 && AInfo['Verified Parkland Fees'] == 'Yes') {
	branch('COEP_ADD_PARKS_FEES');
	}
`^
ASIA;Planning!Zoning!Sign Permit!NA^`
valuation1= 0;
branch('ES_SIGN_VALUATION');
editAppSpecific('GENERAL.Total Valuation',valuation1);
`^
ASIA;ServiceRequest!Service Request!NA!NA^`
if (matches(currentUserID,'HERNANDEZGU')) {
	branch('COEP_SERVICE_REQUEST_EMAIL');
	}

branch('COEP_SERVICE_REQ_UPDATE_WORKFLOW');
`^
ApplicationSpecificInfoUpdateAfter^`
showDebug = false;
showMessage = false;
if (matches(currentUserID,'RIVERALD')) {
	showDebug = 3;
	showMessage=true;
	}

branch('ASIA:' + appTypeArray[0] + '/*/*/*');
branch('ASIA:' + appTypeArray[0] + '/' + appTypeArray[1] + '/*/*');
branch('ASIA:' + appTypeArray[0] + '/' + appTypeArray[1] + '/' + appTypeArray[2] +'/*');
branch('ASIA:' + appTypeArray[0] + '/' + appTypeArray[1] + '/*/' + appTypeArray[3]);
branch('ASIA:' + appTypeArray[0] + '/*/*/' + appTypeArray[3]);
branch('ASIA:' + appTypeString);
`^
ApplicationStatusUpdateAfter^`
ProcessPendingEMSETasks('https://pdox.elpasotexas.gov/projectdox/integration/AccelaGoVXML/Accela_EMSE.asmx', 'E52E3269-2B81-47B4-B376-1F58FAF1A1BC', getCapId());
showDebug=false;
showMessage=false;
`^
ApplicationSubmitAfter^`
if (currentUserID == 'RIVERALD') {
	branch('EMSE:GlobalFlags');
	showDebug = true;
	showMessage = true;
	}

if (matches('RIVERALD','BSHIPP','CHAVEZJ1','SALCIDOJR1', 'VONSCHOECHRF','STASOSD') || enablePublicUserACADebug == true) {
	showDebug = 3;
	showMessage =true;
	comment('Test Value ' + appTypeString + ']');
	}

copyParcelGisObjects();
branch('ASA:' + appTypeArray[0] + '/*/*/*');
branch('ASA:' + appTypeArray[0] + '/' + appTypeArray[1] + '/*/*');
branch('ASA:' + appTypeArray[0] + '/' + appTypeArray[1] + '/' + appTypeArray[2] +'/*');
branch('ASA:' + appTypeArray[0] + '/' + appTypeArray[1] + '/*/' + appTypeArray[3]);
branch('ASA:' + appTypeArray[0] + '/*/*/' + appTypeArray[3]);
branch('ASA:' + appTypeString);
`^
ApplicationSubmitBefore^`
showDebug = false;
showMessage = false;
if (matches(currentUserID,'GUTIERREZMA','SANTOSX','BSHIPP')) {
	showDebug = true;
	showMessage=true;
	}

if (!appMatch('Building/3rd/*/*') && matches(currentUserID,'CASSOLOPEZ','CARRIZALJX','FIERRORM','FRIASSX','ROJASCI','MONTEROSEH3','SORENSONKX','FERNANDEZLX','LOYAOX','LOZANORX2','HARDINGRJ3','VALDEZSX2','MELENDEZS3','GONZALEZVB','CARSONFW','VARELAJA')) {
	showMessage=true;
	comment('<font size=small><b>Action Denied:</b></font><br><br>3rd Party are not allow to create this record. Please contact system administrator<br><br>');
	cancel = true;
	}

branch('ASB:' + appTypeArray[0] + '/*/*/*');
branch('ASB:' + appTypeArray[0] + '/' + appTypeArray[1] + '/*/*');
branch('ASB:' + appTypeArray[0] + '/' + appTypeArray[1] + '/' + appTypeArray[2] +'/*');
branch('ASB:' + appTypeArray[0] + '/' + appTypeArray[1] + '/*/' + appTypeArray[3]);
branch('ASB:' + appTypeArray[0] + '/*/*/' + appTypeArray[3]);
branch('ASB:' + appTypeString);
`^
BRANCH_DUA_EDR_HANDLE_CHECK_IN^`
if (getDocOperation(documentModelArray) == 'CHECK_IN') {
	documentModelArray.get(0).setRecStatus('A');
	documentModelArray.get(0).setSource(getVendor(documentModelArray.get(0).getSource(),documentModelArray.get(0).getSourceName()));
	documentModelArray.get(0).setDocStatus('Markup Complete');
	aa.document.updateDocument(documentModelArray.get(0));
	}
`^
COEP_ADD_ASIT_ENV_COMPLAINTS^`
showMessage=false;
showDebug=false;
addRowArray2 = new Array;
addRowArray2['Resource Type'] = 'E-Hand Tools';
addRowArray2['Resource Quanitity'] = '1';
addRowArray2['Cost per Hour/Day'] = '5.00';
addRowArray2['Units'] = '';
addRowArray2['# of Minutes'] = '';
addRowArray2['Total'] = '5.00';
addRowArray3 = new Array;
addRowArray3['Resource Type'] = 'O-Administrative Fee';
addRowArray3['Resource Quanitity'] = '1';
addRowArray3['Cost per Hour/Day'] = '15.00';
addRowArray3['Units'] = '';
addRowArray3['# of Minutes'] = '';
addRowArray3['Total'] = '15.00';
addRowArray1 = new Array;
addRowArray1['Resource Type'] = 'L-Supervisor';
addRowArray1['Resource Quanitity'] = '1';
addRowArray1['Cost per Hour/Day'] = '23.00';
addRowArray1['Units'] = '';
addRowArray1['# of Minutes'] = '';
addRowArray1['Total'] = '23.00';
if (PROPERTYCLEANUPBILLING.length < 1) {
	addToASITable('PROPERTY CLEAN UP BILLING', addRowArray1);
	addToASITable('PROPERTY CLEAN UP BILLING', addRowArray2);
	addToASITable('PROPERTY CLEAN UP BILLING', addRowArray3);
	}
`^
COEP_ADD_PARKS_FEES^`
showDebug=false;
showMessage=false;
parkzone = AInfo['Park Zone #'];
amount = AInfo['Calculated Total Parkland Fees'];
if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'E-1') {
	addFee('FSPD030','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'E-2') {
	addFee('FSPD031','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'E-3') {
	addFee('FSPD032','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'E-4') {
	addFee('FSPD033','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'E-5') {
	addFee('FSPD034','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'E-6') {
	addFee('FSPD035','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'E-7') {
	addFee('FSPD036','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'E-8') {
	addFee('FSPD037','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'E-9') {
	addFee('FSPD038','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'E-10') {
	addFee('FSPD039','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'C-1') {
	addFee('FSPD015','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'E-11') {
	addFee('FSPD040','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'MV-1') {
	addFee('FSPD023','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'MV-2') {
	addFee('FSPD024','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'MV-3') {
	addFee('FSPD025','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'MV-4') {
	addFee('FSPD026','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'MV-5') {
	addFee('FSPD027','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'MV-6') {
	addFee('FSPD028','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'MV-7') {
	addFee('FSPD029','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'NE-1') {
	addFee('FSPD041','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'NE-2') {
	addFee('FSPD042','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'C-2') {
	addFee('FSPD016','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'NE-3') {
	addFee('FSPD043','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'NE-4') {
	addFee('FSPD044','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'NE-5') {
	addFee('FSPD045','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'NE-6') {
	addFee('FSPD046','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'NE-7') {
	addFee('FSPD047','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'NW-1') {
	addFee('FSPD001','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'NW-2') {
	addFee('FSPD002','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'NW-3') {
	addFee('FSPD003','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'NW-4') {
	addFee('FSPD004','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'NW-5') {
	addFee('FSPD005','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'C-3') {
	addFee('FSPD017','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'NW-6') {
	addFee('FSPD006','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'NW-7') {
	addFee('FSPD007','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'NW-8') {
	addFee('FSPD008','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'NW-9') {
	addFee('FSPD009','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'NW-10') {
	addFee('FSPD010','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'NW-11') {
	addFee('FSPD011','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'NW-12') {
	addFee('FSPD012','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'NW-13') {
	addFee('FSPD013','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'NW-14') {
	addFee('FSPD014','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'C-4') {
	addFee('FSPD018','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'C-5') {
	addFee('FSPD019','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'C-6') {
	addFee('FSPD020','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'C-7') {
	addFee('FSPD021','PLNSDSD','STANDARD',amount,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo') && parkzone == 'C-8') {
	addFee('FSPD022','PLNSDSD','STANDARD',amount,'N');
	}
`^
COEP_ADD_PLANNING_REINSP_FEES^`
showMessage=false;
showDebug=false;
if (appMatch('Planning/Zoning/PWSF Communications/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGPWSF','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}
`^
COEP_AMUSE_OCC_TAX_QTR_FEES^`
var gDate = new Date(wfDateMMDDYYYY);
var gMonth = (gDate.getMonth() +1);
showMessage=true;
showDebug=true;
comment('TEST MONTH : ' + gMonth );
cancel=true;
if (appMatch('Licenses/Amusement Occupation Tax/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && (gMonth == '1' || gMonth == '2' || gMonth == '3')) {
	addFee('FL089','LICOCCTAX','STANDARD',AInfo['No. of Tags'],'N');
	}

if (appMatch('Licenses/Amusement Occupation Tax/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && (gMonth == '4' || gMonth == '5' || gMonth == '6')) {
	addFee('FL130','LICOCCTAX','STANDARD',AInfo['No. of Tags'],'N');
	}

if (appMatch('Licenses/Amusement Occupation Tax/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && (gMonth == '7' || gMonth == '8' || gMonth == '9')) {
	addFee('FL131','LICOCCTAX','STANDARD',AInfo['No. of Tags'],'N');
	}

if (appMatch('Licenses/Amusement Occupation Tax/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && (gMonth == '10' || gMonth == '11' || gMonth == '12')) {
	addFee('FL132','LICOCCTAX','STANDARD',AInfo['No. of Tags'],'N');
	}
`^
COEP_BLDG_CHECK_FLDPLNCERT^`
numRows = 0;
prelimFldPlnCert = 'NO';
finalFloodPlnCert ='NO';
InConstructionApproved = 'NO';
if ((inspType == '810 Foundation Inspection' || inspType == '830 Structural Inspection') && AInfo['Flood Plain'] == 'Yes' && typeof(SITEINFORMATION) != 'object') {
	showMessage = true;
	comment('Cannot be Issued. Preliminary Flood Plain Cert has not been approved.');
	cancel = true;
	}

if ((inspType == '810 Foundation Inspection' || inspType == '830 Structural Inspection') && AInfo['Flood Plain'] == 'Yes' && typeof(SITEINFORMATION) == 'object') {
	for (eachrow in SITEINFORMATION) branch('COEP_BLDG_CHECK_FLDPLNCERT_LOOP');
	}

if (inspType == '810 Foundation Inspection' && AInfo['Flood Plain'] == 'Yes' && (numRows == 0 || InConstructionApproved == 'NO')) {
	showMessage = true;
	comment('Cannot be Scheduled. In Construction Certificate has not been approved.');
	cancel = true;
	}

if (inspType == '830 Structural Inspection' && AInfo['Flood Plain'] == 'Yes' && (numRows == 0 || finalFloodPlnCert  == 'NO')) {
	showMessage = true;
	comment('Cannot be Issued. Final Flood Plane Certificate has not been approved.');
	cancel = true;
	}
`^
COEP_BLDG_CHECK_FLDPLNCERT_LOOP^`
siteRow = SITEINFORMATION[eachrow];
if (siteRow['Type'] == 'Preliminary Flood Plain Cert') {
	numRows = (numRows + 1);
	}

if (siteRow['Type'] == 'In Construction' && siteRow['Status'] == 'Approved') {
	InConstructionApproved = 'YES';
	}

if (siteRow['Type'] == 'Final Flood Plain Cert' && siteRow['Status'] == 'Approved') {
	finalFloodPlnCert  = 'YES';
	}
`^
COEP_BLDG_DEMOLITION_GET_INSPECTION^`
var inspResultObj = '';
var inspList = '';
var inspResultObj = aa.inspection.getInspections(capId);
if (inspResultObj.getSuccess() != null) {
	inspList = inspResultObj.getOutput();
	}

if (inspList != null) {
	for(xx in inspList) inspType = inspList[xx].getInspectionType();
	comment('inspection type is: ' + inspType );
	}

if (appMatch('Building/Demolition/*/*') && inspType == '800 Final Building Inspection') {
	branch('COEP_BLDG_DEMOLITION_PREVENT_800_FINAL_INSP');
	}
`^
COEP_BLDG_DEMOLITION_PREVENT_800_FINAL_INSP^`
sibCapID = '';
sibCapID = getChildren('Environmental/Permits/CDM/NA',capId);
if (sibCapID != null && typeof(sibCapID) == 'object') {
	for (eachchild in sibCapID) branch('COEP_BLDG_DEMOLITION_PREVENT_800_FINAL_INSP_LOOP');
	}
`^
COEP_BLDG_DEMOLITION_PREVENT_800_FINAL_INSP_LOOP^`
eachsibCapID = sibCapID[eachchild];
if (eachsibCapID != false) {
	eachsibCapObj = aa.cap.getCap(eachsibCapID).getOutput();
	sibCapStatus = eachsibCapObj.getCapStatus();
	sibAppTypeResult = eachsibCapObj.getCapType();
	sibAppTypeString = sibAppTypeResult.toString();
	comment('Sib CAP status is: ' + sibCapStatus);
	}

if (sibCapStatus != 'Passed') {
	comment('Cannot schedule a 800 Final Inspection if children record isn't complete, Child record is: ' + sibAppTypeString );
	cancel=true;
	}
`^
COEP_BLDG_ELEC_ADDASIT^`
addRowArray1 = new Array;
addRowArray1['Equipment Type'] = '';
addRowArray1['Fixture Type'] = '';
addRowArray1['Quantity'] = '';
addRowArray1['Units'] = '';
addRowArray1['Notes'] = '';
addRowArray1['Alt Id'] = '';
if (typeof(ELECTRICALEQUIPMENT) != 'object') {
	addToASITable('ELECTRICAL EQUIPMENT', addRowArray1);
	}
`^
COEP_BLDG_MECH_ADDASIT^`
addRowArray1 = new Array;
addRowArray1['Equipment Type'] = '';
addRowArray1['Fixture Type'] = '';
addRowArray1['Quantity'] = '';
addRowArray1['Units'] = '';
addRowArray1['Notes'] = '';
if (typeof(MECHANICALEQUIPMENT) != 'object') {
	addToASITable('MECHANICAL EQUIPMENT', addRowArray1);
	}
`^
COEP_BLDG_PLUM_ADDASIT^`
addRowArray1 = new Array;
addRowArray1['Fixture Type'] = '';
addRowArray1['Quantity'] = '';
addRowArray1['Notes'] = '';
if (PLUMBINGFIXTURES.length < 1) {
	addToASITable('PLUMBING FIXTURES', addRowArray1);
	}
`^
COEP_BLDG_PLUM_ADDASIT_LOOP^`
plumRow = PLUMBINGFIXTURES[eachrow];
if (plumRow['Fixture Type'] != '') {
	numRows = (numRows + 1);
	}
`^
COEP_BUILDING_GET_LATEST_EXPDATE^`
var LatestDate = '';
if (typeof(PERMITEXTENSION)== 'object') {
	for(eachrow in PERMITEXTENSION) branch('COEP_BUILDING_GET_LATEST_EXPDATE_LOOP');
	}

if (LatestDate != '') {
	comment('New ExpDate out of loop ' + LatestDate);
	}

if (LatestDate != '') {
	editAppSpecific('Expiration Date', LatestDate);
	}
`^
COEP_BUILDING_GET_LATEST_EXPDATE_LOOP^`
asiRow = PERMITEXTENSION[eachrow];
if (asiRow['New Expiration Date'] != null) {
	LatestDate = asiRow['New Expiration Date'];
	editAppSpecific('Expiration Date', LatestDate);
	}
`^
COEP_CAR_RENEWAL_ADDFEE^`
if (numberOfYears == 1) {
	addFee('FL090','LICCARDEAL','STANDARD',145,'N');
	editAppSpecific('Expiration Date', dateAddMonths(null, 12));
	}

if (numberOfYears == 2) {
	addFee('FL090','LICCARDEAL','STANDARD',290,'N');
	editAppSpecific('Expiration Date', dateAddMonths(null, 24));
	}
`^
COEP_CHECKFOR_HISTORICAL_RECORD^`
var sibCapID = childGetByCapType('Planning/Historic Preservation/Historical Admin Review/*', null);
var gisHistorical = getGISInfo('Accela_map','Zoning','HISTLABEL');
if ((appMatch('Building/*/*/*') || appMatch('Planning/Zoning/PWSF Communications/NA') || appMatch('Planning/Zoning/Sign Permit/NA')) && (!appMatch('Building/Plumbing/*/*') && !appMatch('Building/Electrical/*/*')) && wfTask == 'Application Submittal' && wfStatus == 'Completed' && gisHistorical == 'H' && sibCapID != null) {
	comment('sibCapID is : ' + sibCapID);
	}

if ((appMatch('Building/*/*/*') || appMatch('Planning/Zoning/PWSF Communications/NA') || appMatch('Planning/Zoning/Sign Permit/NA')) && (!appMatch('Building/Plumbing/*/*') && !appMatch('Building/Electrical/*/*')) && wfTask == 'Application Submittal' && wfStatus == 'Completed' && gisHistorical == 'H' && sibCapID == null) {
	showMessage=true;
	comment('Cannot Submit Application because there is no Historical child record Created ');
	cancel=true;
	}

if ((appMatch('Building/*/*/*') || appMatch('Planning/Zoning/PWSF Communications/NA') || appMatch('Planning/Zoning/Sign Permit/NA')) && (!appMatch('Building/Plumbing/*/*') && !appMatch('Building/Electrical/*/*')) && wfTask == 'Application Submittal' && wfStatus == 'Completed' && gisHistorical == 'H' && sibCapID != null) {
	sibCapObj = aa.cap.getCap(sibCapID).getOutput();
	sibCapStatus = sibCapObj.getCapStatus();
	}

if ((appMatch('Building/*/*/*') || appMatch('Planning/Zoning/PWSF Communications/NA') || appMatch('Planning/Zoning/Sign Permit/NA')) && (!appMatch('Building/Plumbing/*/*') && !appMatch('Building/Electrical/*/*')) && wfTask == 'Application Submittal' && wfStatus == 'Completed' && gisHistorical == 'H' && sibCapID != null  && (sibCapStatus != 'In Compliance' || sibCapStatus != 'Closed')) {
	showMessage=true;
	comment('Cannot Issue because child record workflow is Not completed. Historical Status is : ' + sibCapStatus);
	cancel=true;
	}
`^
COEP_CHECK_EXPDATE^`
new Date(AInfo['GENERAL.Expiration Date']);
var myDate = new Date();
myDate = sysDate.getMonth() + '/' + sysDate.getDayOfMonth()+'/' + sysDate.getYear();
comment('myDate: [' + myDate + ']   Expiration Date: [' + AInfo['Expiration Date'] + ']');
if (AInfo['GENERAL.Expiration Date'] <= myDate) {
	showMessage = true;
	comment('Permit is Expired, Inspection cannot be Scheduled');
	cancel = true;
	}
`^
COEP_CHECK_NO_LIC_PROF^`
var profArr  = aa.licenseScript.getLicenseProf(capId);
if (profArr.getSuccess()) {
	profArrList = profArr.getOutput();
	}

if (profArrList == null) {
	showMessage=true;
	comment('No licensed professionals found on CAP');
	cancel=true;
	}
`^
COEP_EMAIL_LIC_PRO^`
var profArr  = aa.licenseScript.getLicenseProf(capId);
if (profArr.getSuccess()) {
	profArrList = profArr.getOutput();
	}

showMessage=true;
comment('LOOP ENTERED   ' + profArrList[i].getEmail());
showDebug=true;
if (appMatch('Fire/Supression System/NA/NA') && wfTask == 'Fire Review' && (wfStatus == 'Hold for Correction' || wfStatus == 'Failed') && profArrList != null) {
	for(i in profArrList)if(profArrList[i].getEmail() + '' != '') email(profArrList[i].getEmail(),'accela@elpasotexas.gov',' Permit # '+capIDString,' Permit # ' +capIDString+ ' Failed Fire Review and is in Hold for Correction. Please Contact Fire Planner Review @ 915-212-1531.');
	}

if (appMatch('Fire/Supression System/NA/NA') && wfTask == 'Fire Review' && wfStatus == 'Passed' && profArrList != null) {
	for(i in profArrList)if(profArrList[i].getEmail() + '' != '') email(profArrList[i].getEmail(),'accela@elpasotexas.gov',' Permit # '+capIDString,' Permit # ' +capIDString+ ' Passed Fire Review and its ready to issue. Please Contact Fire Planner Review @ 915-212-1531.');
	}
`^
COEP_EXP_TCP_UPDATE^`
var newExpDate = '';
if (appMatch('Engineering/Traffic Control Plans/NA/NA') && typeof(EXPIRATIONDATE) == 'object') {
	for(eachrow in EXPIRATIONDATE) branch('COEP_EXP_TCP_UPDATE_LOOP');
	}

if (appMatch('Engineering/Traffic Control Plans/NA/NA') && typeof(EXPIRATIONDATE) == 'object') {
	showMessage=true;
	comment('NewExpirationDate is ' + AInfo['Expiration Date']);
	}
`^
COEP_EXP_TCP_UPDATE_LOOP^`
asiRow = EXPIRATIONDATE[eachrow];
if (asiRow['Extension Approved'] == 'Yes' && asiRow['Extended to'] != null) {
	editAppSpecific('Expiration Date', asiRow['Extended to']);
	}
`^
COEP_FOOD_HANDLER^`
if (wfTask == 'Close' && wfStatus == 'Scheduled' && wfGetHistDatePlusOne(capId, 'Issue', 'Revoked') == true) {
	showMessage = true;
	comment('Status Date plus 1 year is greater than SysDate ' + wfGetHistDatePlusOne(capId, 'Issue', 'Revoked'));
	cancel = true;
	}

courseDate = '';
var findDate = new Date();
if (SCHEDULEINFORMATION.length > 0 && RECOGNIZEDCOURSEINFORMATION.length < 1) {
	for (eachrow in SCHEDULEINFORMATION) branch('COEP_FOOD_HANDLER_COURSEDATE');
	}

if (SCHEDULEINFORMATION.length < 1 && typeof(RECOGNIZEDCOURSEINFORMATION) == 'object') {
	for (eachrow in RECOGNIZEDCOURSEINFORMATION) branch('COEP_FOOD_HANDLER_COURSEDATE');
	}

editAppSpecific('Expiration Date', dateAddMonths(courseDate,24));
`^
COEP_FOOD_HANDLER_COURSEDATE^`
if (SCHEDULEINFORMATION.length > 0 && RECOGNIZEDCOURSEINFORMATION.length < 1) {
	findDate = SCHEDULEINFORMATION[eachrow]['Course Date'];
	}

if (SCHEDULEINFORMATION.length < 1 && RECOGNIZEDCOURSEINFORMATION.length > 0) {
	findDate = RECOGNIZEDCOURSEINFORMATION[eachrow]['Course Date'];
	}

courseDate = findDate;
`^
COEP_HEALTH_FH_CDATE_LOOP^`
asiRow = RECOGNIZEDCOURSEINFORMATION[eachrow];
todayDate = new Date(dateAdd(null,0));
courseComp2 = false;
if (asiRow['Course Date'] != null) {
	courseComp2 = true;
	}
`^
COEP_HEALTH_MOBILE^`
if (appMatch('Health/Food Inspections/Mobile/*') && matches(AInfo['Section'], '2(b)','4(c)','4(d)','9.12.070G','9.12.070H','9.12.070I')) {
	editAppSpecific('Expiration Date',dateAdd(wfDateMMDDYYYY,365));
	}
`^
COEP_HEALTH_OUTDOOR^`
if (wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['Expiration Date'] == null) {
	editAppSpecific('Expiration Date', dateAddMonths(wfDateMMDDYYYY, 12));
	}
`^
COEP_HEALTH_RECURRENT^`
if (wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['Expiration Date'] == null) {
	editAppSpecific('Expiration Date', dateAddMonths(wfDateMMDDYYYY, 12));
	}
`^
COEP_HEALTH_SEASONAL^`
if (wfTask == 'Inspection' && wfStatus == 'Renewed' && AInfo['Expiration Date'] != null && dateAddMonths(AInfo['Expiration Date'], 6) < sysDate) {
	showMessage = true;
	comment('Cannot allow renewal prior to 6 months past expiration Date');
	cancel = true;
	}
`^
COEP_HOMEOCC_RENEWAL_ADDFEE^`
if (numberOfYears == 1) {
	addFee('FL074','LICHOME','STANDARD',1,'N');
	editAppSpecific('Expiration Date', dateAddMonths(null, 12));
	}

if (numberOfYears == 2) {
	addFee('FL074','LICHOME','STANDARD',2,'N');
	editAppSpecific('Expiration Date', dateAddMonths(null, 24));
	}
`^
COEP_IRR_ADDASIT^`
addRowArray1 = new Array;
addRowArray1['Fixture Type'] = '';
addRowArray1['Quantity'] = '';
addRowArray1['Notes'] = '';
if (typeof(IRRIGATIONFIXTURES) != 'object') {
	addToASITable('IRRIGATION FIXTURES', addRowArray1);
	}

addRowArray1 = new Array;
addRowArray1['Year'] = '';
addRowArray1['Expiration Date'] = wfDateMMDDYYYY;
addToASITable('EXPIRATION', addRowArray1);
`^
COEP_LAUNDRY_RENEWAL_ADDFEE^`
if (numberOfYears == 1) {
	addFee('FL115','LICLAUND','STANDARD',1,'N');
	editAppSpecific('Expiration Date', dateAddMonths(null, 12));
	}

if (numberOfYears == 2) {
	addFee('FL115','LICLAUND','STANDARD',2,'N');
	editAppSpecific('Expiration Date', dateAddMonths(null, 24));
	}
`^
COEP_LICENSES_ADDASIT_EXPDATE^`
addRowArray1 = new Array;
addRowArray1['Year'] = '';
addRowArray1['Expiration Date'] = dateAdd(wfDateMMDDYYYY,365);
editAppSpecific('Expiration Date', addRowArray1['Expiration Date'] );
addToASITable('EXPIRATION', addRowArray1);
`^
COEP_LICENSES_FOOD_EXPDATE^`
if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Issue' && wfStatus == 'Issued') {
	pCapID = getParent();
	var vExpDate = dateAddMonths( wfGetHistStatusDate(pCapID,'Issue','Issued') , 12);
	}

if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Issue' && wfStatus == 'Issued' && pCapID != false) {
	pCapObj = aa.cap.getCap(pCapID).getOutput();
	pCapStatus = pCapObj.getCapStatus();
	pAppTypeResult = pCapObj.getCapType();
	pAppTypeString = pAppTypeResult.toString();
	pAppTypeArray = pAppTypeString.split('/');
	PerGroup = pAppTypeArray[0];
	PerType = pAppTypeArray[1];
	}

if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Issue' && wfStatus == 'Issued' && pCapID != false && PerGroup == 'Health' && PerType == 'Food Inspections') {
	editAppSpecific('Expiration Date', vExpDate);
	}
`^
COEP_LICENSES_RENEWAL_YEARS^`
numberOfYears = ' ';
if (AInfo['Term of License'] == '1 Year') {
	numberOfYears = 1;
	}

if (AInfo['Term of License'] == '2 Year') {
	numberOfYears = 2;
	}

if (appMatch('Licenses/Alcohol/NA/NA') && wfTask == 'Application Submittal' && (wfStatus == 'Completed' || wfStatus == 'No Reviews Required')) {
	branch('COEP_LIC_ALCOHOL_TERMOFLIC_ADDFEE');
	}

if (appMatch('Licenses/Car Dealer/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	branch('COEP_CAR_RENEWAL_ADDFEE');
	}

if (appMatch('Licenses/Swimming Pool and Spa/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	branch('COEP_SWIM_RENEWAL_ADDFEE');
	}

if (appMatch('Licenses/Home Occupation/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	branch('COEP_HOMEOCC_RENEWAL_ADDFEE');
	}

if (appMatch('Licenses/Laundry/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	branch('COEP_LAUNDRY_RENEWAL_ADDFEE');
	}

if (appMatch('Licenses/Sign/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	branch('COEP_SIGN_RENEWAL_ADDFEE');
	}
`^
COEP_LICENSE_ALCOHOL_ADDFEES^`
showDebug=false;
showMessage=false;
if (typeof(LIQUORCLASS) == 'object') {
	for(eachrow in LIQUORCLASS) branch('COEP_LICENSE_ALCOHOL_ADDFEES_LOOP');
	}
`^
COEP_LICENSE_ALCOHOL_ADDFEES_LOOP^`
asiRow = LIQUORCLASS[eachrow];
if (asiRow ['Class'] == 'BQ-Beer/Wine Off Premise') {
	updateFee('FLA180', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'BF-Beer Off Premise') {
	updateFee('FLA190', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'P-Package Store') {
	updateFee('FLA200', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'Q-Package Store Wine Only') {
	updateFee('FLA210', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'LP-Local Distributor') {
	updateFee('FLA220', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'BC-Branch Distributor') {
	updateFee('FLA230', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'BB-General Distributor') {
	updateFee('FLA240', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'W-Wholesale Distributor') {
	updateFee('FLA250', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'X-General Wholesale #B') {
	updateFee('FLA260', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'LX-Local Wholesale #B') {
	updateFee('FLA270', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'MB-Mixed Bev after 3rd year') {
	updateFee('FLA100', 'LICALCOHOL', 'STANDARD',1, 'N', 'N');
	}

if (asiRow ['Class'] == 'BI-Importer's') {
	updateFee('FLA280', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'BJ-Importer's Carrier') {
	updateFee('FLA290', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'Dancing') {
	updateFee('FLA300', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'Billiard Hall (each pool table)') {
	updateFee('FLA310', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'Z-Wine Bottler's Permit') {
	updateFee('FLA320', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'G-Winery Permit') {
	updateFee('FLA330', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'PS-Package Store Tasting Permit') {
	updateFee('FLA340', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'BP-Brew Pub') {
	updateFee('FLA350', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'LB-Mixed Beverage Late Hours') {
	updateFee('FLA110', 'LICALCOHOL', 'STANDARD',1, 'N', 'N');
	}

if (asiRow ['Class'] == 'PE-Beverage Cartage') {
	updateFee('FLA120', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'BG-Beer/Wine On Premise') {
	updateFee('FLA130', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'BL-Beer/Wine Later Hours') {
	updateFee('FLA140', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'BE-Beer On Premise') {
	updateFee('FLA150', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'MI-Mini Bar After 3rd year') {
	updateFee('FLA160', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}

if (asiRow ['Class'] == 'CB-Caterer's After 3rd year') {
	updateFee('FLA170', 'LICALCOHOL', 'STANDARD',1, 'Y', 'N');
	}
`^
COEP_LIC_ALCOHOL_TERMOFLIC_ADDFEE^`
showDebug=false;
showMessage=false;
if (typeof(LIQUORCLASS) == 'object') {
	for(eachrow in LIQUORCLASS) branch('COEP_LIC_ALCOHOL_TERMOFLIC_ADDFEE_LOOP');
	}

if (numberOfYears == 1) {
	editAppSpecific('Expiration Date', dateAddMonths(null, 12));
	}

if (numberOfYears == 2) {
	editAppSpecific('Expiration Date', dateAddMonths(null, 24));
	}
`^
COEP_LIC_ALCOHOL_TERMOFLIC_ADDFEE_LOOP^`
asiRow = LIQUORCLASS[eachrow];
if (asiRow ['Class'] == 'BQ-Beer/Wine Off Premise') {
	updateFee('FLA180', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}

if (asiRow ['Class'] == 'BF-Beer Off Premise') {
	updateFee('FLA190', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}

if (asiRow ['Class'] == 'P-Package Store') {
	updateFee('FLA200', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}

if (asiRow ['Class'] == 'Q-Package Store Wine Only') {
	updateFee('FLA210', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}

if (asiRow ['Class'] == 'LP-Local Distributor') {
	updateFee('FLA220', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}

if (asiRow ['Class'] == 'BC-Branch Distributor') {
	updateFee('FLA230', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}

if (asiRow ['Class'] == 'BB-General Distributor') {
	updateFee('FLA240', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}

if (asiRow ['Class'] == 'W-Wholesale Distributor') {
	updateFee('FLA250', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}

if (asiRow ['Class'] == 'X-General Wholesale #B') {
	updateFee('FLA260', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}

if (asiRow ['Class'] == 'LX-Local Wholesale #B') {
	updateFee('FLA270', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}

if (asiRow ['Class'] == 'MB-Mixed Bev after 3rd year ') {
	addFee('FLA100', 'LICALCOHOL', 'STANDARD',numberOfYears, 'N');
	}

if (asiRow ['Class'] == 'BI-Importer's') {
	updateFee('FLA280', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}

if (asiRow ['Class'] == 'BJ-Importer's Carrier') {
	updateFee('FLA290', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}

if (asiRow ['Class'] == 'Dancing') {
	updateFee('FLA300', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}

if (asiRow ['Class'] == 'Billiard Hall (each pool table)') {
	updateFee('FLA310', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}

if (asiRow ['Class'] == 'Z-Wine Bottler's Permit') {
	updateFee('FLA320', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}

if (asiRow ['Class'] == 'G-Winery Permit') {
	updateFee('FLA330', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}

if (asiRow ['Class'] == 'PS-Package Store Tasting Permit') {
	updateFee('FLA340', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}

if (asiRow ['Class'] == 'BP-Brew Pub') {
	updateFee('FLA350', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}

if (asiRow ['Class'] == 'LB-Mixed Beverage Late Hours') {
	updateFee('FLA110', 'LICALCOHOL', 'STANDARD',numberOfYears, 'N', 'N');
	}

if (asiRow ['Class'] == 'PE-Beverage Cartage') {
	updateFee('FLA120', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}

if (asiRow ['Class'] == 'BG-Beer/Wine On Premise') {
	updateFee('FLA130', 'LICALCOHOL', 'STANDARD',numberOfYears, 'N', 'N');
	}

if (asiRow ['Class'] == 'BL-Beer/Wine Later Hours') {
	updateFee('FLA140', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}

if (asiRow ['Class'] == 'BE-Beer On Premise') {
	updateFee('FLA150', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}

if (asiRow ['Class'] == 'MI-Mini Bar After 3rd year') {
	updateFee('FLA160', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}

if (asiRow ['Class'] == 'CB-Caterer's After 3rd year') {
	updateFee('FLA170', 'LICALCOHOL', 'STANDARD',numberOfYears, 'Y', 'N');
	}
`^
COEP_MISSED_GARBAGE_FEE^`
isZero = false;
isFee = false;
if (typeof(SUPERVISORLOG) == 'object') {
	for (eachrow in SUPERVISORLOG) branch('COEP_MISSED_GARBAGE_FEE_LOOP');
	}

if (isZero == true) {
	closeTask('Field Work Order','Complete no Bill','','Workflow Advanced by Script');
	closeTask('Finance Review','Complete','','Workflow Advanced by Script');
	updateTask('Close','Closed','','Done by Script');
	closeTask('Close','Closed','','Workflow Advanced by Script');
	updateAppStatus('Closed','Closed');
	}

if (isFee == true) {
	closeTask('Field Work Order','Complete to be Invoiced','','Workflow Advanced by Script');
	}
`^
COEP_MISSED_GARBAGE_FEE_LOOP^`
asiRow = SUPERVISORLOG[eachrow];
if (asiRow['Fees'] == '$0') {
	isZero = true;
	comment('Found zero');
	}

if (asiRow['Fees'] == '$10' || asiRow['Fees'] == '$25') {
	isFee = true;
	}
`^
COEP_PARAL_TASK_EMAIL_NOTIF^`
val emailSubject = 'You have been assigned a Record for Review : ';
var emailBody = 'The record number is ';
var emailBody2 = ' You are requested to retrieve and process the request .';
if (appMatch('Planning/Zoning/Detailed Site Plan/NA') && wfTask == 'Email Notification' && wfStatus == 'Emailed' && isTaskActive('Street Review')) {
	email('gutierrezma@elpasotexas.gov','accela@elpasotexas.gov',(emailSubject + capIDString ), ('Record ' + capIDString + ' is ready for Street Review. DCC comments are due on' + wfDateVal + ' .'));
	}

if (appMatch('Planning/Zoning/Detailed Site Plan/NA') && wfTask == 'Email Notification' && wfStatus == 'Emailed' && isTaskActive('ESD Review')) {
	email('rodriguez-hefnerE@elpasotexas.gov','accela@elpasotexas.gov',(emailSubject + capIDString ), ('Record ' + capIDString + ' is ready for ESD Review. DCC comments are due on' + wfDateVal + ' .'));
	}

if (appMatch('Planning/Zoning/Detailed Site Plan/NA') && wfTask == 'Email Notification' && wfStatus == 'Emailed' && isTaskActive('Subdivision Improvement Review')) {
	email('gutierrezma@elpasotexas.gov','accela@elpasotexas.gov',(emailSubject + capIDString ), ('Record ' + capIDString + ' is ready for Subdivision Improvement Review. DCC comments are due on' + wfDateVal + ' .'));
	}

if (appMatch('Planning/Zoning/Detailed Site Plan/NA') && wfTask == 'Email Notification' && wfStatus == 'Emailed' && isTaskActive('Sun Metro Review')) {
	email('segovialb@elpasotexas.gov;
	garciaCK@elpasotexas.gov;
	bryantAM@elpasotexas.gov','accela@elpasotexas.gov',(emailSubject + capIDString ), ('Record ' + capIDString + ' is ready for Sun Metro Review. DCC comments are due on' + wfDateVal + ' .'));
	}

if (appMatch('Planning/Zoning/Detailed Site Plan/NA') && wfTask == 'Email Notification' && wfStatus == 'Emailed' && isTaskActive('HLC Review')) {
	email('DeLaCruzJA@elpasotexas.gov;
	velazquezpx@elpasotexas.gov','accela@elpasotexas.gov',(emailSubject + capIDString ), ('Record ' + capIDString + ' is ready for HLC Review. DCC comments are due on' + wfDateVal + ' .'));
	}

if (appMatch('Planning/Zoning/Detailed Site Plan/NA') && wfTask == 'Email Notification' && wfStatus == 'Emailed' && isTaskActive('EPWU Review')) {
	email('abatista@epwu.org;
	cdominguez@epwu.org;
	flopez@epwu.org;
	garizpe@epwu.org;
	jmhaller@epwu.org;
	rvaldez@epwu.org;
	vgalindo@epwu.org','accela@elpasotexas.gov',(emailSubject + capIDString ), ('Record ' + capIDString + ' is ready for EPWU Review. DCC comments are due on' + wfDateVal + ' .'));
	}

if (appMatch('Planning/Zoning/Detailed Site Plan/NA') && wfTask == 'Email Notification' && wfStatus == 'Emailed') {
	var wfDateVal = ('' + wfDue.getMonth() + '/' + wfDue.getDayOfMonth() + '/' + wfDue.getYear());
	}

if (appMatch('Planning/Zoning/Detailed Site Plan/NA') && wfTask == 'Email Notification' && wfStatus == 'Emailed' && isTaskActive('BPI Review')) {
	email('KaniaDJ@elpasotexas.gov;
	EstalaJO@elpasotexas.gov;
	nelighmp@elpasotexas.gov','accela@elpasotexas.gov',(emailSubject + capIDString ), ('Record ' + capIDString + ' is ready for BPI Review. DCC comments are due on' + wfDateVal + ' .'));
	}

if (appMatch('Planning/Zoning/Detailed Site Plan/NA') && wfTask == 'Email Notification' && wfStatus == 'Emailed' && isTaskActive('Planned Land Dev Plat Review')) {
	email('dallokf@elpasotexas.gov;
	moyanx@elpasotexas.gov;
	sanchezeh@elpasotexas.gov','accela@elpasotexas.gov',(emailSubject + capIDString ), ('Record ' + capIDString + ' is ready for Planned Land Dev Plat Review. DCC comments are due on' + wfDateVal + ' .'));
	}

if (appMatch('Planning/Zoning/Detailed Site Plan/NA') && wfTask == 'Email Notification' && wfStatus == 'Emailed' && isTaskActive('Engineering Traffic Review')) {
	email('bustillosAX@elpasotexas.gov;
	spencerMD2@elpasotexas.gov;
	padillamx@elpasotexas.gov','accela@elpasotexas.gov',(emailSubject + capIDString ), ('Record ' + capIDString + ' is ready for Engineering Traffic Review. DCC comments are due on' + wfDateVal + ' .'));
	}

if (appMatch('Planning/Zoning/Detailed Site Plan/NA') && wfTask == 'Email Notification' && wfStatus == 'Emailed' && isTaskActive('City Engineering Review')) {
	email('gutierrezma@elpasotexas.gov','accela@elpasotexas.gov',(emailSubject + capIDString ), ('Record ' + capIDString + ' is ready for City Engineering Review. DCC comments are due on' + wfDateVal + ' .'));
	}

if (appMatch('Planning/Zoning/Detailed Site Plan/NA') && wfTask == 'Email Notification' && wfStatus == 'Emailed' && isTaskActive('DPH Review')) {
	email('gutierrezma@elpasotexas.gov','accela@elpasotexas.gov',(emailSubject + capIDString ), ('Record ' + capIDString + ' is ready for DPH Review. DCC comments are due on' + wfDateVal + ' .'));
	}

if (appMatch('Planning/Zoning/Detailed Site Plan/NA') && wfTask == 'Email Notification' && wfStatus == 'Emailed' && isTaskActive('Parks Review')) {
	email('DeLaRosaJA@elpasotexas.gov;
	binkleyMT@elpasotexas.gov;
	garciaRG@elpasotexas.gov','accela@elpasotexas.gov',(emailSubject + capIDString ), ('Record ' + capIDString + ' is ready for Parks Review. DCC comments are due on' + wfDateVal + ' .'));
	}

if (appMatch('Planning/Zoning/Detailed Site Plan/NA') && wfTask == 'Email Notification' && wfStatus == 'Emailed' && isTaskActive('Fire Review')) {
	email('floresLU@elpasotexas.gov;
	rodelaE@elpasotexas.gov','accela@elpasotexas.gov',(emailSubject + capIDString ), ('Record ' + capIDString + ' is ready for Fire Review. DCC comments are due on' + wfDateVal + ' .'));
	}
`^
COEP_PAVEMENT_CUT_ORDER^`
subjectMail = ('Pavement Cut Order ' + capId);
bodyMail = ('Pavement Cut Order ' + capIDString);
if (appMatch('Engineering/Pavement Cut/*/*') && wfTask == 'Application Submittal' && wfStatus == 'Submitted') {
	email('lopezrx@elpasotexas.gov','accela@elpasotexas.gov',subjectMail, bodyMail);
	}
`^
COEP_PLANNING_SCZ_EMAIL_NOTIFICATION^`
var emailSubject = ('Record : ' + capIDString + ' is in a SCZ zone ');
var emailBody = ('The record ID : ' + capIDString + ' is in a SCZ zone. ');
if (appMatch('Planning/Zoning/*/*') && getGISInfo('Accela_map', 'Zoning', 'ZONE_') == 'SCZ') {
	email('GibsonEk@elpasotexas.gov;
	KissackLF@elpasotexas.gov','accela@elpasotexas.gov',emailSubject,emailBody);
	activateTask('Smart Code Review');
	}
`^
COEP_PLAN_ADD_VALUATION_FEE^`
var quantity = 0;
if (appMatch('Planning/Zoning/Sign Permit/*') && typeof(SIGN) == 'object') {
	for ( eachrow in SIGN ) branch('COEP_PLAN_ADD_VALUATION_FEE_LOOP');
	}
`^
COEP_PLAN_ADD_VALUATION_FEE_LOOP^`
siteRow = SIGN[eachrow];
quantity = 0;
if (siteRow['Valuation'] != null) {
	quantity = siteRow['Valuation'];
	addFee('FP047','PLNSIGNP','STANDARD',quantity,'N');
	}
`^
COEP_SCHED_BECO_INSP^`
assignedInsp = 'GARCIAAA';
comment('Assigned Inspector is: ' +assignedInsp);
nextInspDate = dateAdd(null,1);
comment('nextInspDate is: ' + nextInspDate);
inspType='250 Building Investigation';
if (appMatch('Building/Existing Building C of O/NA/NA')) {
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}
`^
COEP_SCHED_BUILD_RES_ALT_INSP^`
assignedInsp = '';
var gisArea = getGISInfo('Accela_map','RES BLD INSP AREA','NAME');
comment('Assigned Inspector is: ' +assignedInsp);
nextInspDate = dateAdd(null,1);
comment('nextInspDate is: ' + nextInspDate);
inspType='980 Pre-Inspection';
if (appMatch('Building/Residential/Alteration/NA') && wfTask == 'Issue' && wfStatus == 'Issued' && matches(gisArea,'NORTHWEST','NORTHEAST','CENTRAL','COUNTY WEST', '')) {
	assignedInsp = 'FANNINWB';
	}

if (appMatch('Building/Residential/Alteration/NA') && wfTask == 'Issue' && wfStatus == 'Issued' && matches(gisArea,'LV','LOWER VALLEY','EAST','COUNTY EAST','COUNTY LV')) {
	assignedInsp = 'FIERROGUZMAN';
	}

if (appMatch('Building/Residential/Alteration/NA') && wfTask == 'Issue' && wfStatus == 'Issued' && assignedInsp  == '') {
	assignedInsp = 'FIERROGUZMAN';
	}

if (appMatch('Building/Residential/Alteration/NA') && wfTask == 'Issue' && wfStatus == 'Issued' && assignedInsp != '') {
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}
`^
COEP_SCHED_CODE_INSP^`
assignedInsp = 'OLIVASMR';
comment('Assigned Inspector is: ' +assignedInsp);
nextInspDate = dateAdd(null,1);
comment('nextInspDate is: ' + nextInspDate);
inspType='1135 Property Clean Up';
if (appMatch('Enforcement/Environmental Complaints/*/*') && wfTask == 'Completeness Check' && wfStatus == 'Transferred') {
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}
`^
COEP_SCHED_ENV_COMP_BYPDREGION^`
assignedInsp = '';
pdRegion = getGISInfo('Accela_map', 'PoliceRegion', 'DISTRICT');
comment('Assigned Inspector is: ' +assignedInsp);
nextInspDate = dateAdd(null,1);
comment('nextInspDate is: ' + nextInspDate);
inspType='1120 Site Inspection';
if (appMatch('Enforcement/Property Maintenance/Housing Safety/NA') && wfTask == 'Receive Complaint' && wfStatus == 'Assigned' && pdRegion == 'WSRC') {
	assignedInsp = 'RAMIREZVM';
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}

if (appMatch('Enforcement/Property Maintenance/Housing Safety/NA') && wfTask == 'Receive Complaint' && wfStatus == 'Assigned' && pdRegion == 'CTCC') {
	assignedInsp = 'CAHALANSM';
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}

if (appMatch('Enforcement/Property Maintenance/Housing Safety/NA') && wfTask == 'Receive Complaint' && wfStatus == 'Assigned' && pdRegion == 'MVRC') {
	assignedInsp = 'SOTODY';
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}

if (appMatch('Enforcement/Environmental Complaints/*/*') && wfTask == 'Receive Complaint' && wfStatus == 'Assigned' && pdRegion == 'MVRC') {
	assignedInsp = 'SOTODY';
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}

if (appMatch('Enforcement/Environmental Complaints/*/*') && wfTask == 'Receive Complaint' && wfStatus == 'Assigned' && pdRegion == 'PHRC' && AInfo['INFORMATION.Primary Category'] != 'Vector') {
	assignedInsp = 'CASTANEDACV1';
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}

if (appMatch('Enforcement/Environmental Complaints/*/*')  && wfTask == 'Receive Complaint' && wfStatus == 'Assigned' && pdRegion == 'NERC' && AInfo['INFORMATION.Primary Category'] != 'Vector') {
	assignedInsp = 'MANUEL.A.MORALES';
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}

if (appMatch('Enforcement/Environmental Complaints/*/*') && wfTask == 'Receive Complaint' && wfStatus == 'Assigned' && pdRegion == 'WSRC' && AInfo['INFORMATION.Primary Category'] != 'Vector') {
	assignedInsp = 'RAMIREZVM';
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}

if (appMatch('Enforcement/Environmental Complaints/*/*') && wfTask == 'Receive Complaint' && wfStatus == 'Assigned' && pdRegion == 'CTCC' && AInfo['INFORMATION.Primary Category'] != 'Vector') {
	assignedInsp = 'CAHALANSM';
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}

if (appMatch('Enforcement/Environmental Complaints/*/*') && wfTask == 'Receive Complaint' && wfStatus == 'Assigned' && AInfo['INFORMATION.Primary Category'] == 'Vector') {
	assignedInsp = 'SOTODY';
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}

if (appMatch('Enforcement/Property Maintenance/Housing Safety/NA') && wfTask == 'Receive Complaint' && wfStatus == 'Assigned' && pdRegion == 'PHRC') {
	assignedInsp = 'CASTANEDACV1';
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}

if (appMatch('Enforcement/Property Maintenance/Housing Safety/NA') && wfTask == 'Receive Complaint' && wfStatus == 'Assigned' && pdRegion == 'NERC') {
	assignedInsp = 'MANUEL.A.MORALES';
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}
`^
COEP_SCHED_ENV_COMP_DISTRIC18^`
assignedInsp = 'GCASTANEDA';
comment('Assigned Inspector is: ' +assignedInsp);
nextInspDate = dateAdd(null,1);
comment('nextInspDate is: ' + nextInspDate);
inspType='1120 Site Inspection';
if (appMatch('Enforcement/Environmental Complaints/*/*') && wfTask == 'Receive Complaint' && wfStatus == 'Assigned') {
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}
`^
COEP_SCHED_ENV_COMP_DISTRIC246^`
assignedInsp = 'MANUEL.A.MORALES';
comment('Assigned Inspector is: ' +assignedInsp);
nextInspDate = dateAdd(null,1);
comment('nextInspDate is: ' + nextInspDate);
inspType='1120 Site Inspection';
if (appMatch('Enforcement/Environmental Complaints/*/*') && wfTask == 'Receive Complaint' && wfStatus == 'Assigned') {
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}
`^
COEP_SCHED_ENV_COMP_DISTRIC357^`
assignedInsp = 'RAMIREZVM';
comment('Assigned Inspector is: ' +assignedInsp);
nextInspDate = dateAdd(null,1);
comment('nextInspDate is: ' + nextInspDate);
inspType='1120 Site Inspection';
if (appMatch('Enforcement/Environmental Complaints/*/*') && wfTask == 'Receive Complaint' && wfStatus == 'Assigned') {
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}
`^
COEP_SCHED_ENV_COMP_SITE_INSP^`
DistrictNum = getGISInfo('Accela_map', 'ESD Inspection Region', 'REGION_NUM');
if (appMatch('Enforcement/Environmental Complaints/NA/NA') && (DistrictNum == 2 || DistrictNum == 4 || DistrictNum == 6)) {
	branch('COEP_SCHED_ENV_COMP_DISTRIC246');
	}

if (appMatch('Enforcement/Environmental Complaints/NA/NA') && (DistrictNum == 1 || DistrictNum == 8)) {
	branch('COEP_SCHED_ENV_COMP_DISTRIC18');
	}

if (appMatch('Enforcement/Environmental Complaints/NA/NA') && (DistrictNum == 3 || DistrictNum == 5 || DistrictNum == 7)) {
	branch('COEP_SCHED_ENV_COMP_DISTRIC357');
	}
`^
COEP_SCHED_ENV_PRPRTY_MAINT_INSP^`
assignedInsp = 'CAHALANSM';
assignedInsp2 = 'GUILLENFX';
comment('Assigned Inspector is: ' +assignedInsp);
nextInspDate = dateAdd(null,1);
comment('nextInspDate is: ' + nextInspDate);
inspType='215 PropertyMain Inspection';
inspType2='410 Fire Inspection';
if (appMatch('Enforcement/Property Maintenance/Housing Safety/NA') && wfTask == 'Receive Complaint' && wfStatus == 'Assigned') {
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}

if (appMatch('Enforcement/Property Maintenance/Housing Safety/NA') && wfTask == 'Receive Complaint' && wfStatus == 'Assigned') {
	scheduleInspectDate(inspType2,nextInspDate,assignedInsp2);
	}
`^
COEP_SCHED_FUTURE_INSP^`
assignedInsp = getLastInspector('215 Property Maint Inspection');
comment('Assigned Inspector is: ' +assignedInsp);
inspType='215 Property Maint Inspection';
if (AInfo['Follow-up Inspection (days)'] == '09') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,10),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '10') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,11),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '11') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,12),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '12') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,13),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '13') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,14),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '14') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,15),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '15') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,16),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '16') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,17),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '17') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,18),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '18') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,19),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '01') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,2),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '19') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,20),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '20') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,21),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '21') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,22),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '22') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,23),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '23') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,24),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '24') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,25),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '25') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,26),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '26') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,27),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '27') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,28),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '28') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,29),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '02') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,3),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '29') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,30),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '30') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,31),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '45') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,46),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '60') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,61),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '03') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,4),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '04') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,5),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '05') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,6),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '06') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,7),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '07') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,8),assignedInsp);
	}

if (AInfo['Follow-up Inspection (days)'] == '08') {
	scheduleInspectDate(inspType,nextInspDate = dateAdd(null,9),assignedInsp);
	}
`^
COEP_SCHED_HOUSESAFETY_INSP^`
assignedInsp = getLastInspector('215 Property Maint Inspection');
comment('Assigned Inspector is: ' +assignedInsp);
nextInspDate = dateAdd(null,1);
comment('nextInspDate is: ' + nextInspDate);
inspType='215 Property Maint Inspection';
if (appMatch('Enforcement/Property Maintenance/Housing Safety/NA') wfTask == 'Complaint Received' && wfStatus == 'Assigned') {
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}

taskUserObj = aa.person.getUser(wfTaskObj.getTaskItem().getAssignedUser().getFirstName(),wfTaskObj.getTaskItem().getAssignedUser().getMiddleName(),wfTaskObj.getTaskItem().getAssignedUser().getLastName()).getOutput();
comment('taskUserObj is ' + taskUserObj.getUserID());
var userId = taskUserObj.getUserID();
comment('userId is' + userId);
if (userId != '') {
	scheduleInspection('215 Property Maint Inspection',0,userId );
	assignTask('Investigation',userId );
	comment(userId);
	}

var cap = aa.cap.getCap(capId).getOutput();
var rec_hour = cap.getAuditDate().getHourOfDay();
if (rec_hour >= 15 || rec_hour <= 6) {
	scheduleInspection ('215 Property Maint Inspection','1',userId);
	assignTask('Investigation',userId );
	comment('hour is' + rec_hour);
	}

if (userId != '' && rec_hour >= 7  && rec_hour < 15) {
	scheduleInspection('215 Property Maint Inspection',0,userId );
	assignTask('Investigation',userId );
	comment('Hour is' + rec_hour);
	}
`^
COEP_SCHED_LICENSE_ANIMAL_INSP^`
assignedInsp = '';
comment('Assigned Inspector is: ' +assignedInsp);
nextInspDate = dateAdd(null,1);
comment('nextInspDate is: ' + nextInspDate);
inspType='1200 Site Inspection';
if (appMatch('Licenses/Animal/*/*') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}
`^
COEP_SCHED_LIC_ALCOHOL_INSP^`
assignedInsp = 'CAHALANSM';
comment('Assigned Inspector is: ' +assignedInsp);
nextInspDate = dateAdd(null,1);
comment('nextInspDate is: ' + nextInspDate);
inspType='1400 Site Inspection';
if (appMatch('Licenses/Alcohol/NA/NA') && wfTask == 'Zoning Review' && wfStatus == 'Passed') {
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}
`^
COEP_SCHED_LIC_ALC_INSP^`
assignedInsp = 'CAHALANSM';
comment('Assigned Inspector is: ' +assignedInsp);
nextInspDate = dateAdd(null,1);
comment('nextInspDate is: ' + nextInspDate);
inspType='1400 Site Inspection';
if (appMatch('Licenses/Alcohol/NA/NA')) {
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}
`^
COEP_SCHED_LIC_INSP^`
assignedInsp = 'SOTODY';
comment('Assigned Inspector is: ' +assignedInsp);
nextInspDate = dateAdd(null,1);
comment('nextInspDate is: ' + nextInspDate);
inspType='1600 Site Inspection';
if ((appMatch('Licenses/Tattoo Body Piercing Employee/NA/NA') || appMatch('Licenses/Swimming Pool and Spa/NA/NA') || appMatch('Licenses/Trailer Court/NA/NA') || appMatch('Licenses/Laundry/NA/NA'))) {
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}
`^
COEP_SERVICEREQUEST_REF_AIR^`
var subject = ('Record ( ' + capIDString + ')  has a ' + AInfo['Refrigerated Air Type'] + ' Refrigeration Air Type');
var bodyText = '  You are requested to retrieve and review the record when a record with New or Conversion Refrigerated Air Type is created.  You can view specific permit data by inserting the record number at this address:  http://aca.elpasotexas.gov/CitizenAccess/  <BR><BR>  If you believe you should not get this email, contact Suzy Santo at santosx@elpasotexas.gov.';
email('Leslie.chagnon@epelectric.com;
Richard.delafuente@epelectric.com', 'accela@elpasotexas.gov', subject, bodyText);
`^
COEP_SERVICE_REQUEST_DISREGARD_EMAIL^`
var subject = 'Test subject';
var bodyText = 'Test message';
if (AInfo['Department of Transportation (City)'] == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-DepartmentofTransportationStreets@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

if (AInfo['Consolidated Tax Office'] == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-ConsolidatedTaxOffice@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

if (AInfo['Convention & Visitors Bureau'] == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-Convention&VisitorsBureau@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

if (AInfo['Sun Metro'] == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-SunMetro@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

if (AInfo['Museums & Cultural Affairs'] == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-Museums&CulturalAffairs@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

if (AInfo['Economic Development'] == 'CHECKED' || AInfo['Planning'] == 'CHECKED'  && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-Planning@elpasotexas.gov;
	AASR-EconomicDevelopment@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

if (AInfo['Human Resources'] == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-HumanResources@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

if (AInfo['Engineering & Construction Management'] == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-Engineering&ConstructionMgmt@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

if (AInfo['International Bridges'] == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-InternationalBridges@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

if (AInfo['Financial Services/OMB/Internal Audit'] == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-FinancialServicesOMBAuditor@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

var subject = ('Regarding request ' + capIDString + '.');
var bodyText = 'Please disregard the Accela email associated with this record. It was sent to you in error. <BR><BR> Thank you.';
if (AInfo['Code Compliance'] == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-CodeCompliance@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

if (AInfo['Library'] == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-Library@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

if (AInfo['ESD Environmental Solid Waste'] == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-EnvironmentalSolidWaste@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

if (AInfo['Police-Central'] == 'CHECKED' || AInfo['Police-Mission Valley'] == 'CHECKED' || AInfo['Police-Northeast'] == 'CHECKED' == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-Police@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

if (AInfo['Zoo'] == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-Zoo@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

if (AInfo['Fire'] == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-Fire@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

if (AInfo['EPWU/Storm Water Utility'] == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('bettisenx@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

if (AInfo['Airport'] == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-Airport@elpasotexas.gov@faneuil.com@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

if (AInfo['Parks'] == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-Parks@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

if (AInfo['City Managers Office'] == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-CityManagersOffice@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

if (AInfo['General Services'] == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-GeneralServices@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

if (AInfo['Community Development'] == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-CommunityDevelopment@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

if (AInfo['Health'] == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-Health@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}

if (AInfo['Municpal Court/Clerk'] == 'CHECKED' && AInfo['Send Disregard Email'] == 'Yes') {
	email('AASR-MunicipalCourt@elpasotexas.gov;
	AASR-MunicipalClerk@elpasotexas.gov','accela@elpasotexas.gov',subject, (bodyText));
	}
`^
COEP_SERVICE_REQUEST_EMAIL^`
var gisArea = getGISInfo('Accela_map','PoliceRegion','DISTRICT');
var complaintType = AInfo['Complaint Type'];
var subject = ('You have been assigned a ( ' + complaintType   + ' ) Service Request.  The record number is ' + capIDString + '.');
var bodyText = '  You are requested to retrieve and process the request quickly.  If you believe you should not get this email, contact 311 Management at AASR-311@elpasotexas.gov.';
showMessage=true;
comment('GIS Area ' + gisArea );
if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Municipal Court/Clerk'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-MunicipalCourt@elpasotexas.gov;
	AASR-MunicipalClerk@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Department of Transportation (City)'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-DepartmentofTransportationStreets@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Consolidated Tax Office'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-ConsolidatedTaxOffice@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Convention & Visitors Bureau'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-Convention&VisitorsBureau@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Sun Metro'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-SunMetro@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Museums & Cultural Affairs'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-Museums&CulturalAffairs@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Planning and Economic Development'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-Planning@elpasotexas.gov;
	AASR-EconomicDevelopment@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Human Resources'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-HumanResources@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Engineering and Construction Management'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-Engineering&ConstructionMgmt@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['International Bridges'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-InternationalBridges@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && matches(AInfo['Complaint Type'], 'ADA Complaint (Accessibility)','Environmental Dept Complaints','Illegal Activities')) {
	subject = ('You have been assigned an ( ' + complaintType   + ' ) Service Request (GovQA).  The record number is ' + capIDString + '.');
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Financial Services/OMB/Internal Audit'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-FinancialServicesOMBAuditor@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Code Compliance'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-CodeCompliance@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Library'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-Library@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['ESD Environmental Solid Waste'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-EnvironmentalSolidWaste@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Police'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-Police@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Zoo'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-Zoo@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Fire'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-Fire@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['IT'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-InformationTechnology@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['EPWU/Storm Water Utility'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('bettisenx@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Complaint Type'] == 'Graffiti' && (gisArea == 'CRCC' || AInfo['Police Region'] == 'CRCC')) {
	editAppSpecific('Police-Central', 'CHECKED');
	email('C1233@elpasotexas.gov;
	C919@elpasotexas.gov','accela@elpasotexas.gov',(subject), (subject +  bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['EPIA'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-Airport@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Complaint Type'] == 'Graffiti' && (gisArea == 'MVRC' || AInfo['GIS DATA.Police Region'] == 'MVRC')) {
	editAppSpecific('ASSIGNMENTS.Police - Mission Valley', 'CHECKED');
	email('C1308@elpasotexas.gov;
	2099@elpasotexas.gov','accela@elpasotexas.gov',(subject), (subject +  bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Complaint Type'] == 'Graffiti' && (gisArea == 'NERC' || AInfo['Police Region'] == 'NERC')) {
	editAppSpecific('Police - Northeast', 'CHECKED');
	email('996@elpasotexas.gov;
	2257@elpasotexas.gov','accela@elpasotexas.gov',(subject), (subject +  bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Complaint Type'] == 'Graffiti' && (gisArea == 'PHRC' || AInfo['GIS DATA.Police Region'] == 'PHRC')) {
	editAppSpecific('ASSIGNMENTS.Police - Pebble Hills', 'CHECKED');
	email('C1427@elpasotexas.gov;
	C1487@elpasotexas.gov','accela@elpasotexas.gov',(subject), (subject +  bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Complaint Type'] == 'Graffiti' && (gisArea =='WSRC' || AInfo['GIS DATA.Police Region'] == 'WSRC')) {
	editAppSpecific('ASSIGNMENTS.Police-Westside', 'CHECKED');
	email('1338@elpasotexas.gov;
	C806@elpasotexas.gov','accela@elpasotexas.gov',(subject), (subject +  bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Complaint Type'] == 'Graffiti' && (gisArea == '' || gisArea == null)) {
	email('C919@elpasotexas.gov;
	','accela@elpasotexas.gov',(subject), (subject +  bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Complaint Type'] == 'Garbage/Billing') {
	email('eisertDA@elpasotexas.gov;
	WilliamsonAA@elpasotexas.gov;
	VegaMI@elpasotexas.gov','accela@elpasotexas.gov',(subject), (subject +  bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Complaint Type'] == 'Garbage/Missed') {
	email('SettleBJ@elpasotexas.gov;
	CamargoCN@elpasotexas.gov','accela@elpasotexas.gov',(subject), (subject +  bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && (AInfo['Complaint Type'] == 'Garbage/Dead Animal Pickup' || AInfo['Complaint Type'] == 'Garbage/Special Pickup/Bulk')) {
	email('hernandezMX@elpasotexas.gov;
	BustamanteLE@elpasotexas.gov;
	WilliamsonAA@elpasotexas.gov','accela@elpasotexas.gov',(subject), (subject +  bodyText));
	}

var da = 'Dead Animal Pickup - Farm Animal Request';
if (AInfo['Farm Animal'] == 'Yes') {
	email('HernandezLX2@elpasotexas.gov;
	yamaguchij@elpasotexas.gov;
	OlivasMR@elpasotexas.gov','accela@elpasotexas.gov',(da), (subject +  bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Parks and Recreation'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-Parks&Recreation@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['City Managers Office'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-CityManagersOffice@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['General Services'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-GeneralServices@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Primary Lead'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('gutierrezma@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Community Development'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-CommunityDevelopment@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Health'] == 'CHECKED' && (AInfo['Information Request Only'] != 'Call Only' || AInfo['Complaint Type'] != 'Information Only')) {
	email('AASR-Health@elpasotexas.gov','accela@elpasotexas.gov',subject, (subject + '<BR>' + bodyText));
	}
`^
COEP_SERVICE_REQUEST_EMAIL_DISTR^`
var pCapIDString = pCapID.getCustomID();
var subject = ('Service Request Child record ' +  capIDString  + ' is now closed.');
var emBody = ('Child Record ID ' + capIDString + ' is now Closed. This record is related to parent record ID ' + pCapIDString + '.');
if (wfTask == 'Close' && (wfStatus == 'Closed' || wfStatus == 'Completed')  && pCapID != false && pASIField == '1') {
	email('District#1@elpasotexas.gov','accela@elpasotexas.gov',subject,emBody);
	}

if (wfTask == 'Close' && (wfStatus == 'Closed' || wfStatus == 'Completed')  && pCapID != false && pASIField == '2') {
	email('District#2@elpasotexas.gov','accela@elpasotexas.gov',subject,emBody);
	}

if (wfTask == 'Close' && (wfStatus == 'Closed' || wfStatus == 'Completed')  && pCapID != false && pASIField == '3') {
	email('District#3@elpasotexas.gov','accela@elpasotexas.gov',subject,emBody);
	}

if (wfTask == 'Close' && (wfStatus == 'Closed' || wfStatus == 'Completed')  && pCapID != false && pASIField == '4') {
	email('District#4@elpasotexas.gov','accela@elpasotexas.gov',subject,emBody);
	}

if (wfTask == 'Close' && (wfStatus == 'Closed' || wfStatus == 'Completed')  && pCapID != false && pASIField == '5') {
	email('District#5@elpasotexas.gov','accela@elpasotexas.gov',subject,emBody);
	}

if (wfTask == 'Close' && (wfStatus == 'Closed' || wfStatus == 'Completed')  && pCapID != false && pASIField == '6') {
	email('District#6@elpasotexas.gov','accela@elpasotexas.gov',subject,emBody);
	}

if (wfTask == 'Close' && (wfStatus == 'Closed' || wfStatus == 'Completed')  && pCapID != false && pASIField == '7') {
	email('District#7@elpasotexas.gov','accela@elpasotexas.gov',subject,emBody);
	}

if (wfTask == 'Close' && (wfStatus == 'Closed' || wfStatus == 'Completed')  && pCapID != false && pASIField == '8') {
	email('District#8@elpasotexas.gov','accela@elpasotexas.gov',subject,emBody);
	}
`^
COEP_SERVICE_REQUEST_GETDISTRICT^`
if (wfTask == 'Close' && (wfStatus == 'Closed' || wfStatus == 'Completed') && pCapID != false) {
	pASIField = getAppSpecific('District',pCapID);
	}

if (wfTask == 'Close' && (wfStatus == 'Closed' || wfStatus == 'Completed') && pCapID != false && pASIField != null) {
	branch('COEP_SERVICE_REQUEST_EMAIL_DISTR');
	}
`^
COEP_SERVICE_REQ_UPDATE_WORKFLOW^`
if (appMatch('ServiceRequest/Service Request/NA/NA') && AInfo['Complaint Type'] == 'Information Only' || AInfo['Information Request Only'] == 'Call Only') {
	updateTask('Request','Closed',' ', ' ');
	deactivateTask('Request');
	updateAppStatus('Closed', 'Status closed by script');
	}

if (appMatch('ServiceRequest/Service Request/NA/NA') && wfTask == 'Request' && (wfStatus == 'Closed' || wfStatus == 'Call Only' || wfStatus == 'Cancelled - Created in Error' || wfStatus == 'Closed w Violations' || wfStatus == 'Closed Duplicate')) {
	updateTask('Close','Closed',' ', ' ');
	deactivateTask('Close');
	updateAppStatus('Closed', 'Status closed by script');
	}
`^
COEP_SIGN_RENEWAL_ADDFEE^`
if (AInfo['Type of License'] == 'Sign Painting Only') {
	addFee('FL085','LICSIGN','STANDARD',numberOfYears,'N');
	}

if (AInfo['Type of License'] == 'On/Off Premise') {
	addFee('FL086','LICSIGN','STANDARD',numberOfYears,'N');
	}

if (AInfo['Type of License'] == 'Inflatable Sign B-3') {
	addFee('FL087','LICSIGN','STANDARD',numberOfYears,'N');
	}

if (AInfo['Type of License'] == 'Inflatable Sign B-4') {
	addFee('FL088','LICSIGN','STANDARD',numberOfYears,'N');
	}
`^
COEP_SUM_TOTAL_PROPERTY_CLEANUP_BILLING^`
totalSum = 0;
tax = .0825;
totalTax = 0;
if (typeof(PROPERTYCLEANUPBILLING) == 'object') {
	for(eachrow in PROPERTYCLEANUPBILLING) branch('COEP_SUM_TOTAL_PROPERTY_CLEANUP_BILLING_LOOP');
	}

if (totalSum > 0) {
	totalTax = Math.round((totalSum * parseFloat(tax))*100)/100;
	}

if (totalSum > 0) {
	editAppSpecific('Clean Up Cost', totalSum);
	editAppSpecific('Clean Up Tax', totalTax);
	}
`^
COEP_SUM_TOTAL_PROPERTY_CLEANUP_BILLING_LOOP^`
totalRow = PROPERTYCLEANUPBILLING[eachrow];
totalSum = totalSum + parseFloat(totalRow['Total']);
`^
COEP_SWIM_RENEWAL_ADDFEE^`
if (numberOfYears == 1) {
	addFee('FL097','LICPOOL','STANDARD',1,'N');
	editAppSpecific('Expiration Date', dateAddMonths(null, 12));
	}

if (numberOfYears == 2) {
	addFee('FL097','LICPOOL','STANDARD',2,'N');
	editAppSpecific('Expiration Date', dateAddMonths(null, 24));
	}
`^
COEP_THIRDPARTY_INSPECTIONS^`
showMessage = true;
if (appMatch('Building/3rd/Residential/New') && (inspType == '800 Final Building Inspection' || inspType == '320 Electrical Final Insp' || inspType == '630 Mechanical Final Insp' || inspType == '740 Plumbing Final Inspection') && checkInspectionResult('800 Final Building Inspection','Pass') && checkInspectionResult('320 Electrical Final Insp','Pass') && checkInspectionResult('630 Mechanical Final Insp','Pass') && checkInspectionResult('740 Plumbing Final Inspection','Pass')) {
	activateTask('Issue Certificate');
	}
`^
COEP_THIRD_PARTY_FEES^`
if (appMatch('Building/3rd/Residential/*') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Company'] == 'Bureau Veritas') {
	addFee('FB500','BLDTHIRD','STANDARD',1,'Y');
	addFee('FB505','BLDTHIRD','STANDARD',1,'Y');
	addFee('FB511','BLDTHIRD','STANDARD',1,'Y');
	}

if (appMatch('Building/3rd/*/*') && wfTask == 'Land Development Review' && wfStatus == 'Passed' && AInfo['Company'] == 'Institute for Bldg & Technology & Safety') {
	addFee('FB521','BLDTHIRD','STANDARD',1,'Y');
	}

if (appMatch('Building/3rd/*/*') && wfTask == 'Zoning Review' && wfStatus == 'Passed' && AInfo['Company'] == 'Institute for Bldg & Technology & Safety') {
	addFee('FB517','BLDTHIRD','STANDARD',1,'Y');
	}

if (appMatch('Building/3rd/*/*') && wfTask == 'Land Development Review' && wfStatus == 'Passed' && AInfo['Company'] == 'Vision' && getDepartmentName(currentUserID) == '3rd Party VCI') {
	addFee('FB522','BLDTHIRD','STANDARD',1,'Y');
	}

if (appMatch('Building/3rd/*/*') && wfTask == 'Zoning Review' && wfStatus == 'Passed' && AInfo['Company'] == 'Vision' && getDepartmentName(currentUserID) == '3rd Party VCI') {
	addFee('FB518','BLDTHIRD','STANDARD',1,'Y');
	}

if (appMatch('Building/3rd/*/*') && wfTask == 'Land Development Review' && wfStatus == 'Passed' && AInfo['Company'] == 'Bureau Veritas' && getDepartmentName(currentUserID) == '3rd Party BV') {
	addFee('FB519','BLDTHIRD','STANDARD',1,'Y');
	}

if (appMatch('Building/3rd/Residential/*') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Company'] == 'CCI') {
	addFee('FB502','BLDTHIRD','STANDARD',1,'Y');
	addFee('FB507','BLDTHIRD','STANDARD',1,'Y');
	addFee('FB510','BLDTHIRD','STANDARD',1,'Y');
	}

if (appMatch('Building/3rd/Residential/*') && !appMatch('Building/3rd/Residential/Swimming Pool')  && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Company'] == 'Vision') {
	addFee('FB501','BLDTHIRD','STANDARD',1,'Y');
	addFee('FB504','BLDTHIRD','STANDARD',1,'Y');
	addFee('FB509','BLDTHIRD','STANDARD',1,'Y');
	}

if (appMatch('Building/3rd/Residential/*') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Company'] == 'ECM') {
	addFee('FB503','BLDTHIRD','STANDARD',1,'Y');
	addFee('FB506','BLDTHIRD','STANDARD',1,'Y');
	addFee('FB514','BLDTHIRD','STANDARD',1,'Y');
	}

if (appMatch('Building/3rd/Residential/*') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Company'] == 'Institute for Bldg & Technology & Safety') {
	addFee('FB512','BLDTHIRD','STANDARD',1,'Y');
	addFee('FB513','BLDTHIRD','STANDARD',1,'Y');
	addFee('FB508','BLDTHIRD','STANDARD',1,'Y');
	}

if (appMatch('Building/3rd/Residential/Swimming Pool')  && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Company'] == 'Vision') {
	addFee('FTP003','BLDTHIRD','STANDARD',1,'Y');
	}

if (appMatch('Building/3rd/*/*') && wfTask == 'Zoning Review' && wfStatus == 'Passed' && AInfo['Company'] == 'Bureau Veritas' && getDepartmentName(currentUserID) == '3rd Part BV') {
	addFee('FB515','BLDTHIRD','STANDARD',1,'Y');
	}

if (appMatch('Building/3rd/*/*') && wfTask == 'Land Development Review' && wfStatus == 'Passed' && AInfo['Company'] == 'ECM' && getDepartmentName(currentUserID) == '3rd Party ECM') {
	addFee('FB520','BLDTHIRD','STANDARD',1,'Y');
	}

if (appMatch('Building/3rd/*/*') && wfTask == 'Zoning Review' && wfStatus == 'Passed' && AInfo['Company'] == 'ECM' && getDepartmentName(currentUserID) == '3rd Party ECM') {
	addFee('FB516','BLDTHIRD','STANDARD',1,'Y');
	}
`^
COEP_UPDATE_LICENSE_ANIMAL_WFTASK^`
updateTask('Inspection','Passed',' ',' ');
deactivateTask('Inspection');
closeTask('Close','Closed','Closed by Script after passing 755 CHP Inspection',' ');
updateAppStatus('Closed','Status set by batch script');
`^
CTRCA;Building!Commercial!Addition!NA^`
if (currentUserID.indexOf('PUBLICUSER') >= -1) {
	email('delacruzja@elpasotexas.gov;
	ChaviraD1@elpasotexas.gov;
	LamasMX@elpasotexas.gov','accela@elpasotexas.gov','A new Commercial Addition Permit is submitted online, permit number is ' + capIDString + '.','A new Commercial Addition Permit is submitted online, permit number is ' + capIDString + '.');
	}

if (currentUserID.indexOf('PUBLICUSER') >= -1 && AInfo['ADA Improvements only'] == 'Yes') {
	sender = 'accela@elpasotexas.gov';
	theRecipient = 'estalajo@elpasotexas.gov;
	morrison-vegavx@elpasotexas.gov;
	delacruzja@elpasotexas.gov';
	subject = ('ADA Record Number: ' + capIDString);
	content = ('The ADA Record Number ' + capIDString + ' has been submitted');
	email(theRecipient, sender, subject, content);
	}
`^
CTRCA;Building!Commercial!Completion!NA^`
if (currentUserID.indexOf('PUBLICUSER') >= -1) {
	email('delacruzja@elpasotexas.gov;
	ChaviraD1@elpasotexas.gov;
	LamasMX@elpasotexas.gov','accela@elpasotexas.gov','A new Commercial Completion Permit is submitted online, permit number is ' + capIDString + '.','A new Commercial Completion Permit is submitted online, permit number is ' + capIDString + '.');
	}

if (currentUserID.indexOf('PUBLICUSER') >= -1 && AInfo['ADA Improvements only'] == 'Yes') {
	sender = 'accela@elpasotexas.gov';
	theRecipient = 'estalajo@elpasotexas.gov;
	morrison-vegavx@elpasotexas.gov;
	delacruzja@elpasotexas.gov';
	subject = ('ADA Record Number: ' + capIDString);
	content = ('The ADA Record Number ' + capIDString + ' has been submitted');
	email(theRecipient, sender, subject, content);
	}
`^
CTRCA;Building!Commercial!New!NA^`
if (currentUserID.indexOf('PUBLICUSER') >= -1) {
	email('delacruzja@elpasotexas.gov;
	ChaviraD1@elpasotexas.gov;
	LamasMX@elpasotexas.gov','accela@elpasotexas.gov','A new Commercial New Permit is submitted online, permit number is ' + capIDString + '.','A new Commercial New Permit is submitted online, permit number is ' + capIDString + '.');
	}
`^
CTRCA;Building!Commercial!Shell!NA^`
if (currentUserID.indexOf('PUBLICUSER') >= -1) {
	email('delacruzja@elpasotexas.gov;
	ChaviraD1@elpasotexas.gov;
	LamasMX@elpasotexas.gov','accela@elpasotexas.gov','A new Commercial Shell Permit is submitted online, permit number is ' + capIDString + '.','A new Commercial Shell Permit is submitted online, permit number is ' + capIDString + '.');
	}

if (currentUserID.indexOf('PUBLICUSER') >= -1 && AInfo['ADA Improvements only'] == 'Yes') {
	sender = 'accela@elpasotexas.gov';
	theRecipient = 'estalajo@elpasotexas.gov;
	morrison-vegavx@elpasotexas.gov;
	delacruzja@elpasotexas.gov';
	subject = ('ADA Record Number: ' + capIDString);
	content = ('The ADA Record Number ' + capIDString + ' has been submitted');
	email(theRecipient, sender, subject, content);
	}
`^
CTRCA;Building!Commercial!Tenant Improvement!NA^`
if (currentUserID.indexOf('PUBLICUSER') >= -1) {
	email('delacruzja@elpasotexas.gov;
	ChaviraD1@elpasotexas.gov;
	LamasMX@elpasotexas.gov','accela@elpasotexas.gov','A new Commercial Tenant Improvement Permit is submitted online, permit number is ' + capIDString + '.','A new Commercial Tenant Improvement Permit is submitted online, permit number is ' + capIDString + '.');
	}

if (currentUserID.indexOf('PUBLICUSER') >= -1 && AInfo['ADA Improvements only'] == 'Yes') {
	sender = 'accela@elpasotexas.gov';
	theRecipient = 'estalajo@elpasotexas.gov;
	morrison-vegavx@elpasotexas.gov;
	delacruzja@elpasotexas.gov';
	subject = ('ADA Record Number: ' + capIDString);
	content = ('The ADA Record Number ' + capIDString + ' has been submitted');
	email(theRecipient, sender, subject, content);
	}
`^
CTRCA;Building!Electrical!NA!NA^`
addParent('BRNN14-00004');
if (currentUserID.indexOf('PUBLICUSER') >= -1) {
	email('AA-ElectricalPermit@elpasotexas.gov;
	gutierrezma@elpasotexas.gov','accela@elpasotexas.gov','A new Electrical Permit is submitted online, permit number is ' + capIDString + '.','A new Electrical Permit is submitted online, permit number is ' + capIDString + '.');
	}

if (currentUserID.indexOf('PUBLICUSER') >= -1) {
	branch('ES_BUILDING_FEES');
	}

if (currentUserID.indexOf('PUBLICUSER') >= -1  && AInfo['Type of Work'] == 'Elec Permit A') {
	updateFee('FB050','BLDGELEC', 'STANDARD',estValue,'N','N');
	}

if (currentUserID.indexOf('PUBLICUSER') >= -1  && AInfo['Type of Work'] == 'Elec Permit B') {
	branch('ES_BLDGELEC_ADDFEES');
	}

if (publicUser && AInfo['Building Permit Number'] != null) {
	addParent(AInfo['Building Permit Number']);
	}

if (publicUser) {
	branch('ACA_ISSUE_BLDG_PERMITS');
	}
`^
CTRCA;Building!Fences!NA!NA^`
if (currentUserID.indexOf('PUBLICUSER') >= -1) {
	email('AA-FencePermit@elpasotexas.gov;
	ledezmaja@elpasotexas.gov;
	gutierrezma@elpasotexas.gov','accela@elpasotexas.gov','A new Fence Permit is submitted online, permit number is ' + capIDString + '.','A new Fence Permit is submitted online, permit number is ' + capIDString + '.');
	}
`^
CTRCA;Building!Mechanical!NA!NA^`
if (currentUserID.indexOf('PUBLICUSER') >= -1) {
	email('delacruzja@elpasotexas.gov;
	ChaviraD1@elpasotexas.gov;
	LamasMX@elpasotexas.gov','accela@elpasotexas.gov','A new Mechanical New Permit is submitted online, permit number is ' + capIDString + '.','A new Mechanical Permit is submitted online, permit number is ' + capIDString + '.');
	}

if (publicUser && AInfo['Building Permit Number'] != null) {
	addParent(AInfo['Building Permit Number']);
	}

if (publicUser) {
	branch('ACA_ISSUE_BLDG_PERMITS');
	}
`^
CTRCA;Building!Plumbing!NA!NA^`
if (publicUser && AInfo['Building Permit Number'] != null) {
	addParent(AInfo['Building Permit Number']);
	}

if (publicUser) {
	branch('ACA_ISSUE_BLDG_PERMITS');
	}
`^
CTRCA;Building!Reroof!NA!NA^`
if (currentUserID.indexOf('PUBLICUSER') >= -1  && AInfo['Homeowner']=='Yes') {
	email('AA-ReroofPermit@elpasotexas.gov;
	gutierrezma@elpasotexas.gov','accela@elpasotexas.gov','A new Reroof Permit is submitted online, permit number is ' + capIDString + '.','A new Reroof Permit is submitted online, permit number is ' + capIDString + '.');
	}

if (publicUser) {
	branch('ACA_ISSUE_BLDG_PERMITS');
	}
`^
CTRCA;Building!Residential!~!~^`
capIdString = capId.getCustomID();
capContactResult = aa.people.getCapContactByCapID(capId);
conArray= capContactResult.getOutput();
for(y in conArray) branch('ACA_ASA_EMAIL_APPLICANT');
email('DeLaCruzJA@elpasotexas.gov;
ChaviraD1@elpasotexas.gov;
LamasMX@elpasotexas.gov', 'accela@elpasotexas.gov', appTypeArray[1] + ' ' + appTypeArray[2] + ' Submitted - ' + capIDString, 'Attention, <BR> <BR> Record ID <b>' + capIDString + '</b> has been submitted through ACA. <BR><BR> Group: <b>' + appTypeArray[0] + '</b><BR> Type: <b>' + appTypeArray[1] + '</b><BR> Subtype: <b>' + appTypeArray[2] + '</b><BR> Category: <b>'  + appTypeArray[3] + '</b>');
`^
CTRCA;Building!Siding!NA!NA^`
if (currentUserID.indexOf('PUBLICUSER') >= -1) {
	email('AA-SidingPermit@elpasotexas.gov;
	gutierrezma@elpasotexas.gov','accela@elpasotexas.gov','A new Siding Permit is submitted online, permit number is ' + capIDString + '.','A new Siding Permit is submitted online, permit number is ' + capIDString + '.');
	}

if (publicUser) {
	branch('ACA_ISSUE_BLDG_PERMITS');
	}
`^
CTRCA;Building!Windows!NA!NA^`
if (currentUserID.indexOf('PUBLICUSER') >= -1 && AInfo['Homeowner'] == 'Yes') {
	email('AA-WindowsPermit@elpasotexas.gov;
	gutierrezma@elpasotexas.gov','accela@elpasotexas.gov','A new Windows Permit is submitted online, permit number is ' + capIDString + '.','A new Windows Permit is submitted online, permit number is ' + capIDString + '.');
	}

if (publicUser) {
	branch('ACA_ISSUE_BLDG_PERMITS');
	}
`^
CTRCA;EPDOT!Traffic Control Plans!NA!NA^`
branch('ES_EPDOT_ACA_EMAIL_NOTIFICATION');
`^
CTRCA;Licenses!Renewal!DowntownResidentialParking!NA^`
branch('ES_SECURITY_ALARM_ACA_EMAIL_NOTIFICATION');
`^
CTRCA;Licenses!Renewal!Residential Parking!NA^`
branch('ES_SECURITY_ALARM_ACA_EMAIL_NOTIFICATION');
`^
CTRCA;Planning!Long Range!Building Scale Plan!Final^`
if (currentUserID.indexOf('PUBLICUSER') >= -1) {
	email('CoronadoDA@elpasotexas.gov;
	PlourdeHT@elpasotexas.gov;
	gutierrezma@elpasotexas.gov','accela@elpasotexas.gov','A new Building Scale Plan(Final) Application is submitted online, permit number is ' + capIDString + '.','A new Building Scale Plan(Final) Application is submitted online, Application number is ' + capIDString + '.');
	}
`^
CTRCA;Planning!Long Range!Building Scale Plan!Preliminary^`
if (currentUserID.indexOf('PUBLICUSER') >= -1) {
	email('CoronadoDA@elpasotexas.gov;
	PlourdeHT@elpasotexas.gov;
	gutierrezma@elpasotexas.gov','accela@elpasotexas.gov','A new Building Scale Plan(Preliminary) Application is submitted online, permit number is ' + capIDString + '.','A new Building Scale Plan(Preliminary) Application is submitted online, Application number is ' + capIDString + '.');
	}
`^
CTRCA;Planning!Subdivision!Five Day Review!NA^`
if (publicUser) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_PLANNING_APP_SUBMITTED_ACA_EMAIL');
	}
`^
CTRCA;Planning!Subdivision!Plat Determination!NA^`
if (publicUser) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_PLANNING_APP_SUBMITTED_ACA_EMAIL');
	}
`^
CTRCA;Planning!Subdivision!Subdivision!~^`
if (publicUser) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_PLANNING_APP_SUBMITTED_ACA_EMAIL');
	}
`^
CTRCA;Planning!Subdivision!Subdivision!Combo^`
if (publicUser) {
	email('AustinAJ@elpasotexas.gov;
	MartinezAR@elpasotexas.gov;
	OrtizNX@elpasotexas.gov','accela@elpasotexas.gov','A new Combination Subdivision Application has been submitted online, application number is ' + capIDString + '.','A new Combination Subdivision Application has been submitted online, application number is ' + capIDString + '.');
	}
`^
CTRCA;Planning!Subdivision!Subdivision!Final^`
if (publicUser) {
	email('AustinAJ@elpasotexas.gov;
	MartinezAR@elpasotexas.gov;
	OrtizNX@elpasotexas.gov','accela@elpasotexas.gov','A new Final Subdivision Application has been submitted online, application number is ' + capIDString + '.','A new Final Subdivision Application has been submitted online, application number is ' + capIDString + '.');
	}
`^
CTRCA;Planning!Subdivision!Subdivision!Preliminary^`
if (publicUser) {
	email('AustinAJ@elpasotexas.gov;
	MartinezAR@elpasotexas.gov;
	OrtizNX@elpasotexas.gov','accela@elpasotexas.gov','A new Preliminary Subdivision Application has been submitted online, application number is ' + capIDString + '.','A new Preliminary Subdivision Application has been submitted online, application number is ' + capIDString + '.');
	}
`^
CTRCA;Planning!Zoning!Condition Amend or Release!NA^`
if (publicUser) {
	email('chavezj1@elpasotexas.gov;
	mcelroyms@elpasotexas.gov;
	rubioax@elpasotexas.gov;
	AA-ZoningSection@elpasotexas.gov', 'accela@elpasotexas.gov',' ' + ' ' + 'A new Zoning Permit is submitted online, permit number is ' + capIDString + '.',' A new Zoning Permit is submitted online, permit number is ' + capIDString + '.');
	}

if (publicUser && !matches(AInfo['Zoning Dist'], 'G-MU General Mixed Use','R-MU Residential Mixed Use','I-MU Industrial Mixed Use')) {
	branch('ES_PLANNING_AMENDMNT_ACA_ADD_FEES');
	}
`^
CTRCA;Planning!Zoning!Detailed Site Plan!NA^`
if (currentUserID.indexOf('PUBLICUSER') >= -1) {
	email('chavezj1@elpasotexas.gov;
	mcelroyms@elpasotexas.gov;
	RubioAX@elpasotexas.gov;
	AA-ZoningSection@elpasotexas.gov', 'accela@elpasotexas.gov','' + '' + 'A new Zoning Detail Site Permit is submitted online, permit number is ' + capIDString + '.','A new Zoning Detail Site Permit was submitted online, permit number is ' + capIDString + '.');
	}

if (publicUser && !matches(AInfo['Zoning Dist'], 'G-MU General Mixed Use','R-MU Residential Mixed Use','I-MU Industrial Mixed Use')) {
	branch('ES_PLANNING_DETSITEP_ACA_ADD_FEES');
	}
`^
CTRCA;Planning!Zoning!Rezoning!NA^`
if (currentUserID.indexOf('PUBLICUSER') >= -1) {
	email('chavezj1@elpasotexas.gov;
	AA-ZoningSection@elpasotexas.gov', 'accela@elpasotexas.gov','A new Rezoning Permit is submitted online, permit number is ' + capIDString + '.','A new Rezoning Permit is submitted online, permit number is ' + capIDString + '.');
	}

if (publicUser && !matches(AInfo['Zoning Dist'], 'G-MU General Mixed Use','R-MU Residential Mixed Use','I-MU Industrial Mixed Use')) {
	branch('ES_PLANNING_REZONING_ACA_ADD_FEES');
	}
`^
CTRCA;Planning!Zoning!Special Permit!NA^`
if (currentUserID.indexOf('PUBLICUSER') >= -1) {
	email('chavezj1@elpasotexas.gov;
	mcelroyms@elpasotexas.gov;
	AA-ZoningSection@elpasotexas.gov', 'accela@elpasotexas.gov',' ' + ' ' + 'TEST A new Rezoning Permit is submitted online, permit number is ' + capIDString + '.','A new Rezoning Permit is submitted online, permit number is ' + capIDString + '.');
	}

if (publicUser && !matches(AInfo['Zoning Dist'], 'G-MU General Mixed Use','R-MU Residential Mixed Use','I-MU Industrial Mixed Use')) {
	branch('ES_PLANNING_SPECIALP_ACA_ADD_FEES');
	}
`^
CommunicationReceivingEmailAfter^`
showDebug=3;
associateMessagesToRecords(messages);
`^
ConvertToRealCAPAfter^`
branch('ES_MOVE_WORKDESC_SHORTNOTES');
branch('CTRCA:' + appTypeArray[0] + '/' + appTypeArray[1] + '/' + appTypeArray[2] + '/*');
branch('CTRCA:' + appTypeArray[0] + '/' + appTypeArray[1] + '/*/' + appTypeArray[3] );
branch('CTRCA:' + appTypeArray[0] + '/*/*/' + appTypeArray[3] );
branch('CTRCA:' + appTypeString );
branch('ES_ACA_WORKFLOWS');
if (appMatch('Animal/License/Renewal/NA')) {
	branch('ES_Animal_Renewal_Add_Fee');
	}

if (publicUser && appMatch('Licenses/Renewal/Security Alarm/*')) {
	branch('ES_SECURITY_ALARM_ACA_EMAIL_NOTIFICATION');
	}

if (publicUser  && appMatch('Planning/*/*/*')) {
	branch('ES_PLANNING_ACA_EMAIL_NOTIFICATION');
	}

if (publicUser  && appMatch('Building/*/*/*')) {
	branch('ES_BUILDING_ACA_EMAIL_NOTIFICATION');
	}

if (publicUser && appMatch('EPDOT/*/*/*')) {
	branch('ES_EPDOT_ACA_EMAIL_NOTIFICATION');
	}

branch('CTRCA:' + appTypeArray[0] + '/*/*/*');
branch('CTRCA:' + appTypeArray[0] + '/' + appTypeArray[1] + '/*/*');
`^
DEPARTMENT_GENERATEDBY^`
editAppSpecific('Department',getDepartmentName(currentUserID));
`^
DRUA;Building!~!~!~^`
logDebug('Plan Review Status = ' + status);
logDebug('Call function updatePlanReviewWorkflow');
assignedToUser = getAssignedToStaff(capId);
var user = aa.person.getUser(assignedToUser);
userEmail = undefined;
userFirst = undefined;
userLast = undefined;
userPhoneNumber = undefined;
updatedTaskReview = undefined;
if (user.getSuccess()) {
	user = user.getOutput();
	userEmail= user.getEmail();
	userFirst = user.getFirstName();
	userLast = user.getLastName();
	userPhoneNumber = user.getPhoneNumber();
	caseManager =  ('Case Manager is:' + '<BR>'+ userFirst + ' ' + userLast + '<BR>' + userEmail + '<BR>' + userPhoneNumber);
	updatedTaskReview = (taskReviewComments +'<BR>'+ caseManager);
	showMessage=true;
	comment(userFirst + ' ' + userLast + ' ' + userEmail );
	}

updatePlanReviewWorkflow(taskName,status,updatedTaskReview,'W');
`^
DRUA;Planning!~!~!~^`
logDebug('Plan Review Status = ' + status);
logDebug('Call function updatePlanReviewWorkflow');
assignedToUser = getAssignedToStaff(capId);
var user = aa.person.getUser(assignedToUser);
userEmail = undefined;
userFirst = undefined;
userLast = undefined;
userPhoneNumber = undefined;
updatedTaskReview = undefined;
if (user.getSuccess()) {
	user = user.getOutput();
	userEmail= user.getEmail();
	userFirst = user.getFirstName();
	userLast = user.getLastName();
	userPhoneNumber = user.getPhoneNumber();
	caseManager =  ('Case Manager is:' + '<BR>'+ userFirst + ' ' + userLast + '<BR>' + userEmail + '<BR>' + userPhoneNumber);
	updatedTaskReview = (taskReviewComments +'<BR>'+ caseManager);
	showMessage=true;
	comment(userFirst + ' ' + userLast + ' ' + userEmail );
	}

updatePlanReviewWorkflow(taskName,status,updatedTaskReview,'W');
`^
DUA;Building!~!~!~^`
if (getDocOperation(documentModelArray) == 'CHECK_IN') {
	documentModelArray.get(0).setRecStatus('A');
	documentModelArray.get(0).setSource(getVendor(documentModelArray.get(0).getSource(),documentModelArray.get(0).getSourceName()));
	documentModelArray.get(0).setDocStatus('Markup Complete');
	aa.document.updateDocument(documentModelArray.get(0));
	}

if (currentUserID.indexOf('PUBLICUSER') > -1) {
	branch('ES_NEWDOCUMENT_CASE_NOTIFICATION');
	}
`^
DUA;Building!Commercial!Addition!NA^`
branch('BRANCH_DUA_EDR_HANDLE_CHECK_IN');
if (currentUserID.indexOf('PUBLICUSER') > -1) {
	branch('ES_NEWDOCUMENT_CASE_NOTIFICATION');
	updateAppStatus('Pending Review', 'Updated by Script');
	}

if (publicUser) {
	branch('ES_NEWDOCUMENT_CASE_NOTIFICATION');
	updateAppStatus('Pending Review', 'Updated by Script');
	}
`^
DUA;Building!Commercial!Completion!NA^`
branch('BRANCH_DUA_EDR_HANDLE_CHECK_IN');
if (currentUserID.indexOf('PUBLICUSER') > -1) {
	branch('ES_NEWDOCUMENT_CASE_NOTIFICATION');
	updateAppStatus('Pending Review', 'Updated by Script');
	}

if (publicUser) {
	branch('ES_NEWDOCUMENT_CASE_NOTIFICATION');
	updateAppStatus('Pending Review', 'Updated by Script');
	}
`^
DUA;Building!Commercial!New!~^`
branch('BRANCH_DUA_EDR_HANDLE_CHECK_IN');
if (publicUser) {
	branch('ES_NEWDOCUMENT_CASE_NOTIFICATION');
	updateAppStatus('Pending Review', 'Updated by Script');
	}
`^
DUA;Building!Commercial!Shell!NA^`
branch('BRANCH_DUA_EDR_HANDLE_CHECK_IN');
if (currentUserID.indexOf('PUBLICUSER') > -1) {
	branch('ES_NEWDOCUMENT_CASE_NOTIFICATION');
	updateAppStatus('Pending Review', 'Updated by Script');
	}

if (publicUser) {
	branch('ES_NEWDOCUMENT_CASE_NOTIFICATION');
	updateAppStatus('Pending Review', 'Updated by Script');
	}
`^
DUA;Building!Commercial!Tenant Improvement!NA^`
branch('BRANCH_DUA_EDR_HANDLE_CHECK_IN');
if (currentUserID.indexOf('PUBLICUSER') > -1) {
	branch('ES_NEWDOCUMENT_CASE_NOTIFICATION');
	updateAppStatus('Pending Review', 'Updated by Script');
	}

if (publicUser) {
	branch('ES_NEWDOCUMENT_CASE_NOTIFICATION');
	updateAppStatus('Pending Review', 'Updated by Script');
	}
`^
DUA;Building!Fences!NA!NA^`
branch('BRANCH_DUA_EDR_HANDLE_CHECK_IN');
if (publicUser) {
	branch('ES_NEWDOCUMENT_CASE_NOTIFICATION');
	updateAppStatus('Pending Review', 'Updated by Script');
	}
`^
DUA;Building!Residential!~!~^`
branch('BRANCH_DUA_EDR_HANDLE_CHECK_IN');
if (publicUser) {
	branch('ES_NEWDOCUMENT_CASE_NOTIFICATION');
	updateAppStatus('Pending Review', 'Updated by Script');
	}
`^
DUA;Planning!~!~!~^`
if (getDocOperation(documentModelArray) == 'CHECK_IN') {
	documentModelArray.get(0).setRecStatus('A');
	documentModelArray.get(0).setSource(getVendor(documentModelArray.get(0).getSource(),documentModelArray.get(0).getSourceName()));
	documentModelArray.get(0).setDocStatus('Markup Complete');
	aa.document.updateDocument(documentModelArray.get(0));
	}

branch('ES_NEWDOCUMENT_CASE_NOTIFICATION');
`^
DUA;Planning!Long Range!Building Scale Plan!~^`
branch('BRANCH_DUA_EDR_HANDLE_CHECK_IN');
branch('ES_NEWDOCUMENT_CASE_NOTIFICATION');
updateAppStatus('Pending Review', 'Updated by Script');
`^
DUB;Building!~!~!~^`
if (currentUserID.indexOf('PUBLICUSER') >= -1 && capStatus == 'In Review') {
	showMessage = true;
	comment('<b>You cannot upload documents while your application status is In Review.</b>');
	cancel = true;
	}
`^
DUB;Planning!~!~!~^`
if (publicUser && capStatus == 'In Review') {
	showMessage = true;
	comment('<b>You cannot upload documents while your application status is In Review.</b>');
	cancel = true;
	}
`^
DocumentReviewUpdateAfter^`
branch('EMSE:GlobalFlags');
showDebug = 3;
showMessage=true;
logDebug('Inside DocReviewUpdateAfter Event');
if (matches(currentUserID, 'VONSCHOECHRF') || enablePublicUserACADebug == true) showDebug = 3;
if (appMatch('Planning/*/*/*') && (status != '' && status != null)) {
	branch('DRUA:Planning/*/*/*');
	}

if (appMatch('Building/*/*/*') && (status != '' && status != null)) {
	branch('DRUA:Building/*/*/*');
	}
`^
DocumentUploadAfter^`
showDebug = false;
showMessage = false;
if(matches(currentUserID, 'VONSCHOECHRF','GUTIERREZMA')) showDebug = true;
logDebug('Inside DocumentUploadAfter.  Doc Operation = ' + getDocOperation(documentModelArray));
branch('DUA:' + appTypeArray[0] + '/' + appTypeArray[1] + '/*/*');
branch('DUA:' + appTypeArray[0] + '/' + appTypeArray[1] + '/' + appTypeArray[2] +'/*');
branch('DUA:' + appTypeArray[0] + '/' + appTypeArray[1] + '/*/' + appTypeArray[3]);
branch('DUA:' + appTypeArray[0] + '/*/*/' + appTypeArray[3]);
branch('DUA:' + appTypeString);
if (documentModelArray.get(0).getDocGroup() == 'PLANNING') {
	aa.debug('DUA', 'Doc Group was PLANNING');
	capIDs = documentModelArray.get(0).getCapID();
	sca = String(capIDs).split('-');
	capId = aa.cap.getCapID(sca[0],sca[1],sca[2]).getOutput();
	capIDString = capId.getCustomID();
	logDebug('branch to DUA:Planning/*/*/*');
	branch('DUA:Planning/*/*/*');
	}

if (documentModelArray.get(0).getDocGroup() == 'BUILDING') {
	aa.debug('DUA', 'Doc Group was BUILDING');
	capIDs = documentModelArray.get(0).getCapID();
	sca = String(capIDs).split('-');
	capId = aa.cap.getCapID(sca[0],sca[1],sca[2]).getOutput();
	capIDString = capId.getCustomID();
	logDebug('branch to DUA:Building/*/*/*');
	branch('DUA:Building/*/*/*');
	}

if ((documentModelArray.get(0).getDocGroup() == 'BUILDING' || documentModelArray.get(0).getDocGroup() == 'PLANNING')) {
	branch('ES_NEWDOCUMENT_CASE_NOTIFICATION');
	logDebug('branch to ES_NEWDOCUMENT_CASE_NOTIFICATION');
	branch('ES_NEWDOCUMENT_CASE_NOTIFICATION');
	}

if (currentUserID.indexOf('PUBLICUSER') > -1) {
	branch('ES_NEWDOCUMENT_CASE_NOTIFICATION');
	}

branch('DUA:' + appTypeArray[0] + '/*/*/*');
`^
DocumentUploadBefore^`
showDebug = true;
showMessage = true;
if(matches(currentUserID, 'GUTIERREZMA')) showDebug = true;
if (appMatch('Building/*/*/*')) {
	branch('DUB:Building/*/*/*');
	}
`^
EMSE;GlobalFlags^`
if (appTypeArray[0] == 'Planning') {
	requiredReviewsStdChoice = 'PLAN REVIEW - REQUIRED REVIEWS';
	getPrimaryAddressLineParam4Notification(params);
	getPrimaryOwnerParams4Notification(params);
	}

if (appTypeArray[0] == 'Building') {
	requiredReviewsStdChoice = 'PLAN REVIEW - REQUIRED REVIEWS';
	docTypesStdChoice = 'PLAN REVIEW - DOCUMENT TYPES';
	dueDateStdChoice = 'PLAN REVIEW - REVIEW TASK DUE DATES';
	docReviewStatusStdChoice = 'Plan Review Document Review Status - Building';
	docStatusStdChoice = 'Plan Review Document Status - General';
	params = aa.util.newHashtable();
	acaUrl = 'https://acitdev/citizenaccessdev';
	getRecordParams4Notification(params);
	getACARecordParam4Notification(params,acaUrl);
	docTypesStdChoice = 'PLAN REVIEW - DOCUMENT TYPES';
	getContactParams4Notification(params,'Applicant');
	getPrimaryAddressLineParam4Notification(params);
	getPrimaryOwnerParams4Notification(params);
	}

enablePublicUserACADebug = 3;
if(currentUserID.indexOf('PUBLICUSER') > -1) enablePublicUserACADebug = 3;
dueDateStdChoice = 'PLAN REVIEW - REVIEW TASK DUE DATES';
docReviewStatusStdChoice = 'Plan Review Document Review Status - Planning';
docStatusStdChoice = 'Plan Review Document Status - General';
params = aa.util.newHashtable();
acaUrl = 'https://acitdev/citizenaccessdev';
getRecordParams4Notification(params);
getACARecordParam4Notification(params,acaUrl);
getContactParams4Notification(params,'Applicant');
`^
EMSE_WTUA_Animal^`
if (appMatch('Animal/Complaint/NA/NA') && wfTask=='Assessment' && wfStatus=='Impound') {
	var newChild=createChild('Animal','Animal','NA','NA','');
	updateTask('Submittal','Complete','Updated via EMSE Script','Updated via EMSE Script','', newChild);
	copyAppSpecific(newChild);
	}
`^
ENF_FIRECODECOMPLIANCE_getGIS_DATA^`
var gisData = getGISInfo('Accela_map', 'Vacant Building Enforcement Area', 'Subarea');
var isDowntown = gisData.substr(0,8);
var isLowerDyer = gisData.substr(0,5);
if (isDowntown == 'Downtown') {
	editAppSpecific('18.40 Downtown', getGISInfo('Accela_map', 'Vacant Building Enforcement Area', 'Subarea'));
	}

if (isLowerDyer == 'Lower') {
	editAppSpecific('18.40 Northeast', getGISInfo('Accela_map', 'Vacant Building Enforcement Area', 'Subarea'));
	}
`^
ENF_PROPERTYMAIN_HOUSINGSAFETY_Add_Violation^`
var violation = AInfo['Type of Violation'];
editAppName(violation);
`^
ENF_PROPERTYMAIN_HOUSINGSAFETY_getGIS_DATA^`
var gisData = getGISInfo('Accela_map', 'Vacant Building Enforcement Area', 'Subarea');
var isDowntown = gisData.substr(0,8);
var isLowerDyer = gisData.substr(0,5);
if (isDowntown == 'Downtown') {
	editAppSpecific('18.40 Downtown', getGISInfo('Accela_map', 'Vacant Building Enforcement Area', 'Subarea'));
	}

if (isLowerDyer == 'Lower') {
	editAppSpecific('18.40 Northeast', getGISInfo('Accela_map', 'Vacant Building Enforcement Area', 'Subarea'));
	}
`^
ES_ACA_ADD_LIC_CREDITFEE^`
if (appMatch('Licenses/Security Alarm/*/*')) {
	updateFee('CCACA','LICSECALM','STANDARD',1,'Y');
	}

if (appMatch('Licenses/Renewal/Security Alarm/*')) {
	updateFee('CCACA','RENEWALLICSECALM','STANDARD',1,'Y');
	}
`^
ES_ACA_EMAIL_APPLICANTS^`
conType = conArray[y].getPeople().contactType;
emailAddr = conArray[y].getPeople().email;
lastName= conArray[y].getPeople().lastName;
firstName= conArray[y].getPeople().firstName;
middleName= conArray[y].getPeople().middleName;
if (emailAddr != undefined && conType =='Applicant') {
	email(emailAddr, 'accela@accela.com', 'ACA APPLICANT, 'TEST BODY ACA');
	}

showMessage=true;
comment(emailAddr + ', ' + lastName + ', ' + firstName + ' ' );
`^
ES_ACA_WORKFLOWS^`
if (appMatch('Environmental/Permits/Haulers/NA')) {
	closeTask('Application Submittal','Completed','Submitted through ACA','Workflow advanced via EMSE script');
	closeTask('Review','Complete','Reviewed through ACA','Workflow advanced via EMSE script');
	updateTask('Issue','Issued','Issued through ACA','Workflow advanced via EMSE script');
	}
`^
ES_ADD_3RD_TRADE_ELECTRICAL_FEES^`
cCapId = childGetByCapType('Building/3rd/Electrical/NA');
tempId = capId;
elecFeeAmount = 0;
if ((cCapId)) {
	elecFeeAmount = feeAmount('FB028','INVOICED');
	capId = cCapId;
	updateFee('FRN001','BLDGELEC','STANDARD',1,'Y','N');
	capId = tempId;
	}
`^
ES_ADD_3RD_TRADE_MECHANICAL_FEES^`
cCapId = childGetByCapType('Building/3rd/Mechanical/NA');
tempId = capId;
mechFeeAmount = 0;
if ((cCapId)) {
	mechFeeAmount = feeAmount('FB028','INVOICED');
	capId = cCapId;
	updateFee('FRN001', 'BLDGMECH', 'STANDARD', mechFeeAmount, 'Y', 'N');
	capId = tempId;
	}
`^
ES_ADD_3RD_TRADE_PLUMBING_FEES^`
cCapId = childGetByCapType('Building/3rd/Plumbing/NA');
tempId = capId;
plumbFeeAmount = 0;
if ((cCapId)) {
	plumbFeeAmount = feeAmount('FB028','INVOICED');
	capId = cCapId;
	updateFee('FRN001', 'BLDGPLUMB', 'STANDARD', plumbFeeAmount, 'Y', 'N');
	capId = tempId;
	}
`^
ES_ADD_BLDG_ELEC_FEE^`
if (typeof(APPLICATIONINFO) == 'object') {
	for (eachrow in APPLICATIONINFO) branch('ES_ADD_BLDG_ELEC_FEE_LOOP');
	}
`^
ES_ADD_BLDG_ELEC_FEE_LOOP^`
ElecFeeTypeRow = APPLICATIONINFO[eachrow];
if (ElecFeeTypeRow['License Type'].toUpperCase() == 'AEROSOL PRODUCTS') {
	updateFee('FB055','LICFIRE','STANDARD',1,'N');
	}
`^
ES_ADD_BLDG_REINSP_FEES^`
if (appMatch('Building/Mechanical/*/*') && !matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGMECH','STANDARD',1,'Y');
	addTechnologyFeeForReInspectionFee();
	}

if (appMatch('Building/Residential/Swimming Pool-Spa/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGGEN','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Commercial/New/*') && !matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','COMMNEW','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Commercial/Shell/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','COMMSHELL','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Commercial/TI/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','COMMTI','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Commercial/Swimming Pool-Spa/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','COMMPOOL','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Placement/*/*')&&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGGEN','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Demolition/*/*')&&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGGEN','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Commercial/Addition/*')&&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','COMMADD','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/3rd/Commercial/Addition') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','COMM3P','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/3rd/Commercial/New') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','COMMNEW','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Electrical/*/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGELEC','STANDARD',1,'Y');
	addTechnologyFeeForReInspectionFee();
	}

if (appMatch('Building/3rd/Commercial/Shell') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','COMM3P','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/3rd/Commercial/Tenant Improvement') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','COMM3P','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/3rd/Residential/New') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','RES3RD','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Commercial/Tenant Improvement/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','COMMTI','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Existing Building C of O/*/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDEBCOO','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Irrigation/*/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGIRR','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Foundation/*/*')&&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','NOFEE','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Historic/APP/*')&&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','NOFEE','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Historic/Project/*')&&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','NOFEE','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Historic/BLD/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','NOFEE','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Plumbing/*/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB158','BLDGPLUMB','STANDARD',1,'Y');
	addTechnologyFeeForReInspectionFee();
	}

if (appMatch('Building/Placement/*/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGGEN','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Public Education/*/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','NOFEE','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Residential/New/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','RESNEW','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Right of Way/*/*')&&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB046','BLDGROW','STANDARD',1,'N');
	invoiceFee('FB046','STANDARD');
	}

if (appMatch('Building/Shared Parking/*/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','NOFEE','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Retaining Walls/*/*')&&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGGEN','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Temporary Placement/*/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGGEN','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Temporary Amusement/*/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGGEN','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Tents/NA/NA') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGGEN','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Residential/Accessory Structure/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','RESACC','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Siding/*/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGGEN','STANDARD',1,'Y');
	addTechnologyFeeForReInspectionFee();
	}

if (appMatch('Building/Weatherization/*/*') && (inspResult == 'Fail w ReFee' || inspResult == 'Fail w/Refee')) {
	addFee('FB500','WEATHERIZATION','STANDARD',1, 'Y');
	}

if (matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FF004','FIRESUP','STANDARD',1,'Y');
	}

if (appMatch('Building/Mechanical/*/*') && !matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGMECH','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Electrical/*/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGELEC','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Plumbing/*/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB158','BLDGPLUMB','STANDARD',1,'N');
	invoiceFee('FB158','STANDARD');
	}

if (appMatch('Building/Siding/*/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGGEN','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Reroof/*/*')&&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGGEN','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Fences/*/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGGEN','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Windows/*/*') && !matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGGEN','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Reroof/*/*')&&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGGEN','STANDARD',1,'Y');
	addTechnologyFeeForReInspectionFee();
	}

if (appMatch('Building/Fences/*/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGGEN','STANDARD',1,'Y');
	addTechnologyFeeForReInspectionFee();
	}

if (appMatch('Building/Windows/*/*') && !matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGGEN','STANDARD',1,'Y');
	addTechnologyFeeForReInspectionFee();
	}

if (appMatch('Building/Residential/Addition/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','RESADD','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Residential/Alteration/*')&&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','RESALT','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}
`^
ES_ADD_BLDG_REINSP_FEES_ACA^`
if (appMatch('Building/Mechanical/*/*') && !matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGMECH','STANDARD',1,'Y');
	addTechnologyFeeForReInspectionFee();
	}

if (appMatch('Building/Irrigation/NA/NA')) {
	addFee('TF001A','BLDGIRR','STANDARD',1,'N');
	appMatch('Building/3rd/Mechanical/NA');
	} else {
	addFee('TF001A','BLDGMECH','STANDARD',1,'N');
	appMatch('Building/Mechanical/Completion/NA');
	}

if (appMatch('Building/Solar Panel/NA/NA')) {
	addFee('TF001A','BLDGSOLAR','STANDARD',1,'N');
	appMatch('Building/Tents/NA/NA');
	} else {
	addFee('TF001A','BLDGTENT','STANDARD',1,'N');
	appMatch('Building/Temporary Amusement/NA/NA');
	}

if (appMatch('Building/Commercial/New/NA')) {
	addFee('TF001A','COMMNEW','STANDARD',1,'N');
	appMatch('Building/Mixed Use/NA/NA');
	} else {
	addFee('TF001A','COMMNEW','STANDARD',1,'N');
	appMatch('Building/Commercial/Swimming Pool-Spa/NA');
	}

if (appMatch('Building/Land Development/SWP3/Construction')) {
	addFee('TF001A','PLNSWP3','STANDARD',1,'N');
	appMatch('Building/Land Development/SWP3/Dewatering');
	} else {
	addFee('TF001A','PLNSWP3','STANDARD',1,'N');
	appMatch('Building/Land Development/SWP3/Industrial');
	}

if (appMatch('Building/Residential/New/NA')) {
	addFee('TF001A','RESNEW','STANDARD',1,'N');
	appMatch('Building/3rd/Solar/NA');
	} else {
	addFee('TF001A','SOLARTHIRD','STANDARD',1,'N');
	}

if (appMatch('Building/Mechanical/*/*') && !matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('TF001','BLDGMECH','STANDARD',1,'N');
	addFee('FB082','BLDGMECH','STANDARD',1,'N');
	invoiceFee('FB082','STANDARD');
	}

if (appMatch('Building/Electrical/*/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGELEC','STANDARD',1,'Y');
	addTechnologyFeeForReInspectionFee();
	}

if (appMatch('Building/Plumbing/*/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB158','BLDGPLUMB','STANDARD',1,'Y');
	addTechnologyFeeForReInspectionFee();
	}

if (appMatch('Building/Siding/*/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGGEN','STANDARD',1,'Y');
	addTechnologyFeeForReInspectionFee();
	}

if (appMatch('Building/Reroof/*/*')&&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGGEN','STANDARD',1,'Y');
	addTechnologyFeeForReInspectionFee();
	}

if (appMatch('Building/Fences/*/*') &&!matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGGEN','STANDARD',1,'Y');
	addTechnologyFeeForReInspectionFee();
	}

if (appMatch('Building/Windows/*/*') && !matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant')) {
	addFee('FB082','BLDGGEN','STANDARD',1,'Y');
	addTechnologyFeeForReInspectionFee();
	}

if (appMatch('Building/After Hours Construction/NA/NA')) {
	addFee('TF001A','AFTERHOURSPERMIT','STANDARD',1,'N');
	appMatch('Building/Commercial/Completion/NA');
	} else {
	addFee('TF001A','BCCOMP','STANDARD',1,'N');
	appMatch('Building/Existing Building C of O/NA/NA');
	}

if (appMatch('Building/3rd/Demolition/NA')) {
	addFee('TF001A','BLDGGEN','STANDARD',1,'N');
	appMatch('Building/3rd/Retaining Walls/NA');
	} else {
	addFee('TF001A','BLDGGEN','STANDARD',1,'N');
	appMatch('Building/Demolition/NA/NA');
	}
`^
ES_ADD_COUNTY_APP_FEES^`
if (appMatch('Health/Food Inspections/Mobile/NA')) {
	branch('ES_ADD_MOBILE_COUNTY_FEE');
	}

if (appMatch('Health/Food Inspections/Roadside-Outdoor Market/NA') &&  matches(AInfo['Section'],'4(e)')) {
	addFee('FHC0006','HLTHCOUNTY','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Temporary/NA') &&  AInfo['Section'] == '4(f)') {
	addFee('FHC0007','HLTHCOUNTY','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Temporary/NA') && AInfo['Section'] =='4(g)') {
	addFee('FHC0008','HLTHCOUNTY','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Roadside-Outdoor Market/NA') &&  matches(AInfo['Section'],'9.12.070L')) {
	addFee('FH054','HLTHOS','STANDARD',1,'N');
	addFee('FH057','HLTHOS','STANDARD',1,'N');
	}
`^
ES_ADD_ENGPARADE_FEES^`
addFee('FL079','LICPARADE','STANDARD',1,'N');
if (AInfo['Days Between Event and Application'] < 7) {
	addFee('FL080','LICPARADE','STANDARD',1,'N');
	}
`^
ES_ADD_ENVHAULERS_FEES^`
rowCount = 0;
D = new Date();
if (typeof(VEHICLE) == 'object') {
	for (eachrow in VEHICLE) branch('ES_ADD_ENVHAULERS_FEES_LOOP');
	}

comment('rowCount = ' + rowCount);
if (D.getMonth() <=8) {
	showMessage=true;
	var T = ((8-D.getMonth())* rowCount);
	comment('Numb:'+T);
	addFee('EV210','ENVHP','STANDARD',T,'N');
	}
`^
ES_ADD_ENVHAULERS_FEES_LOOP^`
rowCount = rowCount + 1;
`^
ES_ADD_ENVHAULERS_PENALTY_FEES^`
rowCount = 0;
if (typeof(VEHICLE) == 'object') {
	for (eachrow in VEHICLE) branch('ES_ADD_ENVHAULERS_FEES_LOOP');
	}

if (rowCount > 0 && wfTask == 'Issue' && wfStatus == 'Suspended') {
	addFee('EV220','ENVHP','STANDARD',rowCount,'N');
	}

if (rowCount > 0 && wfTask == 'Issue' && wfStatus == 'Revoked') {
	addFee('EV230','ENVHP','STANDARD',rowCount,'N');
	}
`^
ES_ADD_HLTH_LATE_FEE^`
asiDate = new Date(AInfo['GENERAL.Start Date'] +' ' + AInfo['GENERAL.Start Time']).getTime();
currentDate = new Date().getTime();
diffDate = new Number((asiDate.toString()-currentDate.toString())/3600000).toFixed(0);
if (diffDate < 72 && AInfo['PERMIT INFO.Section'] == '9.12.070C1') {
	addFee('FH083','HLTHTEMP','STANDARD',1,'N');
	}

if (diffDate < 72 && AInfo['PERMIT INFO.Section'] == '9.12.070D1') {
	addFee('FH084','HLTHTEMP','STANDARD',1,'N');
	}
`^
ES_ADD_LICFIRE_LICTYPE_FEES^`
if (typeof(APPLICATIONINFO) == 'object') {
	for (eachrow in APPLICATIONINFO) branch('ES_ADD_LICFIRE_LICTYPE_FEES_LOOP');
	}
`^
ES_ADD_LICFIRE_LICTYPE_FEES_LOOP^`
if (licTypeRow['License Type']== 'Compressed Gases' && !feeExists('FL032')) {
	addFee('FL032','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Covered Mall Building' && !feeExists('FL033')) {
	addFee('FL033','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Cryogenic Fluids' && !feeExists('FL034')) {
	addFee('FL034','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Explosives' && !feeExists('FL035')) {
	addFee('FL035','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Flammable Liquids' && !feeExists('FL036')) {
	addFee('FL036','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Floor Finishing' && !feeExists('FL037')) {
	addFee('FL037','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'For-Use Permits' && !feeExists('FL038')) {
	addFee('FL038','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Fruit Ripening' && !feeExists('FL039')) {
	addFee('FL039','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Fumigation' && !feeExists('FL040')) {
	addFee('FL040','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Hazardous Materials' && !feeExists('FL041')) {
	addFee('FL041','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type']== 'Aerosol Products' && !feeExists('FL023')) {
	addFee('FL023','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'HPM Facilities' && !feeExists('FL042')) {
	addFee('FL042','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'High Pile Storage' && !feeExists('FL043')) {
	addFee('FL043','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Industrial Ovens' && !feeExists('FL044')) {
	addFee('FL044','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Lumber Yards' && !feeExists('FL045')) {
	addFee('FL045','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Vehicles in Assembly' && !feeExists('FL046')) {
	addFee('FL046','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'LP-Gas' && !feeExists('FL047')) {
	addFee('FL047','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Magnesium' && !feeExists('FL048')) {
	addFee('FL048','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Open Burning' && !feeExists('FL049')) {
	addFee('FL049','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Organic Coatings' && !feeExists('FL050')) {
	addFee('FL050','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Places of Assembly' && !feeExists('FL051')) {
	addFee('FL051','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type']== 'Aviation Facilities' && !feeExists('FL024')) {
	addFee('FL024','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Private Fire Hydrants' && !feeExists('FL052')) {
	addFee('FL052','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Pryroxylin Plastics' && !feeExists('FL053')) {
	addFee('FL053','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Refrigeration Equipment' && !feeExists('FL054')) {
	addFee('FL054','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Repair Garages' && !feeExists('FL055')) {
	addFee('FL055','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Rooftop Heliports' && !feeExists('FL056')) {
	addFee('FL056','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Spraying/Dipping' && !feeExists('FL057')) {
	addFee('FL057','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Tire Storage' && !feeExists('FL058')) {
	addFee('FL058','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Tents and Canopies' && !feeExists('FL059')) {
	addFee('FL059','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Tire Storage' && !feeExists('FL060')) {
	addFee('FL060','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Waste Handling' && !feeExists('FL061')) {
	addFee('FL061','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Battery Systems' && !feeExists('FL025')) {
	addFee('FL025','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Wood Products' && !feeExists('FL062')) {
	addFee('FL062','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Blasting Operations' && !feeExists('FL026')) {
	addFee('FL026','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Blaster's License' && !feeExists('FL027')) {
	addFee('FL027','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type']== 'Blaster's License Renewal' && !feeExists('FL028')) {
	addFee('FL028','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Combustible dust-producting Operations' && !feeExists('FL029')) {
	addFee('FL029','LICFIRE','STANDARD',1,'N');
	}

if (licTypeRow['License Type'] == 'Combustible Fibers' && !feeExists('FL030')) {
	addFee('FL030','LICFIRE','STANDARD',1,'N');
	}
`^
ES_ADD_LICFLEAMKT_FEES^`
if (AInfo['Renewal'] == 'Yes') {
	addFee('FL260','LICFLEAMARKET','STANDARD',1,'N');
	}

if (AInfo['Renewal'] == 'No') {
	addFee('FL250','LICFLEAMARKET','STANDARD',1,'N');
	}
`^
ES_ADD_LIC_REINSP_FEES^`
if (appMatch('Licenses/Swimming Pool and Spa/*/*') && (inspResult == 'Fail w/refee' || inspResult == 'Fail w/re-fee')) {
	addFee('FL099','LICPOOL','STANDARD',1,'N');
	}

if (appMatch('Licenses/Laundry/*/*') && inspResult == 'Fail w/re-fee') {
	addFee('FL116','LICLAUND','STANDARD',1,'N');
	}

if (appMatch('Licenses/Tattoo Body Piercing Employee/*/*') && inspResult == 'Fail w/re-fee') {
	addFee('FL106','LICTBPEMP','STANDARD',1,'N');
	}

if (appMatch('Licenses/Trailer Court/*/*') && (inspResult == 'Fail w/refee' || inspResult == 'Fail w/re-fee')) {
	addFee('FL114','LICTRAILER','STANDARD',1,'N');
	}

if (appMatch('Licenses/Fire/*/*') && inspResult == 'Fail w/refee') {
	addFee('FL065','LICFIRE','STANDARD',1,'N');
	}
`^
ES_ADD_MOBILE_COUNTY_FEE^`
if (appMatch('Health/Food Inspections/Mobile/NA') &&  matches(AInfo['PERMIT INFO.Section'],'4(c)')) {
	addFee('FHC0004','HLTHCOUNTY','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Mobile/NA') &&  matches(AInfo['PERMIT INFO.Section'],'4(d)')) {
	addFee('FHC0005','HLTHCOUNTY','STANDARD',1,'N');
	}
`^
ES_ADD_SUBDVIV_FEES^`
if (appMatch('Planning/Subdivision/Easement/NA') && AInfo['APPLICATION.Right-of-Way Type'] == 'Dedication') {
	addFee('FP016','PLNEASE','STANDARD',1,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Preliminary')  && AInfo['GENERAL I.Type'] == 'Resubdivision') {
	addFee('FP002D','PLNSDSD','STANDARD',1,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo')  && AInfo['GENERAL I.Type'] == 'Major') {
	addFee('FP002C','PLNSDSD','STANDARD',1,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo')  && AInfo['GENERAL I.Type'] == 'Minor') {
	addFee('FP002E','PLNSDSD','STANDARD',1,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Combo')  && AInfo['GENERAL I.Type'] == 'Resubdivision') {
	addFee('FP002G','PLNSDSD','STANDARD',1,'N');
	}

if (appMatch('Planning/Subdivision/Easement/NA') && AInfo['APPLICATION.Right-of-Way Type'] == 'Vacation') {
	addFee('FP015','PLNEASE','STANDARD',1,'N');
	}

if (appMatch('Planning/Subdivision/Right of Way/NA')  && AInfo['APPLICATION.Right-of-Way Type'] == 'Vacation') {
	addFee('FP017','PLNROW','STANDARD',1,'N');
	}

if (appMatch('Planning/Subdivision/Right of Way/NA')  && AInfo['APPLICATION.Right-of-Way Type'] == 'Dedication') {
	addFee('FP018','PLNROW','STANDARD',1,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Final')  && AInfo['GENERAL I.Type'] == 'Major') {
	addFee('FP002B','PLNSDSD','STANDARD',1,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Final')  && AInfo['GENERAL I.Type'] == 'Minor') {
	addFee('FP002E','PLNSDSD','STANDARD',1,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Final')  && AInfo['GENERAL I.Type'] == 'Resubdivision') {
	addFee('FP002F','PLNSDSD','STANDARD',1,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Preliminary')  && AInfo['GENERAL I.Type'] == 'Major') {
	addFee('FP002','PLNSDSD','STANDARD',1,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/Preliminary')  && AInfo['GENERAL I.Type'] == 'Minor') {
	addFee('FP002E','PLNSDSD','STANDARD',1,'N');
	}
`^
ES_ADD_TRADE_ELECTRICAL_FEES^`
cCapId = childGetByCapType('Building/Electrical/NA/NA');
tempId = capId;
elecFeeAmount = 0;
if ((cCapId)) {
	elecFeeAmount = feeAmount('FB028','INVOICED');
	capId = cCapId;
	updateFee('FRN001','BLDGELEC','STANDARD',1,'Y','N');
	capId = tempId;
	}
`^
ES_ADD_TRADE_MECHANICAL_FEES^`
cCapId = childGetByCapType('Building/Mechanical/NA/NA');
tempId = capId;
mechFeeAmount = 0;
if ((cCapId)) {
	mechFeeAmount = feeAmount('FB028','INVOICED');
	capId = cCapId;
	updateFee('FRN001', 'BLDGMECH', 'STANDARD', mechFeeAmount, 'Y', 'N');
	capId = tempId;
	}
`^
ES_ADD_TRADE_PLUMBING_FEES^`
cCapId = childGetByCapType('Building/Plumbing/NA/NA');
tempId = capId;
plumbFeeAmount = 0;
tradeFeeAmount = 0;
techAmount = 0;
if ((cCapId)) {
	plumbFeeAmount = feeAmount('FB028','INVOICED');
	capId = cCapId;
	updateFee('FRN001', 'BLDGPLUMB', 'STANDARD', plumbFeeAmount, 'Y', 'N');
	capId = tempId;
	}
`^
ES_AMO_ASSIGN_SUPERVISOR^`
if (AInfo['Rep Districts'] == 1 || AInfo['Rep Districts'] == 8) {
	assignTask ('Completeness Check', 'HERNANDEZDB');
	}

if (AInfo['Rep Districts'] == 2 || AInfo['Rep Districts'] == 4) {
	assignTask ('Completeness Check', 'RAMIREZVM');
	}

if (AInfo['Rep Districts'] == 3 || AInfo['Rep Districts'] == 7) {
	assignTask ('Completeness Check', 'MANUEL.A.MORALES');
	}

if (AInfo['Rep Districts'] == 5 || AInfo['Rep Districts'] == 6) {
	assignTask ('Completeness Check', 'CASTANEDACV1');
	}
`^
ES_AMO_SCHEDULE_FOLLOWUP^`
var daysAhead;
if (AInfo['Program Nuisance'] == 'HSMK') {
	daysAhead = 1;
	}

if (AInfo['Program Nuisance'] == 'HSN') {
	daysAhead = 1;
	}

if (AInfo['Program Nuisance'] == 'HSO') {
	daysAhead = 1;
	}

if (AInfo['Program Nuisance'] == 'HSPD') {
	daysAhead = 8;
	}

if (AInfo['Program Nuisance'] == 'JV') {
	daysAhead = 11;
	}

if (AInfo['Program Nuisance'] == 'MSU') {
	daysAhead = 4;
	}

if (AInfo['Program Nuisance'] == 'ZN-GS') {
	daysAhead = 7;
	}

if (AInfo['Program Nuisance'] == 'ZN-SO') {
	daysAhead = 4;
	}

if (AInfo['Source'] == 'Patrol' && AInfo['Submitted via'] == 'In-Person' && (AInfo['Program Nuisance'] == 'PRKG' || AInfo['Program Nuisance'] == 'PRKP' || AInfo['Program Nuisance'] == 'PS')) {
	scheduleInspection ('1120 Site Inspection',0,currentUserID);
	resultInspection ('1120 Site Inspection','Court', todayDate,AInfo['Inspection Comments']);
	closeTask('Receive Complaint', 'Assigned','via ES_AMO_SCHEDULE_FOLLOWUP','via script');
	closeTask('Investigation', 'Court', 'via ES_AMO_SCHEDULE_FOLLOWUP','via script');
	}

if (AInfo['Source'] == 'Patrol' && AInfo['Submitted via'] == 'In-Person' && AInfo['Program'] == 'Nuisance' && (AInfo['Program Nuisance'] != 'PRKG' && AInfo['Program Nuisance'] != 'PRKP' && AInfo['Program Nuisance'] != 'PS')) {
	scheduleInspection ('1120 Site Inspection',0,currentUserID);
	resultInspection ('1120 Site Inspection','Violation', todayDate,AInfo['Inspection Comments']);
	scheduleInspection ('1120 Site Inspection',daysAhead,currentUserID);
	closeTask('Receive Complaint', 'Assigned','via ES_AMO_SCHEDULE_FOLLOWUP','via script');
	assignTask ('Investigation', currentUserID);
	updateTask('Investigation','Violations','Updated via ES_AMO_SCHEDULE_FOLLOWUP');
	updateAppStatus('Enforcement','Status set by batch script');
	}

var todayDate = dateFormatted(fileDateObj.getMonth(),fileDateObj.getDayOfMonth(),fileDateObj.getYear(),'YYYY-MM-DD');
comment ('Todays date:' + todayDate);
showMessage = true;
comment ('Program chosen is: ' + AInfo['Program Nuisance']);
if (AInfo['Program Nuisance'] == 'BR') {
	daysAhead = 8;
	}

if (AInfo['Program Nuisance'] == 'BAS') {
	daysAhead = 11;
	}

if (AInfo['Program Nuisance'] == 'BR-DF') {
	daysAhead = 8;
	}

if (AInfo['Program Nuisance'] == 'BR-SC') {
	daysAhead = 1;
	}

if (AInfo['Program Nuisance'] == 'HCR') {
	daysAhead = 1;
	}

if (AInfo['Program Nuisance'] == 'HS-MT') {
	daysAhead = 11;
	}

if (AInfo['Program Nuisance'] == 'HSL') {
	daysAhead = 1;
	}
`^
ES_AMO_SCHEDULE_INSP^`
if (isScheduled('1120 Site Inspection') && isTaskActive('Receive Complaint')) {
	closeTask('Receive Complaint', 'Assigned','via script','via ES_AMO_SCHEDULE_INSP');
	assignTask ('Investigation', currentUserID);
	}
`^
ES_AMS_ASSIGN_WORK_ORDER^`
var gisArea = getGISInfo('Accela_map', 'DSD Sectors', 'NAME');
if ((gisArea == 'WEST' || gisArea == 'NORTHWEST')) {
	assignTask('Work Order','RAMIREZRN');
	}

if (gisArea == 'LOWER VALLEY') {
	assignTask('Work Order','GARCIALX');
	}

if (gisArea == 'CENTRAL') {
	assignTask('Work Order','AMADORJA2');
	}

if (gisArea == 'NORTH EAST') {
	assignTask('Work Order','CASTILLOA');
	}

if (gisArea == 'EAST') {
	assignTask('Work Order','AMADORJA2');
	}

if (!matches(gisArea, 'EAST', 'NORTH EAST', 'CENTRAL', 'LOWER VALLEY', 'WEST', 'NORTHWEST')) {
	assignTask('Work Order','AMADORJA2');
	}
`^
ES_AMS_CONTAINERS_ASSIGN_WO^`
assignTask('Work Order Submittal', currentUserID);
closeTask('Work Order Submittal','Complete','Workflow Action Performed by Script','Workflow Action Performed by Script');
cityArea = getGISInfo('Accela_map', 'ESDContainers', 'NAME');
logDebug('GIS Area: ' + cityArea);
if ((cityArea == 'CENTRAL')) {
	assignTask('Work Order','AMADORJA2');
	}

if ((cityArea == 'LOWER VALLEY')) {
	assignTask('Work Order','GARCIALX');
	}

if ((cityArea == 'NORTHEAST')) {
	assignTask('Work Order','ORTEGARX2');
	}

if ((cityArea == 'WEST SIDE')) {
	assignTask('Work Order','RAMIREZRN');
	}

if ((cityArea == 'EAST 1')) {
	assignTask('Work Order','ESPINOZALE');
	}

if ((cityArea == 'EAST 2')) {
	assignTask('Work Order','PAYANJX2');
	}

if ((cityArea == undefined || cityArea == '')) {
	assignTask('Work Order','AMADORJA2');
	}
`^
ES_ANIMAL_INVOICEFEEAFTER^`
if (appMatch('Animal/License/NA/NA')) {
	for (x in FeeObjs) if (FeeObjs[x].getFeeCod() == 'EA0135') branch('ES_SEND_PET_OWNER_EMAIL');
	}
`^
ES_ANIMAL_WFTUB4^`
var cPerson = aa.person.getUser(currentUserID).getOutput();
var cDept=aa.people.getDepartmentList('').getOutput();
var uDept='';
for(dItem in cDept)if(cDept[dItem].getDeptKey() == cPerson.getDeptOfUser()+'')uDept=cDept[dItem].getDeptName();
if (wfTask=='Completeness Check' && wfStatus=='Euthanize' && AInfo['Pet Status']=='Adopted' || AInfo['Pet Status']=='TNR' || AInfo['Pet Status']=='VIP') {
	showMessage=true;
	comment('Animal will not be euthanized without supervisor clearance');
	cancel=true;
	}

if (wfTask=='Completeness Check' && wfStatus=='Euthanize' && AInfo['Supervisor']=='RAMIREZJX2' && AInfo['Pet Status']=='Adopted' || AInfo['Pet Status']=='TNR' || AInfo['Pet Status']=='VIP') {
	showMessage=true;
	comment('Proper supervisor clearance has been approved');
	cancel=false;
	}

if (wfTask=='Completeness Check' && wfStatus=='Euthanize' && AInfo['Type']=='Cat' && !AInfo['Cat FD']) {
	cancel = true;
	showMessage=true;
	comment('<font color =red><b>Cat FD must be populated before this task can be resulted.</b></font>');
	}

if (wfTask=='Completeness Check' && !AInfo['Meets Adoptable Criteria']) {
	cancel = true;
	showMessage = true;
	comment('<font colore=red><b>ASI Field 'Meets Adoptable Criteria' must be populated before the task can be resulted.</b</font>');
	}

if (wfTask=='Claim' && wfStatus=='No EU' && uDept!='Animal Sr Shelter') {
	cancel = true;
	showMessage=true;
	comment('<font color=red><b>User must be a member of the 'Animal Sr Shelter' group inorder to result this task with the status of 'No EU'.</b</font>');
	}

if (wfTask=='Completeness Check' && wfStatus=='Euthanize' && uDept!='Animal Sr Shelter' && (AInfo['Pet Status']=='ADOPT' || AInfo['Pet Status']=='TNR' || AInfo['Pet Status']=='VIP')) {
	showMessage=true;
	comment('<font color=red><b>Animal will not be euthanized without supervisor clearance.</b</font>');
	cancel=true;
	}
`^
ES_ASG_TSK_CHILDREN^`
if (appMatch('Enforcement/Fire Code Compliance/Codes/NA')) {
	var newChild = createChild('Enforcement','Property Maintenance','Housing Safety','NA','Child of record ID ' + capIDString);
	}

var tempCapId = capId;
capId = newChild;
assignTask('Complaint Received','RODRIGUEZ-HEFNERE');
`^
ES_Animal_Animal_UpdateKennel^`
if (AInfo['Kennel Number'] && AInfo['Kennel Section']) {
	var capPreFix = 'ASKL';
	var newAltID = capPreFix+String(AInfo['Kennel Section'])+'-'+String(zeroPad(AInfo['Kennel Number'],5));
	var bDate = new Date();
	var bdateString = jsDateToASIDate(bDate);
	}

if ((AInfo['Kennel Number'] && AInfo['Kennel Section']) && (AInfo['ParentAltId']!= newAltID)) {
	if(AInfo['ParentAltId']!= null)removeParent(AInfo['ParentAltId']);
	addParent(newAltID, capId);
	editAppSpecific('ParentAltId',newAltID);
	var tableRow = new Array();
	tableRow['Facility']=String(AInfo['Facility']);
	tableRow['Kennel Section']=String(AInfo['Kennel Section']);
	tableRow['Kennel Number']=String(AInfo['Kennel Number']);
	tableRow['Time']=String(bDate.getHours()+':'+bDate.getMinutes());
	tableRow['Updated']=String(bdateString);
	tableRow['Updated By'] = String(currentUserID);
	addToASITable('KENNEL',tableRow);
	}
`^
ES_Animal_AppSpecInfoUpdateAfter^`
if (appMatch('Animal/Complaint/*/*') && matches(AInfo['Condition'],'Injured','Sick')) {
	email('aasr-animailservices@elpasotexas.gov', 'accela@elpasotexas.gov', String(capId.getCustomID()+'Animal Complaint Information'), String(capId.getCustomID()+'Animal being Transported is injured or sick.'));
	}

if (appMatch('Animal/Animal/*/*') && TREATMENT.length>0) {
	TreatmentASITTemp = loadASITTemp();
	for(treatmentRow in TREATMENT)if(TREATMENT[treatmentRow]['Inspection Scheduled']=='No')branch('ES_Animal_ScheduleInspForTreatment');
	removeASITable('TREATMENT');
	addASITable('TREATMENT', TreatmentASITTemp);
	}

if (AInfo['Update ASI from Parent']) {
	branch('ES_Animal_Copy_ParentASI');
	}
`^
ES_Animal_AppSubmitAfter^`
if (appMatch('Animal/Cage/NA/NA') && AInfo['Delivery']=='Yes') {
	addFee('EA0118','ANIMALCAGE','STANDARD',1,'Y',capId);
	}

if (appMatch('Animal/*/*/*')) {
	branch('ES_Animal_SocialMedia_AppSubmitAfter');
	}

if (appMatch('Animal/Complaint/*/*') && AInfo['Complaint Type']) {
	var inspType = lookup('LKUP_Animal_ComplaintTypeToInspectionType', String(AInfo['Complaint Type']).toUpperCase());
	var theInsp = lookup('LKUP_Animal_Inspector','LEAD');
	if(inspType!=undefined)scheduleInspection(inspType,0,theInsp);
	}
`^
ES_Animal_Copy_ParentASI^`
var animalParents=new Array();
if (AInfo['Update ASI from Parent']) {
	var animalParents= getParentsElPaso('Animal/Complaint/NA/NA');
	}

if (animalParents.length>0) {
	saveCapID = capId;
	capId = animalParents[0];
	saveCapAsi = AInfo;
	loadAppSpecific(AInfo,capId);
	copyAppSpecific( saveCapID );
	capId = saveCapID;
	}

editAppSpecific('Update ASI from Parent','UNCHECKED');
`^
ES_Animal_InspectionResultSubmitAfter^`
if (appMatch('Animal/Complaint/*/*') && matches(inspType,'3206 Assist Investigation','3202 Cruelty Investigation','3203 Exposure Investigation','3204 Nuisance Investigation','3205 SOC Investigation','3207 Stray Investigation','3208 Trap Investigation','3209 Wildlife Investigation') && (inspResult=='Pending' || inspResult=='Quarantine' || inspResult=='Fail')) {
	updateTask('Assessment',inspResult,'Updated via script when resulting inspection: '+inspType);
	}

if (appMatch('Animal/Complaint/*/*') && matches(inspType,'3206 Assist Investigation','3202 Cruelty Investigation','3203 Exposure Investigation','3204 Nuisance Investigation','3205 SOC Investigation','3207 Stray Investigation','3208 Trap Investigation','3209 Wildlife Investigation') && (inspResult=='Impound' || inspResult=='Impound Quarantine')) {
	var newChild=createChild('Animal','Animal','NA','NA','');
	var savedCapID= capId;
	capId=newChild;
	closeTask('Submittal','Complete','Updated via EMSE Script','Updated via EMSE Script');
	capId=savedCapID;
	copyAppSpecific(newChild);
	copyASITables(capId,newChild);
	var pCap = aa.cap.getCap(capId).getOutput();
	var cCap = aa.cap.getCap(newChild).getOutput();
	var copySuccess = aa.cap.copyComments(pCap,cCap);
	if(copySuccess.getSuccess()) logDebug('Comments Copied');
	}

if (appMatch('Animal/Complaint/*/*') && matches(inspType,'3206 Assist Investigation','3202 Cruelty Investigation','3203 Exposure Investigation','3204 Nuisance Investigation','3205 SOC Investigation','3207 Stray Investigation','3208 Trap Investigation','3209 Wildlife Investigation') && (inspResult=='Relocate' || inspResult=='Cancel' || inspResult=='Complete' || inspResult=='RTO' || inspResult=='Impound' || inspResult=='Impound Quarantine')) {
	closeTask('Assessment',inspResult,'Updated via EMSE Script','Updated via EMSE Script');
	}

if (appMatch('Animal/Complaint/*/*') && matches(inspType,'3202 Cruelty Investigation','3203 Exposure Investigation','3204 Nuisance Investigation','3205 SOC Investigation','3206 Assist Investigation','3207 Stray Investigation','3208 Trap Investigation','3209 Wildlife Investigation') && inspResult=='Incomplete') {
	var inspector = lookup('LKUP_Animal_Inspector', 'LEAD');
	scheduleInspection(inspType,0,inspector);
	}
`^
ES_Animal_InspectionScheduleAfter^`
if ((appMatch('Animal/Animal/*/*') || appMatch('Animal/Complaint/*/*')) && getDepartmentName(currentUserID) == '311') {
	var theInsp = lookup('LKUP_Animal_Inspector','LEAD');
	assignInspection(InspectionIdList,theInsp);
	}
`^
ES_Animal_Lic_Edit_Expiration^`
if (appMatch('Animal/License/NA/NA') && wfTask == 'Issue' && wfStatus == 'Issue License' && AInfo['USDA Licensed Vaccine'] == '1 Year') {
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,12));
	thisLic.setStatus('Active');
	showMessage=true;
	}

if (appMatch('Animal/License/NA/NA') && wfTask == 'Issue' && wfStatus == 'Issue License' && AInfo['USDA Licensed Vaccine'] == '3 Year') {
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,36));
	thisLic.setStatus('Active');
	}
`^
ES_Animal_Master_On_Payment^`
if (AInfo['USDA Licensed Vaccine'] == '1 Year') {
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,12));
	thisLic.setStatus('Active');
	showMessage=true;
	}

if (AInfo['USDA Licensed Vaccine'] == '3 Year') {
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,36));
	thisLic.setStatus('Active');
	showMessage=true;
	}

updateTask('Issue','Issue License','Updated via EMSE Script','Updated via EMSE Script');
`^
ES_Animal_Renew_On_Payment^`
if (balanceDue == 0) {
	aa.runScript('PAYMENTRECEIVEAFTER4RENEW');
	logDebug('Return fromPRA4REN: ' +aa.env.getValue('ScriptReturnMessage'));
	}

if (balanceDue == 0 && isTaskActive('Renewal Application')) {
	closeTask('Renewal Application','Issue Renewal','Updated by script when Fees Paid');
	}

if (balanceDue == 0) {
	branch('ES_Animal_Update_Renewal_Parent');
	//update License to 'Active';
	}
`^
ES_Animal_Renewal_Add_Fee^`
if (appMatch('Animal/License/Renewal/NA') && AInfo['USDA Licensed Vaccine']=='1 Year') {
	addFee('EAO999','ANIMALRENEWALREG','FINAL',1,'Y');
	addFee('EA0136',ANIMALRENEWALREG:,'STANDARD',1,'Y');
	}

if (appMatch('Animal/License/Renewal/NA') && AInfo['USDA Licensed Vaccine']=='3 Year') {
	addFee('EAO999','ANIMALRENEWALREG','FINAL',3,'Y');
	addFee('EA0136',ANIMALRENEWALREG:,'STANDARD',3,'Y');
	}
`^
ES_Animal_ScheduleInspForTreatment^`
var tempRow = TreatmentASITTemp[treatmentRow];
var tempRowProcedure='';
var tempRowTPD=0;
var tempRowNOD=0;
var inspType1='';
var inspType2='';
var insp1AssignTo='';
var insp2AssignTo='';
if (tempRow['Procedure']!=null) {
	tempRowProcedure =tempRow['Procedure'].toString();
	comment(tempRowProcedure);
	}

if (tempRow['Number of days']!=null) {
	tempRowNOD=parseInt(tempRow['Number of days'].toString());
	comment(tempRowNOD);
	}

if (tempRow['Times per day']!=null) {
	tempRowTPD=parseInt(tempRow['Times per day'].toString());
	comment(tempRowTPD);
	}

if (tempRowProcedure=='Quarantine Check') {
	inspType1 ='3208 Q Check';
	insp1AssignTo='VTECH';
	inspType2 = '3209 Vet Q Check';
	insp2AssignTo='VET';
	}

if (tempRowProcedure=='Medical Check') {
	inspType1 ='3210 Medical Check';
	insp1AssignTo='VET';
	}

if (tempRowProcedure=='Treatment') {
	inspType1 ='3207 Treatment';
	insp1AssignTo='VTECH';
	}

if (tempRowNOD && tempRowTPD && inspType1) {
	for(var x=0;
	x<tempRowNOD;
	x++)for(var y=0;
	y<tempRowTPD;
	y++)scheduleInspection(inspType1,x,insp1AssignTo);
	TreatmentASITTemp[treatmentRow]['Inspection Scheduled']='Yes';
	}

if (tempRowNOD && tempRowTPD && inspType2) {
	for(var x=0;
	x<tempRowNOD;
	x++)for(var y=0;
	y<tempRowTPD;
	y++)scheduleInspection(inspType2,x,insp2AssignTo);
	}
`^
ES_Animal_Update_Renewal_Parent^`
saveId = capId;
parentLicenseCAPID = getParentCapIDForReview(capId);
comment('ParentLic CAPID = '+parentLicenseCAPID);
capId = parentLicenseCAPID;
logDebug(capId);
updateAppStatus('Active','Renewal Approved By: '+capIDString,parentLicenseCAPID);
aa.expiration.activeLicensesByCapID(capId);
// added this line to force the Parent Expiration to flip to Active and move date forward - this should happen in the PRA4renew but not working;
if (AInfo['USDA Licensed Vaccine'] == '1 Year') {
	thisLic = new licenseObject();
	thisLic.setExpiration(dateAddMonths(thisLic.b1ExpDate,12));
	thisLic.setStatus('Active');
	}

if (AInfo['USDA Licensed Vaccine'] ==  '3 Year') {
	thisLic = new licenseObject();
	thisLic.setExpiration(dateAddMonths(thisLic.b1ExpDate,24));
	thisLic.setStatus('Active');
	}

capId = saveId;
`^
ES_Animal_WFTUA^`
if (appMatch('Animal/License/NA/NA') && wfTask == 'Issue' && wfStatus == 'About to Expire') {
	lic = new licenseObject(capIDString);
	lic.setStatus('About to Expire');
	}

if (appMatch('Animal/License/NA/NA') && wfTask == 'Issue' && wfStatus == 'Issue License' && AInfo['USDA Licensed Vaccine'] == '1 Year') {
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,12));
	thisLic.setStatus('Active');
	showMessage=true;
	}

if (appMatch('Animal/License/NA/NA') && wfTask == 'Issue' && wfStatus == 'Issue License' && AInfo['USDA Licensed Vaccine'] == '3 Year') {
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,36));
	thisLic.setStatus('Active');
	showMessage=true;
	}

if (appMatch('Animal/License/Renewal/NA') && wfStatus == 'Issue Renewal') {
	branch('ES_Animal_Update_Renewal_Parent');
	//update License to 'Active';
	}

if (appMatch('Animal/License/Renewal/NA') && wfStatus == 'Issue Renewal') {
	logDebug('Running WTUA4Renewal');
	aa.runScript('WORKFLOWTASKUPDATEAFTER4RENEW');
	logDebug('Messages in WTUA4Renewal:<br>'+ aa.env.getValue('ScriptReturnMessage'));
	}
`^
ES_BLDGELEC_ADDFEES^`
if (AInfo['Type of Work'] != 'New Residential') {
	updateFee('FB051','BLDGELEC','STANDARD',1,'N','N');
	removeFee('FB069','STANDARD');
	removeFee('FB070','STANDARD');
	}

if (typeof(ELECTRICALEQUIPMENT) == 'object') {
	for (eachrow in ELECTRICALEQUIPMENT) branch('ES_BLDGELEC_ADDFEES_LOOP');
	}
`^
ES_BLDGELEC_ADDFEES_LOOP^`
if (asiRow['Fixture Type'] == 'E03 - Service Change( New, Change, or Replace -Per service)' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB053','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

asiRow = ELECTRICALEQUIPMENT[eachrow];
if (asiRow['Fixture Type'] == 'E12 - Dryer, ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB058','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E13 - Water heater, ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB059','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E14 - Furnace, ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB060','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E15 - Dishwater, ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB061','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E16 - Garbage disposal, ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB062','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E17 - Trash compactor, ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB063','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E18 - Bathroom heater, ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB064','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E19 - Evaporative cooler, ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB065','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E20 - Refrigerated air conditioner, per ton' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB066','BLDGELEC','STANDARD',(asiRow['Quantity/Tons'] * asiRow['Units']) ,'Y','N');
	}

if (asiRow['Fixture Type'] == 'E21 - Transformer type welder, ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB067','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E02 - Service Entrance - Temporary, ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB052','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E22 - X-ray machine, ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB068','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E23 - Fractional motor 1-10 H.P. ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB069','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'E24 - Fractional motor over 10 H.P. ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB085','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'E25 - Motor 1 to 20 H.P. ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB070','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'E26 - Motor over 20 H.P. ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB086','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'E27 - Line work, per pole' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB071','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E28 - Streamer lights, per circuit' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB072','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E29 - Feed rail and bus way, per linear foot' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB073','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E30 - Under floor duct or cellular raceway per linear foot' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB074','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E31 - Power or lighting transformer per k.v.a.' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB075','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E05 - Outlets 1 to 20 ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB055','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E32 - Mobile home' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB076','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E33 - T.V. Outlets-Base Fee' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB077','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E34 - T.V. Outlets' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB094','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E35 - Swimming pool; hot-tub; spa; jacuzzi; ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB078','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E36 - Temporary installation such as carnivals, show windows, conventions, etc., ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB079','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E37 - Generators' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB080','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E38 - Others not covered' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB081','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E40 - Solar heating systems' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB087','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E41 - Solar panels, ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB088','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E06 - Outlets 21 to 40 ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB090','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E07 - Outlets Over 40 ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB091','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E08 - Fixtures 1 to 20 ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB056','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E09 - Fixtures 21 to 40 ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB092','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E10 - Fixtures Over 40 ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB093','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','N');
	}

if (asiRow['Fixture Type'] == 'E11 - Range, ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB057','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y','Y');
	}

if (asiRow['Fixture Type'] == 'Service Entrance' && asiRow['Quantity/Tons'] > 0 && asiRow['Quantity/Tons'] < 101) {
	updateFee('FB053','BLDGELEC','STANDARD',asiRow['Units'],'Y');
	}

if (asiRow['Fixture Type'] == 'Service Entrance' && asiRow['Quantity/Tons'] > 0 && asiRow['Quantity/Tons'] > 100) {
	updateFee('FB054','BLDGELEC','STANDARD',(asiRow['Units']* 28) + ((asiRow['Units'] * asiRow['Quantity/Tons']) - (asiRow['Units'] * 100)) ,'N');
	}

if (asiRow['Fixture Type'] == 'Service Entrance (Per AMP)' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB053','BLDGELEC','STANDARD',asiRow['Quantity/Tons'],'Y');
	}
`^
ES_BLDGIRR_ADDFEES^`
if (AInfo['Type of Use'] == 'Commercial') {
	addFee('FB095','BLDGIRR','STANDARD',1,'Y');
	}

if (AInfo['Type of Use'] == 'Residential') {
	addFee('FB090','BLDGIRR','STANDARD',1,'Y');
	}

if (typeof(IRRIGATIONFIXTURES) == 'object') {
	for (eachrow in IRRIGATIONFIXTURES) branch('ES_BLDGIRR_ADDFEES_LOOP');
	}
`^
ES_BLDGIRR_ADDFEES_LOOP^`
asiRow = IRRIGATIONFIXTURES[eachrow];
if (asiRow['Fixture Type'] == 'Backflow Devices' && asiRow['Quantity'] > 0) {
	addFee('FB131','BLDGIRR','STANDARD',asiRow['Quantity'],'Y');
	}

if (asiRow['Fixture Type'] == 'Bubblers' && asiRow['Quantity'] > 0) {
	addFee('FB134','BLDGIRR','STANDARD',asiRow['Quantity'],'Y');
	}

if (asiRow['Fixture Type'] == 'Control Valves' && asiRow['Quantity'] > 0) {
	addFee('FB130','BLDGIRR','STANDARD',asiRow['Quantity'],'Y');
	}

if (asiRow['Fixture Type'] == 'Drips' && asiRow['Quantity'] > 0) {
	addFee('FB133','BLDGIRR','STANDARD',asiRow['Quantity'],'Y');
	}

if (asiRow['Fixture Type'] == 'Sprinkler Heads' && asiRow['Quantity'] > 0) {
	addFee('FB132','BLDGIRR','STANDARD',asiRow['Quantity'],'Y');
	}

if (asiRow['Fixture Type'] == 'Sub Subsurface (Per Sq Yards)' && asiRow['Quantity'] > 0) {
	addFee('FB135','BLDGIRR','STANDARD',asiRow['Quantity'],'Y');
	}
`^
ES_BLDGMECH_ADDFEES^`
if (AInfo['GENERAL.Type of Work'] != 'New Residential') {
	addFee('FB084','BLDGMECH','STANDARD',1,'N');
	}

if (typeof(MECHANICALEQUIPMENT) == 'object') {
	for (eachrow in MECHANICALEQUIPMENT) branch('ES_BLDGMECH_ADDFEES_LOOP');
	}
`^
ES_BLDGMECH_ADDFEES_LOOP^`
asiRow = MECHANICALEQUIPMENT[eachrow];
showMessage=true;
comment(asiRow['Fixture Type'] );
if (asiRow['Fixture Type'] == 'M10 - Perimeter convectors, per linear foot' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB091','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'M11 - Cooling tower' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB092','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'M12 - Power units: icemakers, walk-in coolers, reach-in coolers,etc., ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB093','BLDGMECH','STANDARD',(asiRow['Units'] * 24.38) + (6.36 * asiRow['Quantity/Tons']),'Y');
	}

if (asiRow['Fixture Type'] == 'M13 - Icemakers not a portion of heating and cooling system no tons' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB110','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'M14 - Condensate Drains' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB095','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'M15 - Solar Systems (excluding duct work)' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB096','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'M16 - Collectors' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB097','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'M17 - Hood and/or exhaust fan, duct: Residential' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB098','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'M18 - Hood and/or exhaust fan, duct: Non-Residential' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB099','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'M19 - Restroom exhaust fan and/or duct/Dryer Vent: Residential' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB100','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'M02 - Boiler: 5 horsepower or less, ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB111','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'M20 - Restroom exhaust fan and/or duct/Dryer Vent: Non-Residential' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB101','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'M21 - Fire dampers, ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB102','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'M22 - Humidifiers, ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB103','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'M23 - Ducts: 1-10 openings' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB104','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'M24 - Ducts: 11-20 openings' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB113','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'M25 - Ducts: 21-30 openings' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB114','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'M26 - Ducts: over 30 openings' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB115','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'M03 - Boiler Horsepower additional over 5, ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB112','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'M04 - Each evaporative cooler' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB085','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'M05 - Each force air or gravity heater or furnace' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB086','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'M06 - Non-ducted heating appliances; wall, space, unit infrared heaters, ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB087','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'M07 - Combination heating-cooling unit or refrigeration unit, ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB088','BLDGMECH','STANDARD',(asiRow['Units'] * 46.64) + (6.36 * asiRow['Quantity/Tons']),'Y');
	}

if (asiRow['Fixture Type'] == 'M08 - Heat exchanger, ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB089','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}

if (asiRow['Fixture Type'] == 'M09 - Air handlers and mixing boxes, ea' && asiRow['Quantity/Tons'] > 0) {
	updateFee('FB090','BLDGMECH','STANDARD',asiRow['Quantity/Tons'],'Y');
	}
`^
ES_BLDGPLUMB_ADDFEES^`
showDebug = false;
showMessage = false;
removeFee('FB116','STANDARD');
removeFee('FB117','STANDARD');
if (appMatch('Building/Plumbing/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FB106','BLDGPLUMB','STANDARD',1,'Y');
	}

for (eachrow in PLUMBINGFIXTURES) branch('ES_BLDGPLUMB_ADDFEES_LOOP');
`^
ES_BLDGPLUMB_ADDFEES_LOOP^`
if (asiRow['Fixture Type'] == 'P04 - Water Closet 1-5' && asiRow['Quantity'] > 5) {
	updateFee('FB200','BLDGPLUMB','STANDARD',asiRow['Quantity'], invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P05 - Water Closet over 5' && asiRow['Quantity'] > 0) {
	updateFee('FB200','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

asiRow = PLUMBINGFIXTURES[eachrow];
invoiceFee = 'N';
if(publicUser) invoiceFee = 'Y';
if (asiRow['Fixture Type'] == 'P10 - Additional surcharge after water connected' && asiRow['Quantity'] > 0) {
	updateFee('FB114','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P11 - Boiler: 5 horsepower or less, ea' && asiRow['Quantity'] > 0) {
	updateFee('FB116','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P12 - Horsepower additional over 5, ea' && asiRow['Quantity'] > 0) {
	updateFee('FB117','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P14 - Dishwasher, Washing Machine, Garbage Disposal unit, ea' && asiRow['Quantity'] > 0) {
	updateFee('FB004','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P14 - Floor Drain,Electric Water Heater or Softener, etc. ea' && asiRow['Quantity'] >0) {
	updateFee('FB201','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P14 - Grease Trap,Sand Trap,Separation Tanks,ea' && asiRow['Quantity'] >0) {
	updateFee('FB202','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P14 - Dental Chair, ea' && asiRow['Quantity'] > 0) {
	updateFee('FB204','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P15 - Commercial roof drain, ea' && asiRow['Quantity'] > 0) {
	updateFee('FB119','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P16 - Bathtub,Shower,Lavatory,Drinking Fountain, ea' && asiRow['Quantity'] > 0) {
	updateFee('FB120','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P16 - Sinks, Urinals, Bidets, ea' && asiRow['Quantity'] > 0) {
	updateFee('FB203','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P17 - Vehicular dump station' && asiRow['Quantity'] > 0) {
	updateFee('FB121','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P18 - Single Sewer Ejector, ea' && asiRow['Quantity'] > 0) {
	updateFee('FB122','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P19 - Dual Sewer Ejector, ea' && asiRow['Quantity'] > 0) {
	updateFee('FB123','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P02 - House to sewer curb cut' && asiRow['Quantity'] > 0) {
	updateFee('FB107','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P20 - Solar heating systems' && asiRow['Quantity'] > 0) {
	updateFee('FB124','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P21 - Solar panels, ea' && asiRow['Quantity'] > 0) {
	updateFee('FB125','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P22 - Back-up water heaters, gas' && asiRow['Quantity'] > 0) {
	updateFee('FB126','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P23 - Storage tank' && asiRow['Quantity'] > 0) {
	updateFee('FB127','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P24 - Appliances' && asiRow['Quantity'] > 0) {
	updateFee('FB105','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P25 - Swimming pools' && asiRow['Quantity'] > 0) {
	updateFee('FB136','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	removeFee('FB106','STANDARD');
	}

if (asiRow['Fixture Type'] == 'P26 - Jacuzzi (Hot Tubs), Therapy tubs, whirlpools, ea' && asiRow['Quantity'] > 0) {
	updateFee('FB137','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P27 - Jacuzzi (Hot Tubs), Therapy tubs, whirlpools, ea additionally if included with swimming pool' && asiRow['Quantity'] > 0) {
	updateFee('FB138','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P28 - Gas water heater (pool, jacuzzi, etc.)' && asiRow['Quantity'] > 0) {
	updateFee('FB139','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P29 - Cartridge filters (pool, jacuzzi, etc.)' && asiRow['Quantity'] > 0) {
	updateFee('FB140','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P03 - Sewer tap' && asiRow['Quantity'] > 0) {
	updateFee('FB108','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P30 - Plumbing work no fixtures or sewer' && asiRow['Quantity'] > 0) {
	updateFee('FB141','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P31 - Mobile home hook-ups' && asiRow['Quantity'] > 0) {
	updateFee('FB142','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P32 - Gas Minimum Processing Fee' && asiRow['Quantity'] > 0) {
	updateFee('FB143','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P33 - Gas opening, appliance by others, ea' && asiRow['Quantity'] > 0) {
	updateFee('FB144','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P34 - Commercial cooking unit, (ovens, etc.), ea' && asiRow['Quantity'] > 0) {
	updateFee('FB145','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P35 - Domestic cooking unit' && asiRow['Quantity'] > 0) {
	updateFee('FB146','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P36 - Gas Water Heater' && asiRow['Quantity'] > 0) {
	updateFee('FB147','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P37 - Commercial clothes dryer' && asiRow['Quantity'] > 0) {
	updateFee('FB149','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P38 - Residential clothes dryer' && asiRow['Quantity'] > 0) {
	updateFee('FB150','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P39 - Gas-Unducted heating appliances, ea' && asiRow['Quantity'] > 0) {
	updateFee('FB151','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P04 - Water Closet 1-5' && asiRow['Quantity'] < 6) {
	updateFee('FB109','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P40 - Lighting unit, log lighter' && asiRow['Quantity'] > 0) {
	updateFee('FB152','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P41 - Floor furnace' && asiRow['Quantity'] > 0) {
	updateFee('FB153','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P42 - Gas Service or Yard Line' && asiRow['Quantity'] > 0) {
	updateFee('FB154','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P43 - Gas refrigerator' && asiRow['Quantity'] > 0) {
	updateFee('FB155','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P05 - Water Closet over 5' && asiRow['Quantity'] < 6) {
	updateFee('FB109','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P06 - Water closet reset' && asiRow['Quantity'] > 0) {
	updateFee('FB110','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P07 - Inspection outside City limit' && asiRow['Quantity'] > 0) {
	updateFee('FB111','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	removeFee('FB106','STANDARD');
	}

if (asiRow['Fixture Type'] == 'P08 - Re-inspection outside City limits' && asiRow['Quantity'] > 0) {
	updateFee('FB112','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'P09 - Surcharge Outside City Limits' && asiRow['Quantity'] > 0) {
	updateFee('FB113','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	removeFee('FB106','STANDARD');
	}

if (AInfo['Type of Work'] == 'Residential' && asiRow['Fixture Type'] == 'Event Waived Fee') {
	removeFee('FB106','STANDARD');
	}

if (asiRow['Fixture Type'] == 'Water Heater Over 50 Gallons (Gas), each' && asiRow['Quantity'] > 0) {
	updateFee('FB148','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'Water Heater 50 Gallons or less (Gas), each' && asiRow['Quantity'] > 0) {
	updateFee('FB147','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'Residential Cooking Unit (Gas), per unit' && asiRow['Quantity'] > 0) {
	updateFee('FB146','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}

if (asiRow['Fixture Type'] == 'Containment Backflow-Commercial(EA)' && asiRow['Quantity'] > 0) {
	updateFee('FB128','BLDGPLUMB','STANDARD',asiRow['Quantity'],invoiceFee,'N');
	}
`^
ES_BLDG_ADDASITBL_SITEPLN^`
addRowArray1 = new Array;
addRowArray1['Type'] = 'Final Flood Plain Cert';
addRowArray1['Date Submitted'] = '';
addRowArray1['Received By'] = '';
addRowArray1['Surveyor/Engineer Name'] = '';
addRowArray1['Status'] = '';
addRowArray1['Comments'] = '';
addRowArray2 = new Array;
addRowArray2['Type'] = 'In Construction';
addRowArray2['Date Submitted'] = '';
addRowArray2['Received By'] = '';
addRowArray2['Surveyor/Engineer Name'] = '';
addRowArray2['Status'] = '';
addRowArray2['Comments'] = '';
addRowArray3 = new Array;
addRowArray3['Type'] = 'Preliminary Flood Plain Cert';
addRowArray3['Date Submitted'] = '';
addRowArray3['Received By'] = '';
addRowArray3['Surveyor/Engineer Name'] = '';
addRowArray3['Status'] = '';
addRowArray3['Comments'] = '';
if (SITEINFORMATION.length < 1) {
	addToASITable('SITE INFORMATION', addRowArray1);
	addToASITable('SITE INFORMATION', addRowArray2);
	addToASITable('SITE INFORMATION', addRowArray3);
	}
`^
ES_BLDG_ASSIGN_NOTIFICATIONS^`
notifyReviewers(AInfo['Expedited']);
comment('im at ES_BLDG_ASSIGN_NOTIFICATIONS');
if (AInfo['Electrical Review'] == 'Yes') {
	email('sernarj@elpasotexas.gov', 'accela@elpasotexas.gov', 'Electrical Review is Active', ' Please review task Electrical  Review of Record Number '+capIDString);
	}

if (AInfo['Public Safety Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov', 'Public Safety Review is Active', ' Please review task Public Safty Review of Record Number '+capIDString);
	}

if (AInfo['Health Food Review'] == 'Yes') {
	email('david.sublasky@elpasotexas.gov;
	', 'accela@elpasotexas.gov', ' Health Food Review is Active', ' Please review task Health Food Review of Record Number '+capIDString);
	}

if (AInfo['Landscaping Review'] == 'Yes') {
	email('kaniadj@elpasotexas.gov', 'accela@elpasotexas.gov', ' Landscaping Review is Active', ' Please review task Landscaping Review of Record Number '+capIDString);
	}

if (AInfo['Historical Review'] == 'Yes') {
	email('velazquezpx@elpasotexas.gov', 'accela@elpasotexas.gov', 'Hsitorical Review is Active', ' Please review task Historical Review of Record Number '+capIDString);
	}

if (AInfo['Irrigation Review'] == 'Yes') {
	email('kaniadj@elpasotexas.gov', 'accela@elpasotexas.gov', '  Irrigation Review is Active', ' Please review task Irrigation Review of Record Number '+capIDString);
	}

if (AInfo['Architectural Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov', ' Architectural Review is Active', ' Please review task Architectural Review of Record Number '+capIDString);
	}

if (AInfo['Subdivision Imp Review'] == 'Yes') {
	email('forsythkl@elpasotexas.gov;
	OrtizNX@elpasotexas.gov', 'accela@elpasotexas.gov', 'Subdivison Imp Review is Active', ' Please review task Subdivision Imp Review of Record Number '+capIDString);
	}

if (AInfo['Planning Zoning Review'] == 'Yes') {
	email('hoffmanap@elpasotexas.gov;
	castlelj@elpasotexas.gov;
	rubioax@elpasotexas.gov', 'accela@elpasotexas.gov', '  Planning Zoning Review is Active', ' Please review task  Planning Review of Record Number '+capIDString);
	}

if (AInfo['Streets Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov', 'Streets Review is Active', ' Please review task Street Review of Record Number '+capIDString);
	}

var TSI = new Array();
var emailTo = 'martineza@elpasotexas.gov';
if (AInfo['Mechanical Review']== 'Yes') {
	email('stilesja@elpasotexas.gov', 'accela@elpasotexas.gov', ' Mechanical Review is Active', ' Please review task Mechanical Review of Record Number '+capIDString);
	}

if (AInfo['Environmental Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov', 'Enviromental Review is Active', ' Please review task Enviromental Review of Record Number '+capIDString);
	}

if (AInfo['Land Development Review'] == 'Yes' && !appMatch('Building/Residential/*/*')) {
	email('dallokf@elpasotexas.gov;
	castilloam@elpasotexas.gov;
	MoyaNX@elpasotexas.gov;
	GardeaJM@elpasotexas.gov;
	GutierrezJ2@elpasotexas.gov;
	SanchezEH@elpasotexas.gov;
	UnzuetaJX@elpasotexas.gov', 'accela@elpasotexas.gov', 'Land Development Review is Active', ' Please review task Land Development Review of Record Number '+capIDString);
	}

if (AInfo['Engineering Traffic Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov', 'Engineering Traffic Review is Active', ' Please review task Engineering Traffic Review of Record Number '+capIDString);
	}

loadTaskSpecific(TSI,capId);
if (AInfo['Airport Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov', ' Airport Review is Active', ' Please review task Airport Review of Record Number '+capIDString);
	}

if (AInfo['Fire Review'] == 'Yes') {
	email('RuizAM@elpasotexas.gov;
	FD-FPDPlanReview@elpasotexas.gov', 'accela@elpasotexas.gov', ' Fire Review is Active', ' Please review Fire task  Review of Record Number '+capIDString);
	}

if (AInfo['Subdivision Review'] == 'Yes') {
	email('AustinAJ@elpasotexas.gov;
	OrtizNX@elpasotexas.gov','accela@elpasotexas.gov', ' Subdivision Review is Active', ' Please review Subdivision task  Review of Record Number '+capIDString);
	}

if (AInfo['Engineering Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov', 'Engineer Review is Active', ' Please review task Engineering  Review of Record Number '+capIDString);
	}

if (AInfo['Plumbing Review'] == 'Yes') {
	email('stilesja@elpasotexas.gov', 'accela@elpasotexas.gov', ' Plumbing Review is Active', ' Please review task Plumbing Review of Record Number '+capIDString);
	}

if (AInfo['Zoning Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov', ' Zoning Review is Active', ' Please review task Zoning Review of Record Number '+capIDString);
	}
`^
ES_BLDG_AUTO_ASSIGN_INSPECTOR^`
var areaInspector = '';
var gisArea = getGISInfo('Accela_map','RES BLD INSP AREA','NAME');
if (appMatch('Building/Mechanical/*/*') && (AInfo['Type of Work'] == 'Residential' || AInfo['Type of Use'] == 'Residential') && matches(gisArea,'NORTHWEST','CENTRAL','COUNTY WEST')) {
	areaInspector = 'FanninWB';
	}

if (appMatch('Building/Mechanical/*/*') && (AInfo['Type of Work'] == 'Residential' || AInfo['Type of Use'] == 'Residential') && matches(gisArea,'NORTHEAST','LV','COUNTY EAST','COUNTY LV')) {
	areaInspector = 'FIERROGUZMAN';
	}

if (appMatch('Building/Mechanical/*/*') && (AInfo['Type of Work'] == 'Residential' || AInfo['Type of Use'] == 'Residential') && matches(gisArea,'EAST')) {
	areaInspector = 'GARCIAAA';
	}

if (appMatch('Building/Residential/Swimming Pool/*') && matches(gisArea,'NORTHWEST','CENTRAL','COUNTY WEST')) {
	areaInspector = 'FANNINWB';
	}

if (appMatch('Building/Residential/Swimming Pool/*') && matches(gisArea,'NORTHEAST','LV','COUNTY EAST','COUNTY LV')) {
	areaInspector = 'FIERROGUZMAN';
	}

if (appMatch('Building/Residential/Swimming Pool/*') && matches(gisArea,'NORTHEAST','LV','COUNTY EAST','COUNTY LV')) {
	areaInspector = 'FIERROGUZMAN';
	}

if (appMatch('Building/Placement/*/*') && matches(gisArea,'NORTHWEST','CENTRAL','COUNTY WEST')) {
	areaInspector = 'FanninWB';
	}

if (appMatch('Building/Placement/*/*') && matches(gisArea,'NORTHEAST','LV','COUNTY EAST','COUNTY LV')) {
	areaInspector = 'FIERROGUZMAN';
	}

if (appMatch('Building/Placement/*/*') && matches(gisArea,'EAST')) {
	areaInspector = 'GARCIAAA';
	}

if (appMatch('Building/Commercial/*/*')) {
	areaInspector = 'GARCIAAA';
	}

if (appMatch('Building/Residential/*/*') && !appMatch('*/Residential/Swimming Pool/*') && matches(gisArea,'NORTHWEST','NORTHEAST','CENTRAL','COUNTY WEST')) {
	areaInspector = 'FANNINWB';
	}

if (appMatch('Building/Temporary Placement/*/*')) {
	areaInspector = 'GARCIAAA';
	}

if (appMatch('Building/Temporary Amusement/*/*') && matches(inspType,'800 Final Building Inspection','1100 ESD Code Inspection')) {
	areaInspector = 'CAHALANSM';
	}

if (appMatch('Building/Irrigation/*/*')) {
	areaInspector = 'GARCIAAA';
	}

if (appMatch('Building/Demolition/*/*')) {
	areaInspector = 'GARCIAAA';
	}

if (appMatch('Building/Plumbing/Consumer Health Protection/NA')) {
	areaInspector = 'GARCIAAA';
	}

if (appMatch('Building/Mechanical/*/*') && (AInfo['Type of Use'] == 'Commercial' || AInfo['Type of Work'] == 'Commercial')) {
	areaInspector = 'GARCIAAA';
	}

if (appMatch('Building/Fences/*/*') && (AInfo['Type of Use'] == 'Commercial' || AInfo['Type of Work'] == 'Commercial')) {
	areaInspector = 'GARCIAAA';
	}

if (appMatch('Building/Plumbing/*/*') && (AInfo['Type of Use'] == 'Commercial' || AInfo['Type of Work'] == 'Commercial')) {
	areaInspector = 'GARCIAAA';
	}

if (appMatch('Building/Windows/*/*') && (AInfo['Type of Use'] == 'Commercial' || AInfo['Type of Work'] == 'Commercial')) {
	areaInspector = 'GARCIAAA';
	}

if (appMatch('Building/Siding/*/*') && (AInfo['Type of Use'] == 'Commercial' || AInfo['Type of Work'] == 'Commercial')) {
	areaInspector = 'GARCIAAA';
	}

if (appMatch('Building/Residential/*/*') && !appMatch('*/Residential/Swimming Pool/*') && matches(gisArea,'LV','LOWER VALLEY','EAST','COUNTY EAST','COUNTY LV')) {
	areaInspector = 'FIERROGUZMAN';
	}

if (appMatch('Building/Right of Way/*/*')) {
	areaInspector = 'CHESAKRX';
	}

if (appMatch('Building/Right of Way/*/*') && matches(gisArea,'EAST')) {
	areaInspector = 'GARCIAAA';
	}

if (appMatch('Building/Right of Way/*/*') && matches(gisArea,'NORTHEAST','LV','COUNTY EAST','COUNTY LV')) {
	areaInspector = 'FIERROGUZMAN';
	}

if (appMatch('Building/Right of Way/*/*') && matches(gisArea,'NORTHWEST','NORTHEAST','CENTRAL','COUNTY WEST')) {
	areaInspector = 'FanninWB';
	}

if (appMatch('Building/Retaining Wall/*/*')) {
	areaInspector = 'CHESAKRX';
	}

if (appMatch('Planning/Grading/*/*')) {
	areaInspector = 'CHESAKRX';
	}

if (appMatch('Planning/Subdivision/Improvement Permits/*')) {
	areaInspector = 'CHESAKRX';
	}

if (appMatch('Building/Electrial/*/*') && (AInfo['Type of Use'] == 'Commercial' || AInfo['Type of Work'] == 'Commercial')) {
	areaInspector = 'PEDREGONOA';
	}

if (appMatch('Planning/Zoning/Sign/*') && (AInfo['Type of Use'] == 'Commercial' || AInfo['Type of Work'] == 'Commercial')) {
	areaInspector = 'PEDREGONOA';
	}

if (appMatch('Planning/Zoning/Sign Demo/*') && (AInfo['Type of Use'] == 'Commercial' || AInfo['Type of Work'] == 'Commercial')) {
	areaInspector = 'PEDREGONOA';
	}

if (appMatch('Building/Electrical/*/*') && (AInfo['Type of Work'] == 'Residential' || AInfo['Type of Use'] == 'Residential') && matches(gisArea,'NORTHWEST','CENTRAL','EAST','COUNTY WEST', '')) {
	areaInspector = 'FanninWB';
	}

if (appMatch('Planning/Zoning/PWSF Communications/*') && (AInfo['Type of Use'] == 'Commercial' || AInfo['Type of Work'] == 'Commercial')) {
	areaInspector = 'PEDREGONOA';
	}

if (matches(inspType, '400 Fire Department Final', '485 Fire Sprinkler', '480 Fire Alarm', '475 Fire Suppression', '490 Fire Pump test', '470 Underground Fire System', '473 Aboveground Fire System', '495 Fire Hydrant')) {
	areaInspector = 'DANIELSBC';
	}

if (areaInspector == '' && appMatch('Building/Commercial/*/*')) {
	areaInspector = 'GARCIAAA';
	}

if (areaInspector == '' && appMatch('Building/Residential/*/*')) {
	areaInspector = 'FIERROGUZMAN';
	}

if (areaInspector == '' && appMatch('Building/*/*/*') && !appMatch('Building/3rd/*/*') && (AInfo['Type of Work'] == 'Residential' || AInfo['Type of Use'] == 'Residential' || AInfo['Type of Use'] == '130 - Residential')) {
	areaInspector = 'FIERROGUZMAN';
	}

if (areaInspector != '') {
	assignInspection(inspId,areaInspector);
	}

if (appMatch('Building/Electrical/*/*') && (AInfo['Type of Work'] == 'Residential' || AInfo['Type of Use'] == 'Residential') && matches(gisArea,'NORTHEAST','LV','COUNTY EAST','COUNTY LV')) {
	areaInspector = 'FIERROGUZMAN';
	}

if (appMatch('Building/Plumbing/*/*') && (AInfo['Type of Work'] == 'Residential' || AInfo['Type of Use'] == 'Residential') && matches(gisArea,'NORTHWEST','CENTRAL','COUNTY WEST')) {
	areaInspector = 'FanninWB';
	}

if (appMatch('Building/Plumbing/*/*') && (AInfo['Type of Work'] == 'Residential' || AInfo['Type of Use'] == 'Residential') && matches(gisArea,'NORTHEAST','COUNTY EAST','COUNTY LV')) {
	areaInspector = 'FIERROGUZMAN';
	}

if (appMatch('Building/Plumbing/*/*') && (AInfo['Type of Work'] == 'Residential' || AInfo['Type of Use'] == 'Residential') && matches(gisArea,'EAST')) {
	areaInspector = 'GARCIAAA';
	}

if (appMatch('Building/Electrical/*/*') && (AInfo['Type of Work'] == 'Residential' || AInfo['Type of Use'] == 'Residential') && matches(gisArea,'EAST')) {
	areaInspector = 'GARCIAAA';
	}
`^
ES_BLDG_AppSpecificInfoUpdateAfter^`
showDebug = false;
showMessage = false;
if (matches(currentUserID,'KHOBDAY','GUTIERREZMA','JCIPRIANO','CPARKS','MARTINEZA')) {
	showDebug = true;
	showMessage=true;
	}

if (appMatch('Building/Commercial/New/*') || appMatch('Building/Residential/New/*') && AInfo['Notify Case Manager'] == 'Yes') {
	branch('ES_WORKFLOW_CASE_FLAG_EMAIL_NOTIFICATION');
	}
`^
ES_BLDG_CHCK_INCONST^`
numRows = 0;
inConstruction = null;
if (AInfo['Flood Plain'] == 'Yes' && typeof(SITEINFORMATION) != 'object') {
	showMessage = true;
	comment('Inspection cannot be scheduled. In Construction has not been approved.');
	cancel = true;
	}

if (AInfo['Flood Plain'] == 'Yes' && typeof(SITEINFORMATION) == 'object') {
	for (eachrow in SITEINFORMATION) branch('ES_BLDG_CHCK_INCONST_LOOP');
	}

if (AInfo['Flood Plain'] == 'Yes' && (numRows == 0 || inConstruction == 'NO')) {
	showMessage = true;
	comment('Inspection cannot be scheduled. In Construction has not been approved.');
	cancel = true;
	}
`^
ES_BLDG_CHCK_INCONST_LOOP^`
siteRow = SITEINFORMATION[eachrow];
if (siteRow['Type'] == 'In Construction') {
	numRows = (numRows + 1);
	}

if (siteRow['Type'] == 'In Construction' && siteRow['Status'] != 'Approved') {
	inConstruction = 'NO';
	}
`^
ES_BLDG_CHCK_PREFLDPLNCERT^`
numRows = 0;
prelimFldPlnCert = 'NO';
finalFloodPlnCert ='NO';
if (wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['Flood Plain'] == 'Yes' && typeof(SITEINFORMATION) != 'object') {
	showMessage = true;
	comment('Cannot be Issued. Preliminary Flood Plain Cert has not been approved.');
	cancel = true;
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['Flood Plain'] == 'Yes' && typeof(SITEINFORMATION) == 'object') {
	for (eachrow in SITEINFORMATION) branch('ES_BLDG_CHCK_PREFLDPLNCERT_LOOP');
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['Flood Plain'] == 'Yes' && (numRows == 0 || prelimFldPlnCert == 'NO')) {
	showMessage = true;
	comment('Cannot be Issued. Preliminary Flood Plain Cert has not been approved.');
	cancel = true;
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['Flood Plain'] == 'Yes' && (numRows == 0 || finalFloodPlnCert  == 'NO')) {
	showMessage = true;
	comment('Cannot be Issued. Final Flood Plane Certificate has not been approved.');
	cancel = true;
	}
`^
ES_BLDG_CHCK_PREFLDPLNCERT_LOOP^`
siteRow = SITEINFORMATION[eachrow];
if (siteRow['Type'] == 'Preliminary Flood Plain Cert') {
	numRows = (numRows + 1);
	}

if (siteRow['Type'] == 'Preliminary Flood Plain Cert' && siteRow['Status'] == 'Approved') {
	prelimFldPlnCert = 'YES';
	}

if (siteRow['Type'] == 'Final Flood Plain Cert' && siteRow['Status'] == 'Approved') {
	finalFloodPlnCert  = 'YES';
	}
`^
ES_BLDG_CHECK_REFEE^`
reFee = false;
inspCode = inspType.substr(0,3);
comment('inspCode is: ' + inspCode);
if (!appMatch('Building/Irrigation/*/*') && AInfo['EPISD'] != 'Yes' && (feeBalance('FB082') > 0 || feeBalance('FB046') > 0 || feeBalance('FB105') > 0 || feeBalance('FB115') > 0 || feeBalance('FB158') > 0)) {
	reFee = true;
	}

if (appMatch('Building/Irrigation/*/*') && AInfo['EPISD'] != 'Yes' && feeBalance('FB137') > 0) {
	reFee = true;
	}

if (reFee == true && matches(inspCode,'640','630','320','220','740','915','800','902','907','420','400','940','200')) {
	showMessage = true;
	comment('This inspection cannot be scheduled. There is a balance on the record.');
	cancel = true;
	}

if (reFee == true && matches(inspCode,'640','630','320','220','740','915','800','902','907','420','400','940','200')) {
	showMessage = true;
	comment('This inspection cannot be scheduled. There is a re-inspection fee balance on the record.');
	cancel = true;
	}
`^
ES_BLDG_INSPRESULTSUBMITAFTER^`
inspCode = inspType.substr(0,3);
if (appMatch('Building/Tents/*/*') && isTaskActive('Inspection') && (checkInspectionResult('400 Fire Department Final', 'Pass') && checkInspectionResult('800 Final Building Inspection', 'Pass'))) {
	showMessage=true;
	comment('Inspections are present and have passed!');
	branchTask('Inspection','Pass','Updated via Event Script');
	}
`^
ES_BLDG_INSPSCHEDULEBEFORE^`
branch('ES_CHECK_FINAL_CERT');
if (AInfo['Expiration Date'] != null) {
	branch('COEP_CHECK_EXPDATE');
	}

branch('ES_BLDG_CHCK_INCONST');
branch('ES_BLDG_CHECK_REFEE');
if (capHasExpiredLicProf('EXPIRE') != false) {
	showMessage = true;
	comment('<font size=small><b>License is Expired:</b></font><br><br>Inspection cannot be created because the licensed professional has an expired license<br><br>');
	cancel = true;
	}
`^
ES_BLDG_RES_SQFT_ADDFEES^`
totalSqFt = 0;
if (typeof(BUILDINGINFORMATION) == 'object') {
	for (eachrow in BUILDINGINFORMATION) branch('ES_BLDG_RES_SQFT_ADDFEES_LOOP');
	}

if (totalSqFt >= 1 && totalSqFt < 1300) {
	aa.finance.editBValuatnValue(capId,'Permit',(totalSqFt * 61),'CONT');
	}

if (totalSqFt >= 1300 && totalSqFt < 2400) {
	aa.finance.editBValuatnValue(capId,'Permit',(totalSqFt * 66),'CONT');
	}

if (totalSqFt >= 2400) {
	aa.finance.editBValuatnValue(capId,'Permit',(totalSqFt * 78),'CONT');
	}

if (totalSqFt >= 1) {
	updateFee('FB028','RESNEW','STANDARD',1,'N');
	}
`^
ES_BLDG_RES_SQFT_ADDFEES_LOOP^`
sqftRow = BUILDINGINFORMATION[eachrow];
totalSqFt = totalSqFt + parseFloat(sqftRow['Total Adjusted Sq Ft']);
`^
ES_BLDG_WFTASKUPDATEAFTER^`
var CapAddress = getCapAddress(capId);
if ((appMatch('Building/3rd/*/*') || appMatch('Building/Residential/*/*') || appMatch('Building/Commercial/*/*')) && wfTask=='Completeness Check' && wfStatus=='Resubmitted' && getTaskCnt(capId, 'Completeness Check','Resubmitted') == 4) {
	addFee('FPR001', 'COMMNEW', 'STANDARD', 1,'N');
	}

if (appMatch('Building/Commercial/*/*') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Grease Trap']=='Yes') {
	email('sgalindo@epwu.org;
	Nenye@epwu.org','accela@elpasotexas.gov',('Record ' + capIDString + ' has been updated.'), ('Grease Traps are required for Business/Project: ' + capName + '.  The business address is ' + CapAddress + '.  If an EPWU Registration number was provided, the number is ' + AInfo['EPWU Registration']));
	}

if (wfTask == 'Task Assignment' && wfStatus == 'Assign Electronic Review') {
	branch('ES_BLDG_ASSIGN_NOTIFICATIONS');
	}
`^
ES_BLDG_WFTASKUPDATEBEFORE^`
if ((appMatch('Building/Mechanical/*/*') || appMatch('Building/Plumbing/*/*') || appMatch('Building/Placement/*/*')) && wfTask == 'Issue' && wfStatus == 'Issued' && balanceDue > 0) {
	showMessage = true;
	comment('There is a balance due on this record. Balance must be paid before permit can be issued.');
	cancel = true;
	}

if ((appMatch('Building/Placement/*/*')  || appMatch('Building/Temporary Placement/*/*') || appMatch('Building/Right of Way/*/*') || appMatch('Building/Retaining Walls/*/*') || appMatch('Building/Plumbing/*/*') || appMatch('Building/Electrical/NA/NA') || appMatch('Building/Mechanical/*/*')) && wfTask == 'Inspection') {
	branch('ES_BLDING_INSPECTION_OPEN_CHECK');
	}

if ((appMatch('Building/Irrigation/*/*') || appMatch('Building/Demolition/*/*'))&& wfTask == 'Issue' && wfStatus == 'Issued' && balanceDue > 0) {
	showMessage = true;
	comment('There is a balance due on this record. Balance must be paid before permit can be issued.');
	cancel = true;
	}

if (appMatch('Building/Tents/*/*') && wfTask == 'Inspection' && wfStatus == 'Passed' && (!checkInspectionResult('400 Fire Department Final', 'Pass') ||  !checkInspectionResult('800 Final Building Inspection', 'Pass'))) {
	showMessage=true;
	comment('Inspections are missing or need to be passed!');
	cancel = true;
	}

if (appMatch('Building/*/*/*')  && wfTask == 'Issue' && wfStatus == 'Issued' && balanceDue > 0 && AInfo['EPISD'] != 'Yes') {
	showMessage = true;
	comment('There is a balance due on this record. Balance must be paid before permit can be issued.');
	cancel = true;
	}

if (appMatch('Building/*/*/*')  && wfTask == 'Issue' && wfStatus == 'Issued') {
	var foundFees = loadFee();
	showMessage=true;
	comment('foundfees: '+ foundFees[1]['code']);
	}

if (appMatch('Building/*/*/*') && wfTask == 'Inspection') {
	branch('ES_BLDING_INSPECTION_OPEN_CHECK');
	}

if (appMatch('Building/Plumbing/NA/NA') && wfTask == 'Issue' && wfStatus == 'Issued' && typeof(PLUMBINGFIXTURES) != 'object') {
	showMessage = true;
	comment('Cannot Issue, need to fill ASI Table');
	cancel = true;
	}
`^
ES_BLDING_INSPECTION_OPEN_CHECK^`
showDebug = false;
showMessage = false;
if (appMatch('Building/Placement/*/*') && (checkInspectionResult('400 Fire Department Final', 'Scheduled') ||  checkInspectionResult('810 Foundation Inspection', 'Scheduled') || checkInspectionResult('815 Foundation Partial Insp', 'Scheduled') || checkInspectionResult('820 In-Progress Inspection', 'Scheduled') || checkInspectionResult('210 Landscaping Final Insp', 'Scheduled') || checkInspectionResult('200 Landscaping Inspection', 'Scheduled') || checkInspectionResult('835 Partial Structural Insp', 'Scheduled') || checkInspectionResult('915 Sidewalk/Driveway Final', 'Scheduled'))) {
	InspectionsComplete = false;
	}

if (checkInspectionResult('000 Building Investigation', 'Scheduled')||checkInspectionResult('1000 Residential Combination', 'Scheduled')||checkInspectionResult('1100 ESD Code Inspection', 'Scheduled')||checkInspectionResult('1600 Site Inspection45', 'Scheduled')||checkInspectionResult('200 Landscaping Inspection', 'Scheduled')||checkInspectionResult('205 Irrigation In-Progress', 'Scheduled')||checkInspectionResult('210 Landscaping Final Insp', 'Scheduled')||checkInspectionResult('220 Irrigation Final Insp', 'Scheduled')) {
	InspectionsComplete = false;
	}

if (checkInspectionResult('935 Storm Water Violations', 'Scheduled')||checkInspectionResult('940 Engineering Final Insp', 'Scheduled')||checkInspectionResult('950 MS4 - SWPPP Inspection', 'Scheduled')) {
	InspectionsComplete = false;
	}

if (checkInspectionResult('250 Building Investigation', 'Scheduled')||checkInspectionResult('300 Elec Temporary Service', 'Scheduled')||checkInspectionResult('301 Temp Power Pole Insp', 'Scheduled')||checkInspectionResult('305 Electrical Underground', 'Scheduled')||checkInspectionResult('310 Electrical Service Release', 'Scheduled')||checkInspectionResult('315 Electrical Service Release Inv', 'Scheduled')||checkInspectionResult('320 Electrical Final Insp', 'Scheduled')||checkInspectionResult('325 Electrical Investigation', 'Scheduled')) {
	InspectionsComplete = false;
	}

if (checkInspectionResult('330 Electrical Partial Insp', 'Scheduled')||checkInspectionResult('335 Electrical Pool Ground', 'Scheduled')||checkInspectionResult('340 Electrical Rough Insp', 'Scheduled')||checkInspectionResult('345 Electrical Slab Inspection', 'Scheduled')||checkInspectionResult('400 Fire Department Final', 'Scheduled')||checkInspectionResult('415 Fire Investigation', 'Scheduled')||checkInspectionResult('420 Fire Sprinkler Final', 'Scheduled')||checkInspectionResult('500 Audit', 'Scheduled')) {
	InspectionsComplete = false;
	}

if (checkInspectionResult('600 Mechanical Under Slab Duct', 'Scheduled')||checkInspectionResult('610 Mechanical Rough Insp', 'Scheduled')||checkInspectionResult('615 Mechanical Partial Insp', 'Scheduled')||checkInspectionResult('620 Mechanical Investigation', 'Scheduled')||checkInspectionResult('630 Mechanical Final Insp', 'Scheduled')||checkInspectionResult('640 Refrigeration Final Insp', 'Scheduled')||checkInspectionResult('700 Sewer Tap to Curb Insp', 'Scheduled')||checkInspectionResult('705 Plumbing Sewer Inspection', 'Scheduled')) {
	InspectionsComplete = false;
	}

if (checkInspectionResult('710 Plumbing Underground', 'Scheduled')||checkInspectionResult('720 Plumbing Rough-In Insp', 'Scheduled')||checkInspectionResult('725 Plumbing Top Out Insp', 'Scheduled')||checkInspectionResult('730 Plumbing Partial Insp', 'Scheduled')||checkInspectionResult('740 Plumbing Final Inspection', 'Scheduled')||checkInspectionResult('745 Plumbing Gas Inspection', 'Scheduled')||checkInspectionResult('750 Plumbing Investigation', 'Scheduled')||checkInspectionResult('755 CHP Inspection', 'Scheduled')) {
	InspectionsComplete = false;
	}

if (checkInspectionResult('755 CHP Inspection', 'Scheduled')||checkInspectionResult('800 Final Building  Inspection', 'Scheduled')||checkInspectionResult('800 Final Building Inspection', 'Scheduled')||checkInspectionResult('805 City Final Inspection', 'Scheduled')||checkInspectionResult('810 Foundation Inspection', 'Scheduled')||checkInspectionResult('815 Foundation Partial Insp', 'Scheduled')||checkInspectionResult('820 In-Progress Inspection', 'Scheduled')||checkInspectionResult('825 Insulation Inspection', 'Scheduled')) {
	InspectionsComplete = false;
	}

if (checkInspectionResult('830 Structural Inspection', 'Scheduled')||checkInspectionResult('835 Partial Structural Insp', 'Scheduled')||checkInspectionResult('840 Sheathing Inspection', 'Scheduled')||checkInspectionResult('845 Energy Inspection', 'Scheduled')||checkInspectionResult('850 Sheetrock Inspection', 'Scheduled')||checkInspectionResult('855 Retaining Wall Footing', 'Scheduled')||checkInspectionResult('860 Fire Investigation', 'Scheduled')||checkInspectionResult('900 Driveway Inspection', 'Scheduled')) {
	InspectionsComplete = false;
	}

if (checkInspectionResult('902 Driveway Final Inspection', 'Scheduled')||checkInspectionResult('905 Sidewalk Inspection', 'Scheduled')||checkInspectionResult('907 Sidewalk Final Inspection', 'Scheduled')||checkInspectionResult('910 Sidewalk/Driveway Insp', 'Scheduled')||checkInspectionResult('915 Sidewalk/Driveway Final', 'Scheduled')||checkInspectionResult('920 Site Grading Final Insp', 'Scheduled')||checkInspectionResult('925 Site Grading Inspection', 'Scheduled')||checkInspectionResult('930 Storm Water Inspection', 'Scheduled')) {
	InspectionsComplete = false;
	}

InspectionsComplete = true;
if (InspectionsComplete == false) {
	showMessage = true;
	comment('There are still pending inspections.  Please complete the inspections then return to the WorkFlowTask.');
	cancel = true;
	}

if (appMatch('Building/Temporary Placement/NA/NA') && (checkInspectionResult('800 Final Building Inspection', 'Scheduled') ||  checkInspectionResult('740 Plumbing Final Inspection', 'Scheduled') || checkInspectionResult('630 Mechanical Final Insp', 'Scheduled') || checkInspectionResult('400 Fire Department Final', 'Scheduled') || checkInspectionResult('320 Electrical Final Insp', 'Scheduled') || checkInspectionResult('500 Audit', 'Scheduled'))) {
	InspectionsComplete = false;
	}

if (appMatch('Building/Right of Way/*/*') && (checkInspectionResult('910 Sidewalk/Driveway Insp', 'Scheduled') ||  checkInspectionResult('915 Sidewalk/Driveway Final', 'Scheduled') || checkInspectionResult('800 Final Building Inspection', 'Scheduled') || checkInspectionResult('935 Storm Water Violations', 'Scheduled') || checkInspectionResult('902 Driveway Final Inspection', 'Scheduled') || checkInspectionResult('905 Sidewalk Inspection', 'Scheduled') || checkInspectionResult('900 Driveway Inspection','Scheduled') || checkInspectionResult('907 Sidewalk Final Inspection', 'Scheduled') || checkInspectionResult('930 Storm Water Inspection', 'Scheduled') || checkInspectionResult('500 Audit', 'Scheduled'))) {
	InspectionsComplete = false;
	}

if (appMatch('Building/Retaining Walls/*/*') && (checkInspectionResult('810 Foundation Inspection', 'Scheduled') ||  checkInspectionResult('815 Foundation Partial Insp', 'Scheduled') || checkInspectionResult('820 In-Progress Inspection', 'Scheduled') || checkInspectionResult('835 Partial Structural Insp', 'Scheduled') || checkInspectionResult('920 Site Grading Final Insp', 'Scheduled') || checkInspectionResult('925 Site Grading Inspection', 'Scheduled') || checkInspectionResult('830 Structural Inspection', 'Scheduled') || checkInspectionResult('800 Final Building Inspection', 'Scheduled') || checkInspectionResult('855 Retaining Wall Footing ', 'Scheduled') || checkInspectionResult('500 Audit', 'Scheduled'))) {
	InspectionsComplete = false;
	}

if (appMatch('Building/Plumbing/*/*') && (checkInspectionResult('710 Plumbing Underground', 'Scheduled') ||  checkInspectionResult('720 Plumbing Rough-In Insp', 'Scheduled') || checkInspectionResult('730 Plumbing Partial Insp', 'Scheduled') || checkInspectionResult('725 Plumbing Top Out Insp', 'Scheduled') || checkInspectionResult('705 Plumbing Sewer Inspection', 'Scheduled') || checkInspectionResult('740 Plumbing Final Inspection', 'Scheduled') || checkInspectionResult('745 Plumbing Gas Inspection', 'Scheduled') || checkInspectionResult('755 CHP Inspection', 'Scheduled') || checkInspectionResult('935 Storm Water Violations', 'Scheduled') || checkInspectionResult('930 Storm Water Inspection', 'Scheduled') ||  checkInspectionResult('700 Sewer Tap to Curb Insp', 'Scheduled') || checkInspectionResult('750 Plumbing Investigation', 'Scheduled') || checkInspectionResult('500 Audit ', 'Scheduled'))) {
	InspectionsComplete = false;
	}

if (appMatch('Building/Electrical/*/*') && (checkInspectionResult('300 Elec Temporary Service', 'Scheduled') ||  checkInspectionResult('330 Electrical Partial Insp', 'Scheduled') || checkInspectionResult('335 Electrical Pool Ground', 'Scheduled') || checkInspectionResult('300 Temp Power Pole Insp', 'Scheduled') || checkInspectionResult('345 Electrical Slab Inspection', 'Scheduled') || checkInspectionResult('935 Storm Water Violations', 'Scheduled') || checkInspectionResult('305 Electrical Underground', 'Scheduled') || checkInspectionResult('310 Electrical Service Release', 'Scheduled') || checkInspectionResult('320 Electrical Final Insp', 'Scheduled') || checkInspectionResult('325 Electrical Investigation', 'Scheduled') ||  checkInspectionResult('315 Electrical Service Release Inv', 'Scheduled') || checkInspectionResult('340 Electrical Rough Insp', 'Scheduled') || checkInspectionResult('500 Audit', 'Scheduled'))) {
	InspectionsComplete = false;
	}

if (appMatch('Building/Mechanical/*/*') && (checkInspectionResult('600 Mechanical Under Slab Duct', 'Scheduled') ||  checkInspectionResult('610 Mechanical Rough Insp', 'Scheduled') || checkInspectionResult('930 Storm Water Inspection', 'Scheduled') || checkInspectionResult('935 Storm Water Violations', 'Scheduled') || checkInspectionResult('620 Mechanical Investigation', 'Scheduled') || checkInspectionResult('935 Storm Water Violations', 'Scheduled') || checkInspectionResult('615 Mechanical Partial Insp', 'Scheduled') || checkInspectionResult('630 Mechanical Final Insp', 'Scheduled') || checkInspectionResult('500 Audit ', 'Scheduled'))) {
	InspectionsComplete = false;
	}

if (appMatch('Building/Placement/*/*') &&(checkInspectionResult('910 Sidewalk/Driveway Insp', 'Scheduled') || checkInspectionResult('920 Site Grading Final Insp', 'Scheduled')|| checkInspectionResult('925 Site Grading Inspection', 'Scheduled') || checkInspectionResult('830 Structural Inspection', 'Scheduled') || checkInspectionResult('800 Final Building Inspection', 'Scheduled') || checkInspectionResult('500 Audit ', 'Scheduled')|| checkInspectionResult('1600 Site Inspection45', 'Scheduled'))) {
	InspectionsComplete = false;
	}
`^
ES_BUILDING_ACA_EMAIL_NOTIFICATION^`
if (appMatch('Building/*/*/*')) {
	email('pardoei@elpasotexas.gov;
	martineza@elpasotexas.gov','accela@elpasotexas.gov',('TEST ACA Record Number: ' + capIDString), 'The ACA Record Number ' + capIDString + ' has been submitted');
	}

if (appMatch('Building/*/*/*')) {
	email('delacruzja@elpasotexas.gov;
	Morrison-VegaVX@elpasotexas.gov;
	ChaviraD1@elpasotexas.gov;
	SANTILLANESRA@elpasotexas.gov;
	WILCOXA@elpasotexas.gov','accela@elpasotexas.gov',('ACA Record Number: ' + capIDString), 'The Record Number ' + capIDString + ' has been submitted');
	}

if ((appMatch('Building/Residential/*/*') || appMatch('Building/Commercial/*/*'))  && (AInfo['Expedited'] == 'PBA' || AInfo['Expedited'] == 'CPR')) {
	email('LamasMX@elpasotexas.gov;
	NelighMP@elpasotexas.gov;
	EstalaAX@elpasotexas.gov;
	Readra@elpasotexas.gov;
	gibsonEK@elpasotexas.gov;
	DelaCruzJA@elpasotexas.gov','accela@elpasotexas.gov',('A new Expedited permit is submitted online, Permit Number: ' + capIDString), 'A new Expedited permit is submitted online, permit number is ' + capIDString + ' has been submitted');
	// original before added the three leading email addresses(appMatch('Building/Residential/New/*') || appMatch('Building/Commercial/New/*')) && AInfo['Expedited'] == 'PBA'  email('ledezmaja@elpasotexas.gov','accela@elpasotexas.gov',('ACA Record Number: ' + capIDString), 'The Record Number ' + capIDString + ' has been submitted');
	}
`^
ES_BUILDING_ADD_TENANTIMPROVEMENT_INSP^`
assignedInsp = 'GARCIAAA';
comment('Assigned Inspector is: ' +assignedInsp);
nextInspDate = dateAdd(null,1, 'Y');
comment('nextInspDate is: ' + nextInspDate);
inspType='290 Site Inspection';
if (appMatch('Building/Commercial/Tenant Improvement/NA')) {
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}
`^
ES_BUILDING_APPLICATIONSUBMITAFTER^`
showMessage = false;
if (appMatch('Building/Commercial/Tenant Improvement/NA')) {
	branch('ES_BUILDING_ADD_TENANTIMPROVEMENT_INSP');
	}

if (appMatch('Building/Commercial/Tenant Improvement/NA')) {
	addFee('FB015','COMMTI','STANDARD',1,'Y');
	}
`^
ES_BUILDING_FEES^`
if (appMatch('Building/Commercial/Swimming Pool-Spa/NA') && wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue' && AInfo['No. of Pool'] > 0) {
	addFee('FB016','COMMPOOL','STANDARD',AInfo['No. of Pool'],'Y');
	}

if (appMatch('Building/Placement/NA/NA') && wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue') {
	addFee('FB163','BLDGGEN','STANDARD',1,'N');
	}

if ((appMatch('Building/Residential/Swimming Pool-Spa/NA') || appMatch('Building/Retaining Walls/NA/NA')) && wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue') {
	addFee('FB039','BLDGGEN','STANDARD',1,'N');
	}

if (appMatch('Building/Irrigation/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Type of Use'] == 'Commercial') {
	branch('ES_BLDGIRR_ADDFEES');
	}

if (appMatch('Building/Siding/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FB038','BLDGGEN','STANDARD',1,'Y');
	}

if (appMatch('Building/Retaining Walls/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FB039','BLDGGEN','STANDARD',2,'N');
	}

if (appMatch('Building/Plumbing/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FB106','BLDGPLUMB','STANDARD',1,'Y');
	}

if (appMatch('Building/Electrical/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Type of Work'] == 'Elec Permit A') {
	updateFee('FB050','BLDGELEC', 'STANDARD',estValue,'N','N');
	}

if (appMatch('Building/Electrical/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Type of Work'] == 'Elec Permit B') {
	branch('ES_BLDGELEC_ADDFEES');
	}

if (appMatch('Building/Windows/NA/NA') && wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue') {
	addFee('FB038','BLDGGEN','STANDARD',1,'Y');
	}

if (appMatch('Building/Tents/NA/NA') && wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue') {
	addFee('FB004','BLDGTENT','STANDARD',(AInfo['Number of Months'] * AInfo['Sq Ft of Structure']),'Y');
	}

if (appMatch('Building/Commercial/Swimming Pool-Spa/NA') && wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue' && AInfo['No. of Spas'] > 0) {
	addFee('FB018','COMMPOOL','STANDARD',AInfo['No. of Spas'],'Y');
	}

if (appMatch('Building/Right of Way/NA/NA') && wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue' && AInfo['ROW'] == 'Sidewalk/Driveway') {
	addFee('FB045A','BLDGROW','STANDARD',1,'N');
	}

if (appMatch('Building/Temporary Amusement/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FB166','BLDGTMPAMUS','STANDARD',AInfo['No. of Rides']*AInfo['No. of Months Operating'],'N');
	}

if (appMatch('Building/3rd/Residential/*') && wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue') {
	addFee('FB167','RES3RD','STANDARD',1,'N');
	invoiceFee('FB167','STANDARD');
	}

if (appMatch('Building/Commercial/Tenant Improvement/NA') && !feeExists('PRMT') && wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue') {
	addFee('FB012','COMMTI','STANDARD',1,'N');
	}

if ((appMatch('Building/Residential/New/NA') || appMatch('Building/3rd/Residential/New')) && wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue') {
	branch('ES_BLDG_RES_SQFT_ADDFEES');
	}

if (appMatch('Building/3RD/Residentail/New') && wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue') {
	branch('ES_BLDG_RES_SQFT_ADDFEES');
	}

if (appMatch('Building/Fences/NA/NA') && wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue') {
	addFee('FB038','RES3RD','STANDARD',1,'N');
	invoiceFee('FB038','STANDARD');
	}

if (appMatch('Building/Right of Way/NA/NA') && wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue' && AInfo['ROW'] == 'Sidewalk') {
	addFee('FB045','BLDGROW','STANDARD',1,'N');
	}

if (appMatch('Building/Right of Way/NA/NA') && wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue' && AInfo['ROW'] == 'Driveway') {
	addFee('FB047','BLDGROW','STANDARD',1,'N');
	}

if (appMatch('Building/Electrical/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	branch('ES_BLDGELEC_ADDFEES');
	}

if (appMatch('Building/Mechanical/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['PROJECTDOX.CRC Directive'] != 'Yes') {
	branch('ES_BLDGMECH_ADDFEES');
	}

if (appMatch('Building/Plumbing/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['PROJECTDOX.CRC Directive'] != 'Yes' && AInfo['GENERAL.Type of Work'] != 'New Residential') {
	addFee('FB106','BLDGPLUMB','STANDARD',1,'N');
	branch('ES_BLDGPLUMB_ADDFEES');
	}

if (appMatch('Building/Reroof/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FB160','BLDGGEN','STANDARD',1,'Y');
	}

if (appMatch('Building/Demolition/NA/NA') && wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue') {
	addFee('FB161','BLDGGEN','STANDARD',1,'Y');
	}
`^
ES_BUILDING_FENCE_ACA_READY_TO_ISSUE_EMAIL^`
assignedToUser = getAssignedToStaff(capId);
var user = aa.person.getUser(assignedToUser);
userEmail = undefined;
userFirst = undefined;
userLast = undefined;
if (user.getSuccess()) {
	user = user.getOutput();
	userEmail= user.getEmail();
	userFirst = user.getFirstName();
	userLast = user.getLastName();
	showMessage=true;
	comment(userFirst + ' ' + userLast + ' ' + userEmail );
	}

conType = conArray[y].getPeople().contactType;
emailAddr = conArray[y].getPeople().email;
lastName= conArray[y].getPeople().lastName;
firstName= conArray[y].getPeople().firstName;
middleName= conArray[y].getPeople().middleName;
userObj = aa.person.getUser(firstName,middleName,lastName).getOutput();
userPhoneNumber = user.getPhoneNumber();
sender= 'accela@elpasotexas.gov';
subject = 'Your permit ' + capIdString + ' has been approved and is ready for issuance';
emailBody = 'Your permit has been approved and is ready for issuance. To complete the permitting process please log in to your ACA account to submit payment and print your permit <BR><BR> To navigate to our website please visit http://epermit.elpasotexas.gov/citizenaccess <BR><BR> If you have any questions Please contact your Case Manager below: ';
reviewerInfo =  ('<BR>'+ userFirst + ' ' + userLast + '<BR>' + userEmail + '<BR>' + userPhoneNumber);
if (emailAddr != undefined && (conType =='Applicant' || conType =='APPLICANT')) {
	email(emailAddr, sender, subject, (emailBody + '<BR>' + reviewerInfo + '<BR>'));
	}

showMessage=true;
comment(emailAddr + ', ' + lastName + ', ' + firstName + ' ' +  userPhoneNumber + ' ' + conType );
`^
ES_BUILDING_PLUMBING_EMAIL_ONEGAS_NOTIFICATION^`
addrResult = aa.address.getAddressByCapId(myCap);
addrArray = new Array();
addrArray = addrResult.getOutput();
capStreetNumber = addrArray[0].getHouseNumberStart();
capStreetName = addrArray[0].getStreetName();
email('RVALDEZ@onegas.com;
carolyn.sanford@onegas.com;
julie.villarreal@onegas.com;
slimgas-austinmetro@onegas.com;
slimgas-metroelpaso@onegas.com','accela@elpasotexas.gov',('The ' + inspType +  ' has passed for permit # ' + capIDString + ' at address ' + capStreetNumber + ' ' + capStreetName ), ('The ' + inspType + ' has passed for permit # ' + capIDString + ' at address ' + capStreetNumber + ' ' + capStreetName ));
`^
ES_CASE_MANAGER_EMAIL_NOTIFICATION^`
sender= 'accela@elpasotexas.gov';
if (appMatch('Planning/Zoning/Special Permit/*')) {
	subject = ('Case Manager;
	Planing Zoning Record ' + capIDString);
	emailBody = ('Notification for Case Manager: <br/>The Planning Zoning Record Number ' + capIDString + ' has been submitted'+ '<BR><BR>' +'This is an Expedited review for a Personal Wireless Service Facility Special Permit.  The expedited review is Required so that the City of El Paso will be in compliance with new FCC Regulations governing the expedited processing time on these types of facilities. Please review within 5 days of review of the distribution.');
	}

if (appMatch('Planning/Zoning/PWSF Communications/*')) {
	subject = ('Case Manager;
	Planing Zoning Record ' + capIDString);
	emailBody = ('Notification for Case Manager: <br/>The Planning Zoning Record Number ' + capIDString + ' has been submitted'+ '<BR><BR>' +'This item needs to be fast tracked in order to meet FCC regulations on Personal Wireless Service facilities.');
	}

assignedToUser = getAssignedToStaff();
if(assignedToUser != null) emailAddrs = aa.person.getUser(assignedToUser).getOutput().getEmail();
if ((emailAddrs != undefined && emailAddrs != '' && emailAddrs != null)) {
	email(emailAddrs,sender,subject,emailBody);
	}
`^
ES_CHECK_BALANCE^`
pCapID = false;
sibCapID = false;
childCapID = null;
pCapID = getParent();
comment('pCapID is : ' + pCapID);
if (pCapID != false) {
	pCapObj = aa.cap.getCap(pCapID).getOutput();
	pCapDetailObjResult = aa.cap.getCapDetail(pCapID);
	pCapDetail = pCapDetailObjResult.getOutput();
	pBalanceDue = pCapDetail.getBalance();
	pCapIDString = pCapID.getCustomID();
	}

if (pCapID != false && pBalanceDue > 0) {
	showMessage = true;
	comment('Inspection cannot be scheduled. There is a balance on parent application (' + pCapIDString + ') of $' + pBalanceDue + '.');
	cancel = true;
	}

if (pCapID != false) {
	sibCapID = getChildren('*/*/*/*',pCapID,capId);
	}

if (sibCapID != false && typeof(sibCapID) == 'object') {
	for (eachchild in sibCapID) branch('ES_CHECK_SIBBALANCE_LOOP');
	}

if (balanceDue > 0) {
	showMessage = true;
	comment('Inspection cannot be scheduled. There is a balance on the application of $' + balanceDue + '.');
	cancel = true;
	}

childCapID = getChildren('*/*/*/*');
if (childCapID != null && typeof(childCapID) == 'object') {
	for (eachchild in childCapID) branch('ES_CHECK_BALANCE_LOOP');
	}
`^
ES_CHECK_BALANCE_LOOP^`
eachchildCapID = childCapID[eachchild];
if (eachchildCapID != false) {
	childCapObj = aa.cap.getCap(eachchildCapID).getOutput();
	childCapDetailObjResult = aa.cap.getCapDetail(eachchildCapID);
	childCapDetail = childCapDetailObjResult.getOutput();
	childBalanceDue = childCapDetail.getBalance();
	childCapIDString = eachchildCapID.getCustomID();
	}

if (eachchildCapID != false && childBalanceDue > 0) {
	showMessage = true;
	comment('Inspection cannot be scheduled. There is a balance on child application (' + childCapIDString + ') of $' + childBalanceDue + '.');
	cancel = true;
	}
`^
ES_CHECK_FINAL_CERT^`
numRows = 0;
approvedFldPlnCert = null;
if (inspType == '800 Final Building Inspection' && AInfo['Flood Plain'] == 'Yes' && typeof(SITEINFORMATION) != 'object') {
	showMessage = true;
	comment('Inspection cannot be scheduled. Final Flood Plain Cert has not been submitted.');
	cancel = true;
	}

if (inspType == '800 Final Building Inspection' && AInfo['Flood Plain'] == 'Yes' && typeof(SITEINFORMATION) == 'object') {
	for (eachrow in SITEINFORMATION) branch('ES_CHECK_FINAL_CERT_LOOP');
	}

if (inspType == '800 Final Building Inspection' && AInfo['Flood Plain'] == 'Yes' && (numRows == 0 || approvedFldPlnCert == 'NO')) {
	showMessage = true;
	comment('Inspection cannot be scheduled. Final Flood Plain Cert has not been submitted.');
	cancel = true;
	}
`^
ES_CHECK_FINAL_CERT_LOOP^`
siteRow = SITEINFORMATION[eachrow];
if (siteRow['Type'] == 'Final Flood Plain Cert') {
	numRows = (numRows + 1);
	}

if (siteRow['Type'] == 'Final Flood Plain Cert' && siteRow['Status'] != 'Approved') {
	approvedFldPlnCert = 'NO';
	}
`^
ES_CHECK_LIC_PROF^`
if ((wfTask == 'Issue' && wfStatus == 'Issued' || wfTask == 'Inspection') && capHasExpiredLicProf('EXPIRE') != false) {
	showMessage = true;
	comment('Permit cannot be issued because the licensed professional has an expired license.');
	cancel = true;
	}
`^
ES_CHECK_SIBBALANCE_LOOP^`
eachsibCapID = sibCapID[eachchild];
if (eachsibCapID != false) {
	sibCapObj = aa.cap.getCap(eachsibCapID).getOutput();
	sibCapDetailObjResult = aa.cap.getCapDetail(eachsibCapID);
	sibCapDetail = sibCapDetailObjResult.getOutput();
	sibBalanceDue = sibCapDetail.getBalance();
	sibCapIDString = eachsibCapID.getCustomID();
	}

if (eachsibCapID != false && sibBalanceDue > 0) {
	showMessage = true;
	comment('Inspection cannot be scheduled. There is a balance on sibling application (' + sibCapIDString + ') of $' + sibBalanceDue + '.');
	cancel = true;
	}
`^
ES_CHECK_SIB_APP_SUB_LOOP^`
eachsibCapId = sibCapId[eachchild];
var tempCapId = capId;
capId = eachsibCapId;
if (!isTaskStatus('Application Submittal', 'Completed')) {
	showMessage = true;
	comment('Cannot complete task until child application submittal has been completed.');
	cancel = true;
	}

capId = tempCapId;
`^
ES_CHECK_SIB_WF_LOOP^`
eachsibCapID = sibCapID[eachchild];
sibTasksComplete = checkSiblingTasksComplete(eachsibCapID);
if (sibTasksComplete == false) {
	numCapsIncomplete = 1;
	comment('Num caps incomplete: ' + numCapsIncomplete);
	}

totalCapsIncomplete = totalCapsIncomplete + parseFloat(numCapsIncomplete);
comment('total caps incomplete: ' + totalCapsIncomplete);
`^
ES_CHECK_SUB_STATUS^`
parentSubStatus = null;
totalPulledPermits = 0;
pCapStatus = null;
maxSubLots = 0;
subLots = 0;
numPulledPermits = 0;
if (pCapID != false && pCapStatus != 'Recorded' && pAppTypeString == 'Planning/Subdivision/Subdivision/*' && totalPulledPermits >= maxSubLots) {
	showMessage = true;
	comment('There are already the max allowed number of building permits active on this subdivision. Cannot advance workflow until parent subdivision status is updated or mylar is recorded.');
	cancel = true;
	}

pCapID = getParent();
comment('Parent CAP is: ' + pCapID);
if (pCapID != false) {
	pCapObj = aa.cap.getCap(pCapID).getOutput();
	pCapStatus = pCapObj.getCapStatus();
	pAppTypeResult = pCapObj.getCapType();
	pAppTypeString = pAppTypeResult.toString();
	comment('parent app type is: ' + pAppTypeString);
	comment('parent cap status is: ' + pCapStatus);
	}

if (pCapID != false && pCapStatus != 'Recorded' && pAppTypeString == 'Planning/Subdivision/Subdivision/*') {
	parentSubStatus = getAppSpecific('Status',pCapID);
	subLots = getAppSpecific('Total No. of Lots',pCapID);
	}

if (pCapID != false && pCapStatus != 'Recorded' && pAppTypeString == 'Planning/Subdivision/Subdivision/*' && parentSubStatus == 'Condition A') {
	maxSubLots = parseInt(.50 * subLots);
	comment('Max Num of Lots is: ' + maxSubLots);
	}

if (pCapID != false && pCapStatus != 'Recorded' && pAppTypeString == 'Planning/Subdivision/Subdivision/*' && parentSubStatus == 'Condition B') {
	maxSubLots = parseInt(subLots);
	comment('Max Num of Lots is: ' + maxSubLots);
	}

if (pCapID != false && pCapStatus != 'Recorded' && pAppTypeString == 'Planning/Subdivision/Subdivision/*' && parentSubStatus == 'Unconditional') {
	maxSubLots = parseInt(.25 * subLots);
	comment('Max Num of Lots is: ' + maxSubLots);
	}

if (pCapID != false && pCapStatus != 'Recorded' && pAppTypeString == 'Planning/Subdivision/Subdivision/*' && parentSubStatus != null) {
	sibCapID = getChildren('Building/*/*/*',pCapID,capId);
	}

if (pCapID != false && pCapStatus != 'Recorded' && pAppTypeString == 'Planning/Subdivision/Subdivision/*' && sibCapID != null && typeof(sibCapID) == 'object') {
	for (eachchild in sibCapID) branch('ES_CHECK_SUB_STATUS_LOOP');
	}
`^
ES_CHECK_SUB_STATUS_LOOP^`
eachsibCapID = sibCapID[eachchild];
numPulledPermits = 0;
if (eachsibCapID != false) {
	eachsibCapObj = aa.cap.getCap(eachsibCapID).getOutput();
	sibCapStatus = eachsibCapObj.getCapStatus();
	sibAppTypeResult = eachsibCapObj.getCapType();
	sibAppTypeString = sibAppTypeResult.toString();
	comment('Sib CAP status is: ' + sibCapStatus);
	}

if (sibCapStatus != 'Open' && sibCapStatus != null) {
	numPulledPermits = 1;
	comment('numPulledPermits is: ' + numPulledPermits);
	}

totalPulledPermits = totalPulledPermits + parseFloat(numPulledPermits);
comment('totalPulledPermits is: ' + totalPulledPermits);
`^
ES_CITY_ApplicationSubmitAfter^`
if (AInfo['Do you need Parking Meters outside the event to bagged?']  == 'Yes') {
	comment('must add fee');
	addFee('FB0200', 'CITYSUPER', 'STANDARD',1, 'Y');
	}

email('CamarilloMX@elpasotexas.gov', 'accela@elpasotexas.gov', ('Record Number: ' + capIDString ), 'A request for a Special Events Permit has been submitted to the City of El Paso.  Please review the documents in the record number '+ capIDString+' at https://avprodvmext.elpasotexas.gov  Contact the City Development Department Special Events Coordinator at 915-212-1506 for any questions regarding the request.');
email('martineza@elpasotexas.gov;
NunezR@elpasotexas.gov', 'accela@elpasotexas.gov', ('Record Number: ' + capIDString ), 'A request for a Special Events Permit has been submitted to the City of El Paso.  Please review the documents in the record number '+ capIDString+' at https://avtestvmext.elpasotexas.gov  Contact the City Development Department Special Events Coordinator at 915-212-1506 for any questions regarding the request.');
`^
ES_CITY_FDInspection^`
nextInspDate = dateAdd(null,1);
FDInsp = 'false';
if (AInfo['Will the event feature or use compressed gas? '] == 'Yes') {
	FDInsp = 'true';
	}

if (AInfo['Type of Flame?'] == 'Yes') {
	FDInsp = 'true';
	}

if (AInfo['Will the event feature or utilize fireworks?'] == 'Yes') {
	FDInsp = 'true';
	}

if (AInfo['Will the event feature or utilize pyrotechnics?'] == 'Yes') {
	FDInsp = 'true';
	}

if (AInfo['Will Restaurants, Bars or Nightclubs with in the event area participate?'] == 'Yes') {
	FDInsp = 'true';
	}

comment('FDInsp is : ' + FDInsp);
if (FDInsp == 'true') {
	scheduleInspectDate('City Event FD Inspection', nextInspDate, 'ARRIOLAOA');
	}

if (AInfo['Fire Guard/Watch Required?'] == 'Yes') {
	FDInsp = 'true';
	}

if (AInfo['For Use Permit Submittals Required  '] == 'Yes') {
	FDInsp = 'true';
	}

if (AInfo['Training Required? '] == 'Yes') {
	FDInsp = 'true';
	}

if (AInfo['Open Burning?'] == 'Yes') {
	FDInsp = 'true';
	}

if (AInfo['If Training is Yes, then the following will be required:  '] == 'Yes') {
	FDInsp = 'true';
	}

if (AInfo['Will temporary fences or barriers be erected?  '] == 'Yes') {
	FDInsp = 'true';
	}

if (AInfo['Will temporary structures (tents, canopies, etc) be erected?  '] == 'Yes') {
	FDInsp = 'true';
	}
`^
ES_CITY_FEES^`
if (AInfo['Training Required?'] == 'Yes') {
	addFee('FP001', 'CITYSUPER', 'STANDARD',1, 'Y');
	}

if (AInfo['Will temporary structures (tents, canopies, etc) be erected?'] == 'Yes') {
	addFee('FL059', 'CITYSUPER', 'STANDARD',1, 'Y');
	}

if (AInfo['Open Burning?']== 'Yes') {
	addFee('FL049', 'CITYSUPER', 'STANDARD',1, 'Y');
	}

if (AInfo['Will the event feature or use compressed gas?'] == 'Yes') {
	addFee('FL032', 'CITYSUPER', 'STANDARD',1, 'Y');
	}

if (AInfo['Will the event feature or utilize pyrotechnics?'] == 'Yes') {
	addFee('FL035', 'CITYSUPER', 'STANDARD',1, 'Y');
	}

if (AInfo['Will the event feature or utilize fireworks?'] == 'Yes') {
	addFee('FL035', 'CITYSUPER', 'STANDARD',1, 'Y');
	}

if (AInfo['Fire Guard/Watch Required?'] == 'Yes') {
	addFee('FW001', 'CITYSUPER', 'STANDARD',1, 'Y');
	}

if (AInfo['For Use Permit Required?'] == 'Yes') {
	addFee('FL038', 'CITYSUPER', 'STANDARD',1, 'Y');
	}

if (AInfo['Do you need Parking Meters within the event to bagged?'] == 'Yes') {
	addFee('FL038', 'CITYSUPER', 'STANDARD',1, 'Y');
	}
`^
ES_CITY_NOTIFICATIONS^`
if (wfTask == 'Task Assignment' && wfStatus == 'Completed' && isTaskActive('Fire Review')) {
	email('martineza@elpasotexas.gov', 'accela@elpasotexas.gov', 'Task Fire Review is Active', ' Please review task Fire Review of Record Number '+capIDString);
	}

if (wfTask == 'Task Assignment' && wfStatus == 'Completed' && isTaskActive('ADA Review')) {
	email('martineza@elpasotexas.gov', 'accela@elpasotexas.gov', 'Task ADA Review is Active', ' Please review task ADA Review of Record Number '+capIDString);
	}

if (wfTask == 'Task Assignment' && wfStatus == 'Completed' && isTaskActive('Finance Review')) {
	email('martineza@elpasotexas.gov', 'accela@elpasotexas.gov', 'Task Finance Review is Active', ' Please review task Finance Review of Record Number '+capIDString);
	}

if (wfTask == 'Task Assignment' && wfStatus == 'Completed' && isTaskActive('Animal Services Review')) {
	email('martineza@elpasotexas.gov', 'accela@elpasotexas.gov', 'Task Animal Services Review is Active', ' Please review task Animal Services Review of Record Number '+capIDString);
	}

if (wfTask == 'Task Assignment' && wfStatus == 'Completed' && isTaskActive('Information Technology Review')) {
	email('martineza@elpasotexas.gov;
	escobedoga@elpasotexas.gov;
	munozvj@elpasotexas.gov', 'accela@elpasotexas.gov', 'Task Information Technology Review is Active', ' Please review task Information Technology Review of Record Number '+capIDString);
	}

if (wfTask == 'Task Assignment' && wfStatus == 'Completed' && isTaskActive('International Bridges')) {
	email('martineza@elpasotexas.gov', 'accela@elpasotexas.gov', 'Task International Bridges is Active', ' Please review task International Bridgesof Record Number '+capIDString);
	}

if (isTaskActive('Animal Services Review')) {
	email('martineza@elpasotexas.gov', 'accela@elpasotexas.gov', 'Task Animal Services Review is Active', ' Please review task Animal Services Review of Record Number '+capIDString);
	}

if (isTaskActive('Animal Services Review')) {
	email('martineza@elpasotexas.gov', 'accela@elpasotexas.gov', 'Task Animal Services Review is Active', ' Please review task Animal Services Review of Record Number '+capIDString);
	}

if (wfTask == 'Task Assignment' && wfStatus == 'Completed' && isTaskActive('Parks Review')) {
	email('martineza@elpasotexas.gov', 'accela@elpasotexas.gov', 'Task Parks Review is Active', ' Please review task Parks Review of Record Number '+capIDString);
	}

if (wfTask == 'Task Assignment' && wfStatus == 'Completed' && isTaskActive('EPDot Review')) {
	email('martineza@elpasotexas.gov', 'accela@elpasotexas.gov', 'Task EPDot Review is Active', ' Please review task EPDot Review of Record Number '+capIDString);
	}

if (wfTask == 'Task Assignment' && wfStatus == 'Completed' && isTaskActive('Police Review')) {
	email('martineza@elpasotexas.gov', 'accela@elpasotexas.gov', 'Task Police Review is Active', ' Please review task Police Review of Record Number '+capIDString);
	}

if (wfTask == 'Task Assignment' && wfStatus == 'Completed' && isTaskActive('ESD Review')) {
	email('martineza@elpasotexas.gov', 'accela@elpasotexas.gov', 'Task ESD Review is Active', ' Please review task ESD Review of Record Number '+capIDString);
	}

if (wfTask == 'Task Assignment' && wfStatus == 'Completed' && isTaskActive('International Bridges Review')) {
	email('martineza@elpasotexas.gov', 'accela@elpasotexas.gov', 'Task International Bridges Review is Active', ' Please review task International Bridges Review of Record Number '+capIDString);
	}

if (wfTask == 'Task Assignment' && wfStatus == 'Completed' && isTaskActive('Sun Metro')) {
	email('martineza@elpasotexas.gov', 'accela@elpasotexas.gov', 'Task Sun Metro is Active', ' Please review task Sun Metro of Record Number '+capIDString);
	}

if (wfTask == 'Task Assignment' && wfStatus == 'Completed' && isTaskActive('CVB')) {
	email('martineza@elpasotexas.gov', 'accela@elpasotexas.gov', 'Task CVB is Active', ' Please review task CVB of Record Number '+capIDString);
	}

if (wfTask == 'Task Assignment' && wfStatus == 'Completed' && isTaskActive('TxDot')) {
	email('martineza@elpasotexas.gov', 'accela@elpasotexas.gov', 'Task TxDot is Active', ' Please review task TxDot of Record Number '+capIDString);
	}
`^
ES_CITY_ScheduleInspection^`
nextInspDate = dateAdd(null,1);
if (AInfo['Building, Ele, Plm and Mech Review and Inspection Required'] == 'Yes') {
	scheduleInspectDate('Building Event Inspection',nextInspDate, 'ROTHRE';
	}

scheduleInspectDate('City Event Code Inspection',nextInspDate,'CAHALANSM');
branch('ES_CITY_FDInspection');
`^
ES_CITY_WFTASKUPDATEAFTER^`
if (wfTask == 'Fire Review' && wfStatus == 'Approved') {
	comment('im at line 01 of  ES_CITY_WFTASKUPDATEAFTER');
	branch('ES_CITY_FEES');
	}

if (wfTask == 'Issue' && wfStatus == 'Issue') {
	branch('ES_CITY_ScheduleInspection');
	}

if (AInfo['Traffic Control End Date'] != '') {
	comment ('this is trafic control End Date:  '  + AInfo['Traffic Control End Date']);
	}

comment ('this is event start date: '  + AInfo['Event Start Date']);
comment ('this is event end date: '  + AInfo['Event End Date']);
if (wfTask == 'Issue' && wfStatus == 'Issue') {
	editAppSpecific('Expiration Date', dateAdd(AInfo['Traffic Control End Date'], 1));
	comment(dateAdd(AInfo['Traffic Control End Date'], 1));
	}

if (wfTask == 'Building Review' && wfStatus == 'Approved' && AInfo['Building, Ele, Plm and Mech Review and Inspection Required'] == 'Yes') {
	addFee('FB038', 'CITYSUPER', 'STANDARD',1, 'Y');
	}

branch('ES_CITY_NOTIFICATIONS');
`^
ES_CITY_WFTASKUPDATEBEFORE^`
if (wfTask == 'Issue' && wfStatus == 'Issue' && balanceDue > 0 && AInfo['DMD Event?'] == 'No') {
	showMessage = true;
	comment('There is a balance due on this record. Balance must be paid before permit can be issued.');
	cancel = true;
	}
`^
ES_COMP_WORKFLOW_CASE_MGR_EMAIL_NOTIFICATION^`
sender= 'accela@elpasotexas.gov';
subject = 'Case Manager,  Record ' + capIDString  + ' has all Reviews completed.';
emailBody = 'Notification for Case Manager. All reviews are completed,Workflow Task Completeness Check is light up and ready to use, Thank you.';
assignedToUser = getAssignedToStaff();
if(assignedToUser != null) emailAddrs = aa.person.getUser(assignedToUser).getOutput().getEmail();
if ((emailAddrs != undefined && emailAddrs != '' && emailAddrs != null)) {
	email(emailAddrs, sender, subject,emailBody);
	}
`^
ES_COUNT_SQFT^`
totalSqFt = 0;
if (typeof(BUILDINGINFORMATION) == 'object') {
	for (eachrow in BUILDINGINFORMATION) branch('ES_COUNT_SQFT_LOOP');
	}

if (totalSqFt >= 2500 && isTaskStatus('Electrical Review','Failed')) {
	showMessage = true;
	comment('The workflow task cannot be updated because an Electrical Review is required when the building sq ft >= 2500 sq ft.');
	cancel = true;
	}
`^
ES_COUNT_SQFT_LOOP^`
sqftRow = BUILDINGINFORMATION[eachrow];
totalSqFt = totalSqFt + parseFloat(sqftRow['1st Floor']) + parseFloat(sqftRow['2nd Floor']) + parseFloat(sqftRow['3rd Floor']);
if (totalSqFt > 0) {
	comment('The total square footage is:' + totalSqFt);
	}
`^
ES_CREATE_AEAP_CHILD^`
var desc = workDescGet(capId);
if (AInfo['Environmental Complaints'] == 'Dead Animal Pick-up') {
	vApp = createChild('AMS','ESD','Dead Animal Pick Up','NA', capIDString);
	copyOwner(capId,vApp);
	updateWorkDesc(desc, vApp);
	copyASIFields(capId,vApp, 'Assignments');
	assignTask('Work Order Submittal','currentUserID');
	}

if (AInfo['Environmental Complaints'] == 'Dead Animal Pick-up') {
	closeTask('Request', 'Closed');
	closeTask('Close', 'Closed', 'Closed by ES_CREATE_AEAP_CHILD');
	updateAppStatus('Closed', 'Closed by ES_CREATE_AEAP_CHILD');
	}

if (AInfo['Environmental Complaints'] == 'Dead Animal Pick-up' && AInfo['Personal Pet'] == 'Yes') {
	cCapId = childGetByCapType('AMS/ESD/Dead Animal Pick Up/NA',capId);
	assignTaskToChildRecord('Work Order Submittal','HERNANDEZMX',cCapId);
	}

if (AInfo['Environmental Complaints'] == 'Dead Animal Pick-up' && AInfo['Personal Pet'] == 'No') {
	cCapId = childGetByCapType('AMS/ESD/Dead Animal Pick Up/NA',capId);
	updateTaskOfChildRecord('Work Order Submittal','Completed','Updated By Script','Updated by Script',cCapId);
	}
`^
ES_CREATE_AESP_CHILD^`
var desc = workDescGet(capId);
if (AInfo['Environmental Complaints'] == 'Special/Bulk Pick-ups') {
	vApp = createChild('AMS','ESD','Special and Bulk Pick Up','NA', capIDString);
	copyOwner(capId,vApp);
	updateWorkDesc(desc, vApp);
	copyASIFields(capId,vApp,'Assignments');
	}

if (AInfo['Environmental Complaints'] == 'Special/Bulk Pick-ups') {
	closeTask('Request', 'Closed');
	closeTask('Close', 'Closed', 'Closed by ES_CREATE_AESP_CHILD');
	updateAppStatus('Closed', 'Closed by ES_CREATE_AESP_CHILD');
	}

if (AInfo['Environmental Complaints'] == 'Special/Bulk Pick-ups') {
	cCapId = childGetByCapType('AMS/ESD/Special and Bulk Pick Up/NA',capId);
	assignTaskToChildRecord('Work Order Submittal','LUISA.E.BUSTAMANTE',cCapId);
	}
`^
ES_CREATE_CHILD_EPCDM^`
vApp = createChild('Environmental','Permits','CDM','NA', capIDString);
showMessage=false;
showDebug=false;
cCapId = childGetByCapType('Environmental/Permits/CDM/NA',capId);
comment('cCapId is: ' + cCapId);
assignTaskToChildRecord('Application Submittal','SALCIDOFX',cCapId);
`^
ES_CREATE_TRADE_CHILD_RECORDS^`
childElectrical = getChildren('Building/Electrical/NA/NA');
childMech = getChildren('Building/Mechanical/NA/NA');
childPlum = getChildren('Building/Plumbing/NA/NA');
child3Elec = getChildren('Building/3rd/Electrical/NA');
child3Mech = getChildren('Building/3rd/Mechanical/NA');
child3Plum = getChildren('Building/3rd/Plumbing/NA');
permitFeeAmount = 0;
tradeFeeAmount  = 0;
techAmount = 0;
childCapId = null;
permitFeeAmount = feeAmount('FB028','INVOICED');
tradeFeeAmount = feeAmount('FB028A','INVOICED');
techAmount = (permitFeeAmount + tradeFeeAmount);
logDebug(techAmount = (permitFeeAmount + tradeFeeAmount));
updateFee('TF001A','RESNEW','STANDARD',techAmount,'Y');
if (appTypeString == 'Building/Residential/New/NA'  && childElectrical == null) {
	createChild('Building','Electrical','NA','NA', cap.getSpecialText());
	childCapId = childGetByCapType('Building/Electrical/NA/NA');
	copyOwner(capId, childCapId);
	branch('ES_ADD_TRADE_ELECTRICAL_FEES');
	}

if (appTypeString == 'Building/Residential/New/NA' && childMech == null) {
	createChild('Building','Mechanical','NA','NA',  cap.getSpecialText());
	childCapId = childGetByCapType('Building/Mechanical/NA/NA');
	copyOwner(capId, childCapId);
	branch('ES_ADD_TRADE_MECHANICAL_FEES');
	}

if (appTypeString == 'Building/Residential/New/NA' && childPlum == null) {
	createChild('Building','Plumbing','NA','NA',  cap.getSpecialText());
	childCapId = childGetByCapType('Building/Plumbing/NA/NA');
	copyOwner(capId, childCapId);
	branch('ES_ADD_TRADE_PLUMBING_FEES');
	}

if (appTypeString == 'Building/3rd/Residential/New' && child3Elec == null) {
	createChild('Building','3rd','Electrical','NA',  cap.getSpecialText());
	childCapId = childGetByCapType('Building/3rd/Electrical/NA');
	copyOwner(capId, childCapId);
	branch('ES_ADD_3RD_TRADE_ELECTRICAL_FEES');
	}

if (appTypeString == 'Building/3rd/Residential/New' && child3Mech == null) {
	createChild('Building','3rd','Mechanical','NA',  cap.getSpecialText());
	childCapId = childGetByCapType('Building/3rd/Mechanical/NA');
	copyOwner(capId, childCapId);
	branch('ES_ADD_3RD_TRADE_MECHANICAL_FEES');
	}

if (appTypeString == 'Building/3rd/Residential/New' && child3Plum == null) {
	createChild('Building','3rd','Plumbing','NA',  cap.getSpecialText());
	childCapId = childGetByCapType('Building/Plumbing/NA/NA');
	copyOwner(capId, childCapId);
	branch('ES_ADD_3RD_TRADE_PLUMBING_FEES');
	}
`^
ES_ECONOMIC_INCENTIVES_GET_KEYDATE^`
var x = 0;
var theDate = KEYDATES[x]['Required Date'];
if ((theDate != null || theDate != '')) {
	editAppSpecific('Key Date',dateAdd(theDate,0));
	showMessage=true;
	comment('dates ' + theDate);
	}
`^
ES_EMAIL_APPLICANT_WORKFLOW_COMMENTS_GROUPED^`
var emailBody = EmailGroupedComments(capId);
assignedToUser = getAssignedToStaff(capId);
comment(emailBody);
var user = aa.person.getUser(assignedToUser);
userEmail = undefined;
userFirst = undefined;
userLast = undefined;
if (user.getSuccess()) {
	user = user.getOutput();
	userEmail= user.getEmail();
	userFirst = user.getFirstName();
	userLast = user.getLastName();
	showMessage=true;
	comment(userFirst + ' ' + userLast + ' ' + userEmail );
	}

conType = conArray[y].getPeople().contactType;
emailAddr = conArray[y].getPeople().email;
lastName= conArray[y].getPeople().lastName;
firstName= conArray[y].getPeople().firstName;
middleName= conArray[y].getPeople().middleName;
if (emailAddr != undefined && (conType == 'Applicant' || conType == 'APPLICANT')) {
	email('patrickc@elpasotexas.gov', 'accela@accela.com', 'TEST GROUP REVIEW COMMENTS', ('<b>Below are the results and comments for this Document review </b>' + '<BR>' + emailBody));
	}

showMessage=true;
comment(emailAddr + ', ' + lastName + ', ' + firstName + '<BR> ' +  ('<b>Below are the results and comments for this Document review </b>' + '<BR>' + emailBody) );
`^
ES_ENFORCEMENT_ASSIGN_1115INVESTIGATION_INSP^`
assignedInsp = 'HARRELLKD';
comment('Assigned Inspector is: ' +assignedInsp);
nextInspDate = dateAdd(null,1);
comment('nextInspDate is: ' + nextInspDate);
inspType='1115 Investigation';
scheduleInspectDate(inspType,nextInspDate,assignedInsp);
`^
ES_ENFORCEMENT_COO^`
if (appMatch('Enforcement/Fire Code Compliance/NA/NA')) {
	var newChild = createChild('Building','Existing Building C of O','NA','NA','Child of record ID ' + capIDString);
	}

if (appMatch('Licenses/Fire/NA/NA')) {
	var newChild = createChild('Building','Existing Building C of O','NA','NA','Child of record ID ' + capIDString);
	}

var tempCapId = capId;
capId = newChild;
assignTask('Application Submittal','GARCIAAA');
var childIdString = capId.getCustomID();
var subject = ('ACCELA RecordID: ' + childIdString);
var emBody = ('Record Id. '+childIdString + ' has been created and assigned to you. To access this record please log into Accela website. Thanks.');
email('GarciaAA@elpasotexas.gov','accela@elpasotexas.gov',subject,emBody);
`^
ES_ENFORCEMENT_EMAIL_PET_RESULTS^`
var subject = ('Inspection Result for Record ID ' + capIDString + '. ');
var emBody = ('The Inspection : ' + inspType + ' result is: ' + inspResult + ' for Record ID: ' + capIDString + '.');
if (inspType == '1145 Pet Claim Notice') {
	email('pellegrinisx@elpasotexas.gov, karischmx@elpasotexas.gov, settlebj@elpasotexas.gov, sanchezka@elpasotexas.gov','accela@elpasotexas.gov',subject,emBody);
	}
`^
ES_ENFORCEMENT_INSPRESULTSUBMITAFTER^`
if (appMatch('Enforcement/Food Inspections Complaints/NA/NA') && inspType == 'Investigation' && inspResult == 'No Violations' && isTaskActive('Investigation')) {
	branchTask('Investigation','No Violations','Updated vis ES_HEALTH_INSPRESULTSUBMITAFTER from the Investigation inspection with a result of '' + inspResult + '.'');
	}

if (appMatch('Enforcement/Environmental Complaints/NA/NA') && inspType == '1120 Site Inspection' && inspResult == 'Pending' && isTaskActive('Investigation')) {
	updateTask('Investigation','Pending','Updated via ES_ENFORCEMENT_INSPRESULTSUBMITAFTER from the Investigation inspection with a result of '' + inspResult + '.'');
	activateTask('Investigation');
	updateAppStatus('Pending','Status set by batch script');
	}

if (appMatch('Enforcement/Environmental Complaints/NA/NA') && inspType == '1120 Site Inspection' && inspResult == 'Pending Writ' && isTaskActive('Investigation')) {
	updateTask('Investigation','Pending Writ','Updated via ES_ENFORCEMENT_INSPRESULTSUBMITAFTER from the Investigation inspection with a result of '' + inspResult + '.'');
	activateTask('Investigation');
	updateAppStatus('Pending Writ','Status set by batch script');
	comment('im at pending writ');
	}

if (appMatch('Enforcement/Environmental Complaints/NA/NA') && inspType == '1120 Site Inspection' && inspResult == 'Alley Inspection' && isTaskActive('Investigation')) {
	updateTask('Investigation','Alley Inspection','Updated via ES_ENFORCEMENT_INSPRESULTSUBMITAFTER from the Investigation inspection with a result of '' + inspResult + '.'');
	closeTask('Close','Closed','Closed by Script after passing 1120 Site Inspection',' ');
	deactivateTask('Investigation');
	updateAppStatus('Cleaned','Status set by batch script');
	}

if (appMatch('Enforcement/Food Inspections Complaints/NA/NA') && inspType == 'Investigation' && inspResult == 'Violations' && isTaskActive('Investigation')) {
	updateTask('Investigation','Violation','Updated vis ES_HEALTH_INSPRESULTSUBMITAFTER from the Investigation inspection with a result of '' + inspResult + '.'');
	}

if (appMatch('Enforcement/Environmental Complaints/NA/NA') && inspType == '1120 Site Inspection' && inspResult == 'Violation' && isTaskActive('Investigation')) {
	updateTask('Investigation','Violations','Updated via ES_ENFORCEMENT_INSPRESULTSUBMITAFTER from the Investigation inspection with a result of '' + inspResult + '.'');
	updateAppStatus('Enforcement','Status set by batch script');
	}

if (appMatch('Enforcement/Environmental Complaints/NA/NA') && inspType == '1120 Site Inspection' && inspResult == 'Non-Violation' && isTaskActive('Investigation')) {
	updateTask('Investigation','No Violations','Updated via ES_ENFORCEMENT_INSPRESULTSUBMITAFTER from the Investigation inspection with a result of '' + inspResult + '.'');
	closeTask('Close','Closed','Closed by Script after passing 1120 Site Inspection',' ');
	deactivateTask('Investigation');
	updateAppStatus('No Violation','Status set by batch script');
	}

if (appMatch('Enforcement/Environmental Complaints/NA/NA') && inspType == '1120 Site Inspection' && inspResult == 'Complied' && isTaskActive('Investigation')) {
	updateTask('Investigation','Complied','Updated via ES_ENFORCEMENT_INSPRESULTSUBMITAFTER from the Investigation inspection with a result of '' + inspResult + '.'');
	closeTask('Close','Closed','Closed by Script after passing 1120 Site Inspection',' ');
	deactivateTask('Investigation');
	updateAppStatus('Complied','Status set by batch script');
	}

if (appMatch('Enforcement/Environmental Complaints/NA/NA') && inspType == '1120 Site Inspection' && inspResult == 'Court' && isTaskActive('Investigation')) {
	closeTask('Investigation','Court','Updated via ES_ENFORCEMENT_INSPRESULTSUBMITAFTER from the Investigation inspection with a result of '' + inspResult + '.'');
	updateAppStatus('Pending Court','Status set by batch script');
	}

if (appMatch('Enforcement/Environmental Complaints/NA/NA') && inspType == '1120 Site Inspection' && inspResult == 'Referred' && isTaskActive('Investigation')) {
	closeTask('Investigation','Referred','Updated via ES_ENFORCEMENT_INSPRESULTSUBMITAFTER from the Investigation inspection with a result of '' + inspResult + '.'');
	updateAppStatus('Referred','Status set by batch script');
	}

if (appMatch('Enforcement/Fire Code Compliance/NA/NA') && inspType == '1115 Investigation' && inspResult == 'No Violation' && isTaskActive('Investigate') == true && isTaskComplete('Investigate') == false) {
	updateTask('Investigate','No Violation',' ',' ');
	deactivateTask('Investigate');
	closeTask('Close','Closed','Closed by Script after 1115 Investigation Inspection resulted in No Violation',' ');
	updateAppStatus('Closed','Status set by batch script');
	}

if (appMatch('Enforcement/Fire Code Compliance/NA/NA') && inspType == '1115 Investigation' && inspResult == 'Violation' && isTaskActive('Investigate') == true && isTaskComplete('Investigate') == false) {
	updateTask('Investigate','Must Register',' ',' ');
	}
`^
ES_ENFORCEMENT_WORKFLOWTASKUPDATEAFTER^`
showMessage=true;
if (appMatch('Enforcement/Solid Waste/Residential/Recycling') && wfTask == 'Investigation' && wfStatus == 'Removal Ordered') {
	updateTask('Close','Closed','','');
	closeTask('Close','Closed','Closed by Script',' ');
	closeTask('Investigation',wfStatus,'Closed by Script',' ');
	addParcelCondition('', 'Parcel','Applied(Applied)','Recycling Program Violation','Recycling service not allowed at this location until condition expired (6 months from effective date) due to repeat violations','Notice');
	updateAppStatus('Removal Ordered', 'Status set by script');
	branch('ES_ENF_CREATE_AECU_CHILD');
	}

if (appMatch('Enforcement/Solid Waste/Residential/Recycling') && wfTask == 'Investigation' && (wfStatus == 'Tag 1' || wfStatus == 'Tag 2')) {
	updateTask('Close','Closed','','');
	closeTask('Close','Closed','Closed by Script',' ');
	closeTask('Investigation',wfStatus,'Closed by Script',' ');
	updateAppStatus('Tagged', 'Status set by script');
	}

if (appMatch('Enforcement/Fire Code Compliance/NA/NA') && wfTask == 'Investigate' && wfStatus == 'Vacant') {
	assignTask('Investigate','HARRELLKD');
	}

if (appMatch('Enforcement/Fire Code Compliance/NA/NA') && wfTask == 'Investigate' && wfStatus == 'Vacant') {
	branch('ES_ENFORCEMENT_ASSIGN_1115INVESTIGATION_INSP');
	}

if (appMatch('Enforcement/Fire Code Compliance/Codes/NA') && wfTask == 'Investigate' && wfStatus == 'Referred') {
	branch('ES_ASG_TSK_CHILDREN');
	}
`^
ES_ENFORCEMENT_WORKFLOWTASKUPDATEBEFORE^`
showMessage=true;
if (appMatch('Enforcement/Solid Waste/Residential/Recycling') && wfTask == 'Investigation' && wfStatus == 'Removed' && wfGetHistCount(capId,'Investigation','Tag 2') < 1) {
	showMessage = true;
	comment('Cannot Remove can before Tagging it 2 times.');
	cancel = true;
	}
`^
ES_ENF_CREATE_AECU_CHILD^`
var canSerialNumber = AInfo['Can Serial No.'];
var assignToUser = 'CONTRERASBX';
var newChild = createChild('AMS','ESD','Containers','Pick up','Child of record ID ' + capIDString);
var tempCapId = capId;
capId = newChild;
editAppSpecific('Can Serial No.', canSerialNumber);
assignCap(assignToUser);
assignTask('Work Order Submittal',assignToUser);
capId = tempCapId;
`^
ES_ENGSPPRIV_ADDFEES^`
if ((typeof(TYPE) == 'object' || typeof(TEMPORARY) == 'object')) {
	addFee('FSP010','SPRIV','STANDARD',1,'N');
	}

if (typeof(DOWNTOWN) == 'object') {
	addFee('FSP015','SPRIV','STANDARD',1,'N');
	}

branch('ES_ENGSPPRIV_ADDFEES_LOOP');
`^
ES_ENGSPPRIV_ADDFEES_LOOP^`
if (typeof(TYPE) == 'object') {
	for (eachrow in TYPE) branch('ES_ENGSPPRIV_ADDFEES_LOOP_TYPE');
	}

if (typeof(TEMPORARY) == 'object') {
	for (eachrow in TEMPORARY) branch('ES_ENGSPPRIV_ADDFEES_LOOP_TEMPORARY');
	}

if (typeof(DOWNTOWN) == 'object') {
	for (eachrow in DOWNTOWN) branch('ES_ENGSPPRIV_ADDFEES_LOOP_DOWNTOWN');
	}
`^
ES_ENGSPPRIV_ADDFEES_LOOP_DOWNTOWN^`
asiRow = DOWNTOWN[eachrow];
if (asiRow['Request Type'] == 'Street furniture') {
	addFee('FSP030','SPRIV','STANDARD',1,'Y');
	}

if (asiRow['Request Type'] == 'Street closure exceeding 24 hours') {
	addFee('FSP050','SPRIV','STANDARD',parseInt(AInfo['Closure Duration (Days)']),'Y');
	}

if (asiRow['Request Type'] == 'New security roll-up door') {
	addFee('FSP130','SPRIV','STANDARD',1,'Y');
	}

if (asiRow['Request Type'] == 'New, relocated, repaired or replaced canopy or awning') {
	addFee('FSP110','SPRIV','STANDARD',1,'Y');
	}

if (asiRow['Request Type'] == 'New, relocated, repaired or replaced wall sign') {
	addFee('FSP115','SPRIV','STANDARD',1,'Y');
	}

if (asiRow['Request Type'] == 'New, relocated, repaired or replaced marquee, kiosk, or other sign') {
	addFee('FSP120','SPRIV','STANDARD',1,'Y');
	}

if (asiRow['Request Type'] == 'Outdoor cafe, restaurant, or market place') {
	addFee('FSP125','SPRIV','STANDARD',1,'Y');
	}

if (asiRow['Request Type'] == 'Street closure, 24 hours or less') {
	addFee('FSP140','SPRIV','STANDARD',parseInt(AInfo['Closure Duration (Days)']),'Y');
	}
`^
ES_ENGSPPRIV_ADDFEES_LOOP_TEMPORARY^`
asiRow = TEMPORARY[eachrow];
duration = parseInt(AInfo['Closure Duration (Days)']);
comment('Days Closed = ' + AInfo['GENERAL.Days Closed']);
if (asiRow['Request Type'] == 'Temporary street display') {
	addFee('FSP145','SPRIV','STANDARD',1,'Y');
	}

if (asiRow['Request Type'] == 'Temporary street display' && asiRow['Bracket Type'] == 'Single') {
	addFee('FSP146','SPRIV','STANDARD',1,'Y');
	}

if (asiRow['Request Type'] == 'Temporary street display' && asiRow['Bracket Type'] == 'Double') {
	addFee('FSP147','SPRIV','STANDARD',1,'Y');
	}

if (asiRow['Request Type'] == 'Banner Program') {
	addFee('FSP150','SPRIV','STANDARD',1,'Y');
	}

if (asiRow['Request Type'] == 'Temporary banner') {
	addFee('FSP155','SPRIV','STANDARD',AInfo['GENERAL.Event Duration (Days)'],'Y');
	}

if (asiRow['Request Type'] == 'Street closure in a residential/apartment zone, exceeding 24 hours') {
	addFee('FSP160','SPRIV','STANDARD',(parseInt(AInfo['GENERAL.Days Closed'])),'Y');
	}

if (asiRow['Request Type'] == 'Street closure in a commercial/manufacturing zone, exceeding 24 hours') {
	addFee('FSP165','SPRIV','STANDARD',(parseInt(AInfo['GENERAL.Days Closed'])),'Y');
	}

if (asiRow['Request Type'] == 'Street closure in a comercial/manufacturing zone, 24 hours or less') {
	addFee('FSP165','SPRIV','STANDARD',(parseInt(AInfo['GENERAL.Days Closed'])),'Y');
	}
`^
ES_ENGSPPRIV_ADDFEES_LOOP_TYPE^`
asiRow = TYPE[eachrow];
if (asiRow['Item'] == 'Accessibility ramps required by code' && asiRow['Quantity'] > 0) {
	updateFee('FSP085','SPRIV','STANDARD',asiRow['Quantity'],'Y','N');
	}

if (asiRow['Item'] == 'Cables' && asiRow['Type'] == 'Surface' && asiRow['Quantity'] > 0) {
	updateFee('FSP090','SPRIV','STANDARD',(asiRow['Quantity'] * asiRow['CAD Sq Ft'] * asiRow['Encroachment Sq Ft'] * .1),'Y','N');
	}

if (asiRow['Item'] == 'Cables' && asiRow['Type'] == 'Subsurface' && asiRow['Quantity'] > 0) {
	updateFee('FSP095','SPRIV','STANDARD',(asiRow['Quantity'] * asiRow['CAD Sq Ft'] * asiRow['Encroachment Sq Ft'] * .1 * .5),'Y','N');
	}

if (asiRow['Item'] == 'Cables' && asiRow['Type'] == 'Aerial' && asiRow['Quantity'] > 0) {
	updateFee('FSP100','SPRIV','STANDARD',(asiRow['Quantity'] * asiRow['CAD Sq Ft'] * asiRow['Encroachment Sq Ft'] * .1 * .75),'Y','N');
	}

if (asiRow['Type'] == 'Aerial Other' && asiRow['Quantity'] > 0) {
	updateFee('FSP170','SPRIV','STANDARD',(asiRow['Quantity'] * asiRow['CAD Sq Ft'] * asiRow['Encroachment Sq Ft'] * .1 * .75),'Y','N');
	}

if (asiRow['Type'] == 'Surface Other' && asiRow['Quantity'] > 0) {
	updateFee('FSP45','SPRIV','STANDARD',(asiRow['Quantity'] * asiRow['CAD Sq Ft'] * asiRow['Encroachment Sq Ft'] * .1),'Y','N');
	}

if (asiRow['Type'] == 'Sub-surface Other' && asiRow['Quantity'] > 0) {
	updateFee('FSP175','SPRIV','STANDARD',(asiRow['Quantity'] * asiRow['CAD Sq Ft'] * asiRow['Encroachment Sq Ft'] * .1 * .5),'Y','N');
	}

if (asiRow['Item'] == 'Outdoor pay telephones' && asiRow['Quantity'] > 0) {
	updateFee('FSP125','SPRIV','STANDARD',asiRow['Quantity'],'Y','N');
	}

if (asiRow['Item'] == 'Awning, canopy, marquee, sign (legally existing)' && asiRow['Quantity'] > 0) {
	updateFee('FSP055','SPRIV','STANDARD',asiRow['Quantity'],'Y','N');
	}

if (asiRow['Item'] == 'Awning, canopy, marquee, sign (NEW)' && asiRow['Quantity'] > 0) {
	updateFee('FSP060','SPRIV','STANDARD',asiRow['Quantity'],'Y','N');
	}

if (asiRow['Item'] == 'Security roll-up door' && asiRow['Quantity'] > 0) {
	updateFee('FSP065','SPRIV','STANDARD',asiRow['Quantity'],'Y','N');
	}

if (asiRow['Item'] == 'Taxi stand' && asiRow['Quantity'] > 0) {
	updateFee('FSP020','SPRIV','STANDARD',asiRow['Quantity'],'Y','N');
	}

if (asiRow['Item'] == 'Underground storage vault or structure in CBD' && asiRow['Quantity'] > 0) {
	updateFee('FSP070','SPRIV','STANDARD',asiRow['Quantity'],'Y','N');
	}

if (asiRow['Item'] == 'Designated food vending concessions in the downtown area' && asiRow['Quantity'] > 0) {
	updateFee('FSP075','SPRIV','STANDARD',asiRow['Quantity'],'Y','N');
	}

if (asiRow['Item'] == 'Pipelines, whether overhead, surface or subsurface' && asiRow['Quantity'] > 0) {
	updateFee('FSP080','SPRIV','STANDARD',asiRow['Quantity'],'Y','N');
	}
`^
ES_ENHS_SCHEDULE_FOLLOWUP^`
var daysAhead;
if (AInfo['Type of Violation'] == 'Land Use Violation') {
	daysAhead = 16;
	}

if (AInfo['Type of Violation'] == 'License Violation') {
	daysAhead = 31;
	}

if (AInfo['Type of Violation'] == 'Open and Abandoned') {
	daysAhead = 31;
	}

if (AInfo['Type of Violation'] == 'Prohibited Signs (not Title 15) removal only') {
	daysAhead = 2;
	}

if (AInfo['Type of Violation'] == 'Prohibited Signs (permit required)') {
	daysAhead = 16;
	}

if (AInfo['Type of Violation'] == 'Property Maintenance') {
	daysAhead = 16;
	}

if (AInfo['Type of Violation'] == 'Public Restrooms - Unsanitary') {
	daysAhead = 2;
	}

if (AInfo['Type of Violation'] == 'Residential Unapproved Surface') {
	daysAhead = 2;
	}

if (AInfo['Type of Violation'] == 'Rockwall Repair') {
	daysAhead = 16;
	}

if (AInfo['Type of Violation'] == 'Sewage') {
	daysAhead = 2;
	}

if (AInfo['Type of Violation'] == 'Auto Repair in Residential') {
	daysAhead = 2;
	}

if (AInfo['Type of Violation'] == 'Sidewalk Repair') {
	daysAhead = 16;
	}

if (AInfo['Type of Violation'] == 'Sign Maintenance') {
	daysAhead = 16;
	}

if (AInfo['Type of Violation'] == 'Storage Standards') {
	daysAhead = 16;
	}

if (AInfo['Type of Violation'] == 'Tenant Complaint') {
	daysAhead = 16;
	}

scheduleInspection ('215 Property Maint Inspection',daysAhead,currentUserID);
closeTask('Complaint Received', 'Assigned','via ES_ENHS_SCHEDULE_FOLLOWUP','via script');
assignTask ('Investigation', currentUserID);
updateTask('Investigation', 'Violation','','');
if (AInfo['Type of Violation'] == 'Vacant Building Registration Enforcement') {
	daysAhead = 31;
	}

if (AInfo['Type of Violation'] == 'Building Without Permit') {
	daysAhead = 31;
	}

if (AInfo['Type of Violation'] == 'Commercial Unapproved Surface') {
	daysAhead = 16;
	}

if (AInfo['Type of Violation'] == 'Commercial Vehicles in Residential') {
	daysAhead = 2;
	}

if (AInfo['Type of Violation'] == 'Dilapidated Structure') {
	daysAhead = 31;
	}

if (AInfo['Type of Violation'] == 'Heavy Trucks (Land Use)') {
	daysAhead = 2;
	}

if (AInfo['Type of Violation'] == 'Historic Violation') {
	daysAhead = 91;
	}
`^
ES_ENV_SCHEDULE_1120_INSPECTION^`
var inspId = '1120 Site Inspection';
var getUserID = getTaskAssignedUser3('Receive Complaint', 'EVPN0002', '1120 Site Inspection');
comment('********USERID IS ' + getUserID );
if (getUserID != '') {
	scheduleInspection(inspId,1,getUserID );
	assignTask('Investigation',getUserID );
	}

taskUserObj = aa.person.getUser(wfTaskObj.getTaskItem().getAssignedUser().getFirstName(),wfTaskObj.getTaskItem().getAssignedUser().getMiddleName(),wfTaskObj.getTaskItem().getAssignedUser().getLastName()).getOutput();
var userId = taskUserObj.getUserID();
if (userId != '') {
	scheduleInspection('1120 Site Inspection',1,userId );
	assignTask('Investigation',userId );
	}
`^
ES_EPDOT_ACA_EMAIL_NOTIFICATION^`
email('TCP@elpasotexas.gov','accela@elpasotexas.gov',('ACA Record Number: ' + capIDString), ('The Record Number ' + capIDString + ' has been submitted'));
`^
ES_FIRE_INSPRESULTSUBMITAFTER^`
if (appMatch('Fire/Supression System/*/*')) {
	wfTask = null;
	wfStatus = null;
	branch('ES_FIRE_UPDATE_EXP_DATE');
	}

if (matches(inspType,'400 Fire Department Final','475 Fire Suppression','480 Fire Alarm','485 Fire Sprinkler','490 Fire Pump Test','495 Fire Hydrant') && inspResult == 'Fail w/Refee') {
	addFee('FF004','FIRESUP','STANDARD',1,'Y');
	}
`^
ES_FIRE_UPDATE_EXP_DATE^`
pCapID = getParent();
comment('Parent CAP ID is: ' + pCapID);
if (pCapID == false && wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date',dateAddMonths(null,6),capId);
	}

if (pCapID == false && inspManualDate != null) {
	editAppSpecific('Expiration Date',dateAddMonths(inspManualDate,6),capId);
	}

if (pCapID != false && wfTask == 'Issue' && wfStatus == 'Issued') {
	pExpDate = getAppSpecific('Expiration Date',pCapID);
	editAppSpecific('Expiration Date',pExpDate,capId);
	}
`^
ES_FIRE_WFTASKUPDATEAFTER^`
if (appMatch('Fire/Supression System/*/*') && wfTask == 'Issue' && wfStatus == 'Issued') {
	inspManualDate = null;
	branch('ES_FIRE_UPDATE_EXP_DATE');
	}

if (appMatch('Fire/Supression System/*/*') && wfTask == 'Fire Review' && wfStatus == 'Passed' && parseInt(AInfo['Number of Heads']) > 0) {
	updateFee('FF001','FIRESUP','STANDARD',parseInt(AInfo['Number of Heads']),'N');
	}

if (appMatch('Fire/Supression System/*/*') && wfTask == 'Fire Review' && wfStatus == 'Passed' &&  parseInt(AInfo['Fire Suppression System Quantity']) > 0) {
	updateFee('FF002','FIRESUP','STANDARD',parseInt(AInfo['Fire Suppression System Quantity']),'Y');
	}

if (appMatch('Fire/Supression System/*/*') && wfTask == 'Fire Review' && wfStatus == 'Passed' &&  parseInt(AInfo['Number of Hydrants']) > 0) {
	updateFee('FF003','FIRESUP','STANDARD',parseInt(AInfo['Number of Hydrants']),'Y');
	}
`^
ES_FIRE_WFTASKUPDATEBEFORE^`
if (appMatch('Fire/Supression System/*/*') && wfTask == 'Fire Review' && wfStatus == 'Revised' && !isTaskStatus('Issue','Issued')) {
	showMessage = true;
	comment('Task cannot have a status of 'Revised' until the permit has been issued.');
	cancel = true;
	}
`^
ES_GUIDE_SHEET_SCORE^`
guideSheetScore = false;
if (matches(inspResult,'Fail','Fail w ReFee')) {
	guideSheetScore = getGuideSheetTotalScore('Retail Food Establishment Insp');
	}

if (guideSheetScore != false && guideSheetScore <= 69) {
	branch('ES_HEALTH_FOODINSP_EMAIL_NOTICE');
	}
`^
ES_HEALTH_ApplicationSpecificInfoUpdateAfter^`
if (appMatch('Health/Food Inspections/Fixed Location/*')&& AInfo['Grease Trap']=='Yes' && (AInfo['EPWU Registration']==null)) {
	showMessage = true;
	comment('Cannot schedule inspection because the Grease Trap is required and no EPWU Registration # was inputted.');
	cancel = true;
	}
`^
ES_HEALTH_CHECK_COMPLAINT^`
if (typeof(COMPLAINTTYPE) != 'object') {
	showMessage = true;
	comment('The ASI Table Complaint Type must be populated on this CAP before updating the workflow.');
	cancel = true;
	}

if (typeof(COMPLAINTTYPE) == 'object') {
	for (eachrow in COMPLAINTTYPE) branch('ES_HEALTH_CHECK_COMPLAINT_LOOP');
	}
`^
ES_HEALTH_CHECK_COMPLAINT_LOOP^`
rowValue = COMPLAINTTYPE[eachrow];
comment('Complaint Type is: ' + rowValue['Complaint Type']);
if (rowValue['Complaint Type'] == null) {
	showMessage = true;
	comment('The ASI Table 'Complaint Type' must be populated on this CAP before updating the workflow.');
	cancel = true;
	}
`^
ES_HEALTH_FEES^`
if (appMatch('Health/Food Inspections/Fixed Location/NA') && wfTask == 'Application Submittal' && matches(wfStatus,'Submitted','Review Required','No Review Required') && matches(AInfo['Section'],'9.12.070K0','9.12.070K1','9.12.070K2','9.12.070K3','9.12.070K4') && matches(AInfo['Permit Type'],'Food Product Establishment','Food Service Establishment') && AInfo['Square Footage'] > 0 && !(AInfo['Permit Type']=='Food Product Establishment' && AInfo['Section']=='9.12.070K0')) {
	addFee('FH001','HLTHFIXED','STANDARD',1,'N');
	addFee('FH014','HLTHFIXED','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Health and Sanitary Insp/NA') && (AInfo['Non Profit'] == 'No' && AInfo['County'] == 'No') && wfTask == 'Application Submittal' && matches(wfStatus,'Submitted','Review Required','No Review Required')) {
	addFee('FH001','HLTHSAN','STANDARD',1,'N');
	addFee('FH002','HLTHSAN','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Fixed Location/NA') && wfTask == 'Application Submittal' && matches(wfStatus,'Submitted','Review Required','No Review Required') && matches(AInfo['Section'],'4(a)') && AInfo['Square Footage'] < 3000 && AInfo['Permit Type']=='Food Service Establishment') {
	addFee('FHC0014','HLTHCOUNTY','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Fixed Location/NA') && wfTask == 'Application Submittal' && matches(wfStatus,'Submitted','Review Required','No Review Required') && matches(AInfo['Section'],'4(b)') && AInfo['Square Footage'] >= 3000 && AInfo['Permit Type']=='Retail Food Store') {
	addFee('FHC0003','HLTHCOUNTY','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Fixed Location/NA') && wfTask == 'Application Submittal' && matches(wfStatus,'Submitted','Review Required','No Review Required') && AInfo['Section'] == '4(h)') {
	addFee('FHC0009','HLTHCOUNTY','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Fixed Location/NA') && wfTask == 'Application Submittal' && matches(wfStatus,'Submitted','Review Required','No Review Required') && AInfo['Section'] == '4(i)') {
	addFee('FHC0010','HLTHCOUNTY','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Fixed Location/NA') && wfTask == 'Application Submittal' && matches(wfStatus,'Submitted','Review Required','No Review Required') && AInfo['Section'] == '4(j)') {
	addFee('FHC0011','HLTHCOUNTY','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Fixed Location/NA') && wfTask == 'Application Submittal' && matches(wfStatus,'Submitted','Review Required','No Review Required') && AInfo['Section'] == '4(k)') {
	addFee('FHC0012','HLTHCOUNTY','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Fixed Location/NA') && wfTask == 'Application Submittal' && matches(wfStatus,'Submitted','Review Required','No Review Required') && AInfo['Section'] == '4(l)') {
	addFee('FHC0013','HLTHCOUNTY','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Roadside-Outdoor Market/NA') &&  matches(AInfo['PERMIT INFO.Section'],'9.12.070L')) {
	addFee('FH054','HLTHOS','STANDARD',1,'N');
	addFee('FH057','HLTHOS','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Fixed Location/NA') && wfTask == 'Application Submittal' && matches(wfStatus,'Submitted','Review Required','No Review Required') && matches(AInfo['Section'],'9.12.070F') && matches(AInfo['Permit Type'],'Day Care Center')) {
	removeFee('FH014B','STANDARD');
	addFee('FH014A','HLTHFIXED','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Fixed Location/NA') && wfTask == 'Application Submittal' && matches(wfStatus,'Submitted','Review Required','No Review Required') && matches(AInfo['Section'],'9.12.070B','9.12.070E','9.12.070F','9.12.070K0','9.12.070N','9.12.070O','9.12.070P') && matches(AInfo['Permit Type'],'(5-8) Personal Care Home','(9-18) Personal Care Home','Adult Foster Care Home or Private Care Home','Day Care Center','Federal or State Inspected','Home Child Care Facility','Food Product Establishment')) {
	addFee('FH001','HLTHFIXED','STANDARD',1,'N');
	addFee('FH014B','HLTHFIXED','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Fixed Location/NA') && wfTask == 'Application Submittal' && matches(wfStatus,'Submitted','Review Required','No Review Required') && matches(AInfo['Section'],'4(a)') && AInfo['Square Footage'] < 3000 && AInfo['Permit Type']=='Retail Food Store') {
	addFee('FHC0002','HLTHCOUNTY','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Fixed Location/NA') && wfTask == 'Application Submittal' && matches(wfStatus,'Submitted','Review Required','No Review Required') && matches(AInfo['Section'],'4(b)') && AInfo['Square Footage'] > 2999 && AInfo['Permit Type']=='Food Service Establishment') {
	addFee('FHC0015','HLTHCOUNTY','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Fixed Location/NA') && wfTask == 'Application Submittal' && matches(wfStatus,'Submitted','Review Required','No Review Required') && matches(AInfo['Section'],'4(a)') && AInfo['Square Footage'] < 2999 && AInfo['Permit Type']=='Retail Food Store') {
	addFee('FHC0002','HLTHCOUNTY','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Food Handler/NA') && wfTask == 'Application Submittal' && matches(wfStatus,'External Class Taken','Received') && AInfo['City Employee'] != 'Yes' && AInfo['Type'] == 'Food Handler' && matches(AInfo['Subtype'],'Challenge Exam','Course')) {
	addFee('FH020','HLTHFH','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Food Handler/NA') && wfTask == 'Application Submittal' && matches(wfStatus,'External Class Taken','Received') && AInfo['City Employee'] != 'Yes' && AInfo['Type'] == 'Food Handler' &&  AInfo['Subtype'] == 'Recognized') {
	addFee('FH023','HLTHFH','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Food Handler/NA') && wfTask == 'Application Submittal' && matches(wfStatus,'External Class Taken','Received') && AInfo['City Employee'] != 'Yes' && AInfo['Type'] == 'Food Handler' &&  AInfo['Subtype'] == 'Permanent') {
	addFee('FH200','HLTHFH','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Food Handler/NA') && wfTask == 'Application Submittal' && matches(wfStatus,'External Class Taken','Received') && AInfo['City Employee'] != 'Yes' && AInfo['Type'] == 'Management' && AInfo['Subtype'] == 'Recognized') {
	addFee('FH021','HLTHFH','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Food Handler/NA') && wfTask == 'Application Submittal' && matches(wfStatus,'External Class Taken','Received') && AInfo['City Employee'] != 'Yes' && AInfo['Type'] == 'Management' && matches(AInfo['Subtype'],'Challenge Exam','Course')) {
	addFee('FH017','HLTHFH','STANDARD',1,'N');
	addFee('FH022','HLTHFH','STANDARD',1,'N');
	addFee('FH018','HLTHFH','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Mobile/NA') && wfTask == 'Application Submittal' && matches(wfStatus,'Submitted','Review Required','No Review Required') && matches(AInfo['Section'],'9.12.070H','9.12.070I')) {
	addFee('FH024','HLTHMOBILE','STANDARD',1,'N');
	addFee('FH037','HLTHMOBILE','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Recurrent/NA') && wfTask == 'Application Submittal' && matches(wfStatus,'Submitted','Review Required','No Review Required') && matches(AInfo['Section'],'9.12.070C2','9.12.070D2')) {
	addFee('FH041','HLTHREC','STANDARD',1,'N');
	addFee('FH054','HLTHREC','STANDARD',1,'N');
	}
`^
ES_HEALTH_FH_CDATE^`
courseComp = false;
courseComp2 = false;
if (SCHEDULEINFORMATION.length < 1 && RECOGNIZEDCOURSEINFORMATION.length < 1) {
	showMessage=true;
	comment('ASI Table SCHEDULE INFORMATION and ASI Table RECOGNIZED COURSE INFORMATION are empty, need to fill out one of them.');
	cancel=true;
	}

if (SCHEDULEINFORMATION.length > 0) {
	for (eachrow in SCHEDULEINFORMATION) branch('ES_HEALTH_FH_CDATE_LOOP');
	}

if (RECOGNIZEDCOURSEINFORMATION.length > 0) {
	for (eachrow in RECOGNIZEDCOURSEINFORMATION) branch('COEP_HEALTH_FH_CDATE_LOOP');
	}

if (((courseComp == false && courseComp2 == false) || (courseComp == true && courseComp2 == true))) {
	showMessage = true;
	comment(courseComp + '  Cannot issue Food Handler permit because the latest scheduled 'Course Date' and/or 'Course Time' field on the ASI Table SCHEDULE INFORMATION or RECOGNIZED COURSE INFORMATION is not filled out and/or completed.');
	cancel = true;
	}
`^
ES_HEALTH_FH_CDATE_LOOP^`
asiRow = SCHEDULEINFORMATION[eachrow];
todayDate = new Date(dateAdd(null,0));
courseComp = false;
if (asiRow['Status'] == 'Scheduled' && asiRow['Course Date'] != null) {
	courseComp = true;
	}
`^
ES_HEALTH_FOODINSP_EMAIL_NOTICE^`
inspectorID = getLastInspector(inspType);
emBody1 = 'A Retail Food Establishment Inspection Report with a low score was issued to:' + '<br />' + '<br />';
emBody2 = emBody1 += ('CAP ID#: ' + capIDString + '<br />' + 'Establishment Name: ' + capName + '<br />' + 'Physical Address: ' + CapAddress + '<br />' + 'Date Inspected: ' + inspResultDate + '<br />' + 'San Code: ' + inspType + '<br />' + 'Score: ' + guideSheetScore + '<br />' + 'Inspected By: ' + inspectorID);
email('David.Sublasky@elpasotexas.gov','accela@elpasotexas.gov','LOW SCORE ISSUED - Retail Food Establishment Inspection Report',emBody2);
email('AsberryMY@elpasotexas.gov','accela@elpasotexas.gov','LOW SCORE ISSUED - Retail Food Establishment Inspection Report',emBody2);
email('HernandezEX2@elpasotexas.gov','accela@elpasotexas.gov','LOW SCORE ISSUED - Retail Food Establishment Inspection Report',emBody2);
email('VarelaSR@elpasotexas.gov','accela@elpasotexas.gov','LOW SCORE ISSUED - Retail Food Establishment Inspection Report',emBody2);
email('ContrerasTX@elpasotexas.gov','accela@elpasotexas.gov','LOW SCORE ISSUED - Retail Food Establishment Inspection Report',emBody2);
`^
ES_HEALTH_INSPRESULTSUBMITAFTER^`
if (appMatch('Enforcement/Food Inspections Complaints/NA/NA') && inspType == 'Investigation' && inspResult == 'No Violations' && isTaskActive('Investigation')) {
	branchTask('Investigation','No Violations','Updated vis ES_HEALTH_INSPRESULTSUBMITAFTER from the Investigation inspection with a result of '' + inspResult + '.'');
	}

if (appMatch('Health/Food Inspections/Fixed Location/NA') && (inspType=='1310 Routine Inspection' || inspType=='1320 Re-inspection') && (inspResult == 'Fail' || inspResult == 'Fail w ReFee')&& isTaskActive('Inspection')) {
	updateTask('Inspection','Failed','Updated vis ES_HEALTH_INSPRESULTSUBMITAFTER from the Investigation inspection with a result of '' + inspResult + '.'','via early passing of inspection');
	}

if (appMatch('Health/Food Inspections/Roadside-Outdoor Market/NA') && (inspType=='1310 Routine Inspection' || inspType=='1320 Re-inspection') && (inspResult == 'Fail' || inspResult == 'Fail w ReFee')&& isTaskActive('Inspection')) {
	updateTask('Inspection','Failed','Updated vis ES_HEALTH_INSPRESULTSUBMITAFTER from the Investigation inspection with a result of '' + inspResult + '.'','via early passing of inspection');
	}

if (appMatch('Health/Food Inspections/Seasonal/NA') && (inspType=='1310 Routine Inspection' || inspType=='1320 Re-inspection') && (inspResult == 'Fail' || inspResult == 'Fail w ReFee')&& isTaskActive('Inspection')) {
	updateTask('Inspection','Failed','Updated vis ES_HEALTH_INSPRESULTSUBMITAFTER from the Investigation inspection with a result of '' + inspResult + '.'','via early passing of inspection');
	}

if (appMatch('Health/Food Inspections/Fixed Location/NA') && inspType == '1350 Permitting Inspection' && inspResult == 'Approve' && isTaskActive ('Site Assessment')) {
	updateTask ('Site Assessment', 'Approved', 'Updated via Hlth_inspresultsubmitafter');
	closeTask ('Site Assessment', 'Approved', 'Closed by script ES_HEALTH_INSPRESULTSUBMITAFTER');
	}

if (appMatch('Enforcement/Food Inspections Complaints/NA/NA') && inspType == 'Investigation' && inspResult == 'Violations' && isTaskActive('Investigation')) {
	updateTask('Investigation','Violation','Updated vis ES_HEALTH_INSPRESULTSUBMITAFTER from the Investigation inspection with a result of '' + inspResult + '.'');
	}

if (appMatch('Health/Food Inspections/Fixed Location/NA') && inspType == '1300 Site Assessment' && inspResult == 'Fail w ReFee' && !matches(AInfo['Section'],'2(b)', '4(a)', '4(b)', '4(h)', '4(i)', '4(j)', '4(k)', '4(l)', '9.12.070G')) {
	addFee('FH014B','HLTHFIXED','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Fixed Location/NA') && (inspType=='1310 Routine Inspection' || inspType=='1320 Re-inspection') && (inspResult == 'Pass')&& isTaskActive('Inspection')) {
	updateTask('Inspection','Passed','Updated vis ES_HEALTH_INSPRESULTSUBMITAFTER from the Investigation inspection with a result of '' + inspResult + '.'','via early passing of inspection');
	}

if (appMatch('Health/Food Inspections/Roadside-Outdoor Market/NA') && (inspType=='1310 Routine Inspection' || inspType=='1320 Re-inspection') && (inspResult == 'Pass')&& isTaskActive('Inspection')) {
	updateTask('Inspection','Passed','Updated vis ES_HEALTH_INSPRESULTSUBMITAFTER from the Investigation inspection with a result of '' + inspResult + '.'','via early passing of inspection');
	}

if (appMatch('Health/Food Inspections/Seasonal/NA') && (inspType=='1310 Routine Inspection' || inspType=='1320 Re-inspection') && (inspResult == 'Pass')&& isTaskActive('Inspection')) {
	updateTask('Inspection','Passed','Updated vis ES_HEALTH_INSPRESULTSUBMITAFTER from the Investigation inspection with a result of '' + inspResult + '.'','via early passing of inspection');
	}

if (appMatch('Health/Food Inspections/Fixed Location/NA') && inspType == '1300 Site Assessment' && inspResult == 'Fail w ReFee'&& matches(AInfo['Section'],'9.12.070B','9.12.070E','9.12.070F','9.12.070K0','9.12.070K1','9.12.070K2','9.12.070K3','9.12.070K4','9.12.070N','9.12.070O','9.12.070P') && matches(AInfo['Permit Type'],'Food Product Establishment','Food Service Establishment') && AInfo['Square Footage'] > 0 && !(AInfo['Permit Type']=='Food Product Establishment' && AInfo['Section']=='9.12.070K0')) {
	addFee('FH014','HLTHFIXED','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Fixed Location/NA') && inspType == '1300 Site Assessment' && inspResult == 'Fail w ReFee'&&  matches(AInfo['Section'],'9.12.070B','9.12.070E','9.12.070F','9.12.070K0','9.12.070K1','9.12.070K2','9.12.070K3','9.12.070K4','9.12.070N','9.12.070O','9.12.070P') && matches(AInfo['Permit Type'],'(5-8) Personal Care Home','(9-18) Personal Care Home','Adult Foster Care Home or Private Care Home','Day Care Center','Federal or State Inspected','Home Child Care Facility','Retail Food Store','Food Product Establishment')) {
	addFee('FH014B','HLTHFIXED','STANDARD',1,'N');
	}

if (appMatch('Health/Food Inspections/Fixed Location/NA') && inspType == '1300 Site Assessment' && inspResult == 'Fail w ReFee' && matches(AInfo['Section'],'9.12.070F') && matches(AInfo['Permit Type'],'Day Care Center')) {
	removeFee('FH014B','STANDARD');
	addFee('FH014A','HLTHFIXED','STANDARD',1,'N');
	}
`^
ES_HEALTH_PUBED_PDATE^`
presSched = false;
if (typeof(SCHEDULEINFORMATION) == 'object') {
	for (eachrow in SCHEDULEINFORMATION) branch('ES_HEALTH_PUBED_PDATE_LOOP');
	}

if (presSched == false) {
	showMessage = true;
	comment('Cannot move workflow because there is no scheduled 'Presentation Date' and/or 'Presentation Time' field on the ASI Table Scheduled Information is not filled out.');
	cancel = true;
	}
`^
ES_HEALTH_PUBED_PDATE_LOOP^`
asiRow = SCHEDULEINFORMATION[eachrow];
if (asiRow['Status'] == 'Scheduled' && asiRow['Presentation Date'] != null && asiRow['Presentation Time'] !=null) {
	presSched = true;
	}
`^
ES_HEALTH_SEASNL_CEXPIRED_PERMIT^`
showDebug = true;
ExpDate = new Date(AInfo['Expiration Date']).getTime();
CurrDate = new Date().getTime();
diff = new Number((CurrDate-ExpDate)/86400000).toFixed(0);
if (diff < 180) {
	showMessage = true;
	comment('Expiration is not more than 180 days.  Please wait till 180 days after expiration have passed before renewing the permit.' );
	cancel = true;
	}
`^
ES_HEALTH_WFTASKUPDATEAFTER^`
var CapAddress = getCapAddress(capId);
if (appMatch('Health/Food Inspections/Food Handler/*') && wfTask == 'Issue' && wfStatus == 'Issued' && (AInfo['Subtype'] == 'Course' || AInfo['Subtype'] == 'Challenge Exam')) {
	branch('ES_HLTH_SET_CRSE_EXP_DATE');
	}

if (appMatch('Health/Food Inspections/Fixed Location/*') && wfTask == 'Application Submittal' && wfStatus == 'Submitted' && AInfo['Grease Trap']=='Yes') {
	email('sgalindo@epwu.org;
	Nenye@epwu.org','accela@elpasotexas.gov',('Record ' + capIDString + ' has been updated.'), ('Grease Traps are required for Business/Project: ' + capName + '.  The business address is ' + CapAddress + '.  If an EPWU Registration number was provided, the number is ' + AInfo['EPWU Registration']));
	}
`^
ES_HEALTH_WFTASKUPDATEBEFORE^`
if (appMatch('Health/Food Inspections/Complaints/*') && wfTask == 'Complaint Received') {
	branch('ES_HEALTH_CHECK_COMPLAINT');
	}

if (appMatch('Health/Food Inspections/Food Handler/*') && wfTask == 'Application Submittal' && (wfStatus == 'Received' || wfStatus == 'External Class Taken') && (AInfo['Subtype'] == 'Course' || AInfo['Subtype'] == 'Challenge Exam' || AInfo['Subtype'] == 'Recognized' || AInfo['Subtype'] == 'Permanent')) {
	branch('ES_HEALTH_FH_CDATE');
	}

if (appMatch('Health/Food Inspections/Seasonal/*') && wfTask == 'Inspection' && wfStatus == 'Renewed') {
	branch('ES_HEALTH_SEASNL_CEXPIRED_PERMIT');
	}

if (appMatch('Health/Food Inspections/Public Education/*') && wfTask == 'Request' && matches(wfStatus,'Received','Assigned')) {
	branch('ES_HEALTH_PUBED_PDATE');
	}
`^
ES_HLTH_SET_CRSE_EXP_DATE^`
numRows = 0;
lastDate=('01/01/2000');
if (SCHEDULEINFORMATION.length < 1) {
	showMessage = true;
	comment('Cannot be Issued. No Course has been entered');
	cancel = true;
	}

if (typeof(SCHEDULEINFORMATION) == 'object') {
	for (eachrow in SCHEDULEINFORMATION) branch('ES_HLTH_SET_CRSE_EXP_DATE_LOOP');
	}

if ((numRows == 0 || lastDate == 07/09/2000)) {
	showMessage = true;
	comment('Cannot be Issued. No date has been sent has not been approved.');
	cancel = true;
	}

if (lastDate != 01/01/2000) {
	editAppSpecific('Expiration Date', dateAddMonths(lastDate, 24));
	}
`^
ES_HLTH_SET_CRSE_EXP_DATE_LOOP^`
siteRow = SCHEDULEINFORMATION[eachrow];
numRows = numRows + 1;
if (lastDate<siteRow['Course Date']) {
	lastDate=siteRow['Course Date'];
	showMessage = true;
	}

if (lastDate<siteRow['Rescheduled Date']) {
	lastDate=siteRow['Rescheduled Date'];
	showMessage = true;
	}
`^
ES_IRSA_BLDG_FEES^`
if (appMatch('Building/Right of Way/NA/NA') && inspResult == 'Fail w/Refee') {
	addFee('FB046','BLDGROW','STANDARD',1,'N');
	}

if (appMatch('Building/Electrical/NA/NA') && inspResult == 'Fail w/Refee') {
	addFee('FB082','BLDGELEC','STANDARD',1,'N');
	}

if (appMatch('Building/Mechanical/NA/NA') && inspResult == 'Fail w/Refee') {
	addFee('FB105','BLDGMECH','STANDARD',1,'N');
	}

if (appMatch('Building/Irrigation/NA/NA') && inspResult == 'Fail w/Refee') {
	addFee('FB137','BLDGIRR','STANDARD',1,'N');
	}

if (appMatch('Building/Reroof/NA/NA') && inspResult == 'Fail w/Refee') {
	addFee('FB160','BLDGGEN','STANDARD',1,'N');
	}

if (appMatch('Building/Retaining Walls/NA/NA') && inspResult == 'Fail w/Refee') {
	addFee('FB039','BLDGGEN','STANDARD',1,'N');
	}
`^
ES_LICENSES_CAR_DEALER_FEE^`
if (AInfo['Term of License'] == '1 Year') {
	addFee('FL090A','LICCARDEAL','STANDARD',1,'Y');
	//editAppSpecific('Expiration Date', dateAddMonths(null, 12));
	}

if (AInfo['Term of License'] == '2 Year') {
	addFee('FL090A','LICCARDEAL','STANDARD',2,'Y');
	// editAppSpecific('Expiration Date', dateAddMonths(null, 24));
	}
`^
ES_LICENSES_FEES^`
showDebug = false;
showMessage = false;
if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['License Type'] == 'Mobile Establishment - Unexposed Food') {
	addFee('FL010','LICFOOD','STANDARD',1,'N');
	}

if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['License Type'] == 'Mobile Establishment - Exposed Food') {
	addFee('FL011','LICFOOD','STANDARD',1,'N');
	}

if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['License Type'] == 'Food Product - Under 200 Sq Ft, Prepackaged & No Potentially Hazardous Food') {
	addFee('FL012','LICFOOD','STANDARD',1,'N');
	}

if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['License Type'] == 'Food Service/Food Product - Under 3000 Square Feet') {
	addFee('FL013','LICFOOD','STANDARD',1,'N');
	}

if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['License Type'] == 'Food Service/Food Product - 3001 to 6000 Square Feet') {
	addFee('FL014','LICFOOD','STANDARD',1,'N');
	}

if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['License Type'] == 'Food Service/Food Product - 6001 to 9000 Square Feet') {
	addFee('FL015','LICFOOD','STANDARD',1,'N');
	}

if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['License Type'] == 'Food Service/Food Product - 9001 or More Square Feet') {
	addFee('FL016','LICFOOD','STANDARD',1,'N');
	}

if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['License Type'] == 'Outdoor Market') {
	addFee('FL017','LICFOOD','STANDARD',1,'N');
	}

if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['License Type'] == 'Adult Foster Care Home/Private Care Home - 4 or Less Care Recipients') {
	addFee('FL018','LICFOOD','STANDARD',1,'N');
	}

if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['License Type'] == 'Personal Care Home - 5-8 Care Recipients') {
	addFee('FL019','LICFOOD','STANDARD',1,'N');
	}

if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['License Type'] == 'Temporary Establishment - Unexposed Food') {
	addFee('FL002','LICFOOD','STANDARD',1,'N');
	}

if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['License Type'] == 'Personal Care Home - 9-18 Care Recipients') {
	addFee('FL020','LICFOOD','STANDARD',1,'N');
	}

if (appMatch('Licenses/Security Alarm/NA/NA') && wfTask appMatch('Licenses/Security Alarm/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FL021','LICSECALM','STANDARD',1,'N');
	invoiceFee('FL021','STANDARD');
	');
	}

if (appMatch('Licenses/Vendor/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Type'] == 'Primary') {
	addFee('FL065','LICVEND','STANDARD',1,'Y');
	}

if (appMatch('Licenses/Money Exchange/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FL067','LICMONEXC','STANDARD',1,'N');
	}

if (appMatch('Licenses/Temp Vendor/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FL068','LICTMPVEND','STANDARD',1,'N');
	}

if (appMatch('Licenses/Gas Heating/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FL069','LICGAS','STANDARD',1,'N');
	}

if (appMatch('Licenses/Hotel Motel/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FL070','LICHOTEL','STANDARD',1,'N');
	}

if (appMatch('Licenses/Lodging/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FL072','LICLODGE','STANDARD',1,'Y');
	}

if (appMatch('Licenses/Residential Parking/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FL073','LICRESPK','STANDARD',1,'N');
	}

if (appMatch('Licenses/Home Occ/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FL074','LICHOME','STANDARD',1,'N');
	addFee('FL075','LICHOME','STANDARD',1,'N');
	}

if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['License Type'] == 'Recurrent Establishment - Unexposed Food') {
	addFee('FL003','LICFOOD','STANDARD',1,'N');
	}

if (appMatch('Licenses/Secondhand Dealer/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Submitted' && AInfo['Type']== 'Primary') {
	addFee('FL076','LIC2ND','STANDARD',1,'N');
	}

if (appMatch('Licenses/Charitable Solicitation/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FL078','LICCHAR','STANDARD',1,'Y');
	}

if (appMatch('Licenses/Parade/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FL079','LICPARADE','STANDARD',1,'N');
	}

if (appMatch('Licenses/Amplification/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Days Between Event and Application'] > 3) {
	addFee('FL080','LICAMP','STANDARD',1,'Y');
	}

if (appMatch('Licenses/Temp Event/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FL081','LICTEMP','STANDARD',1,'N');
	}

if (appMatch('Licenses/Sign/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FL085','LICSIGN','STANDARD',1,'N');
	addFee('FL086','LICSIGN','STANDARD',1,'N');
	addFee('FL087','LICSIGN','STANDARD',1,'N');
	addFee('FL088','LICSIGN','STANDARD',1,'N');
	}

if (appMatch('Licenses/Amusement Occupation Tax/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	var D = new Date();
	var T = 12-D.getMonth();
	addFee('FL089','LICOCCTAX','STANDARD',AInfo['No. of Tags']*T,'N');
	}

if (appMatch('Licenses/Car Dealer/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	showMessage=true;
	var D = new Date();
	var T = 12-D.getMonth();
	comment('Numb:'+T);
	addFee('FL090','LICCARDEAL','STANDARD',T,'Y');
	}

if (appMatch('Licenses/Sexually Oriented Business/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Type']=='Renewal') {
	addFee('FL094','LICSEX','STANDARD',1,'Y');
	}

if (appMatch('Licenses/Swimming Pool and Spa/NA/NA') && wfTask == 'Application Submittal' && (wfStatus == 'Completed' || wfStatus == 'No Review Required')) {
	branch('ES_LICPOOLSPA_ADDFEES');
	}

if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['License Type'] == 'Seasonal Establishment - Unexposed Food') {
	addFee('FL004','LICFOOD','STANDARD',1,'N');
	}

if (appMatch('Licenses/Tattoo Body Piercing Employee/NA/NA') && wfTask == 'Application Submittal' && (wfStatus == 'Completed' || wfStatus == 'No Review Required') && AInfo['Type of License'] == 'Tattoo' && AInfo['Renewal']=='No') {
	addFee('FL102','LICTBPEMP','STANDARD',1,'Y');
	}

if (appMatch('Licenses/Tattoo Body Piercing Employee/NA/NA') && wfTask == 'Application Submittal' && (wfStatus == 'Completed' || wfStatus == 'No Review Required') && AInfo['Type of License'] == 'Tattoo and Body Piercing'  && AInfo['Renewal']=='No') {
	addFee('FL104','LICTBPEMP','STANDARD',1,'Y');
	}

if (appMatch('Licenses/Tattoo Body Piercing Employee/NA/NA') && wfTask == 'Application Submittal' && (wfStatus == 'Completed' || wfStatus == 'No Review Required') && AInfo['Type of License'] == 'Body Piercing' && AInfo['Renewal']=='No') {
	addFee('FL107','LICTBPEMP','STANDARD',1,'Y');
	}

if (appMatch('Licenses/Laundry/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FL115','LICLAUND','STANDARD',1,'N');
	}

if (appMatch('Licenses/Sign/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Type of License'] == 'Sign Painting Only') {
	addFee('FL085','LICSIGN','STANDARD',1,'N');
	}

if (appMatch('Licenses/Sign/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Type of License'] == 'On/Off Premise') {
	addFee('FL086','LICSIGN','STANDARD',1,'N');
	}

if (appMatch('Licenses/Sign/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Type of License'] == 'Inflatable Sign B-3') {
	addFee('FL087','LICSIGN','STANDARD',1,'N');
	}

if (appMatch('Licenses/Sign/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Type of License'] == 'Inflatable Sign B-4') {
	addFee('FL088','LICSIGN','STANDARD',1,'N');
	}

if (appMatch('Licenses/Secondhand Dealer/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Submitted' && AInfo['Type']=='Secondary') {
	addFee('FL077','LIC2ND','STANDARD',1,'N');
	}

if (appMatch('Licenses/Secondhand Dealer/NA/NA') && wfTask == 'Police Review' && wfStatus == 'Passed' && AInfo['Type']=='Secondary') {
	invoiceFee('FL077','STANDARD');
	}

if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['License Type'] == 'Temporary Establishment - Exposed Food') {
	addFee('FL005','LICFOOD','STANDARD',1,'N');
	}

if (appMatch('Licenses/Secondhand Dealer/NA/NA') && wfTask == 'Police Review' && wfStatus == 'Passed' && AInfo['Type']=='Primary') {
	invoiceFee('FL076','STANDARD');
	}

if (appMatch('Licenses/Laundry/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FL115','LICLAUND','STANDARD',1,'N');
	}

if (appMatch('Licenses/Itinerant Vendor/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FL118','LICITINVEN','STANDARD',1,'Y');
	}

if (appMatch('Licenses/Sexually Oriented Business/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Type']=='Initial') {
	addFee('FL093','LICSEX','STANDARD',1,'Y');
	}

if (appMatch('Licenses/Sexually Oriented Business Emp/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Type']=='Initial') {
	addFee('FL110','LICSEX','STANDARD',1,'N');
	}

if (appMatch('Licenses/Sexually Oriented Business Emp/NA/NA') && wfTask == 'Police Review' && wfStatus == 'Approved' && AInfo['Type']=='Renewal') {
	addFee('FL112','LICSEX','STANDARD',1,'N');
	invoiceFee('FL112','STANDARD');
	}

if (appMatch('Licenses/Vendor/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Temporary Vendor']=='Yes') {
	addFee('FL066','LICVEND','STANDARD',1,'Y');
	}

if (appMatch('Licenses/Tattoo and Body Piercing Employee/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Type of License'] == 'Body Piercing') {
	addFee('FL107','LICTBPEMP','STANDARD',1,'N');
	}

var D = new Date();
if (appMatch('Licenses/Car Dealer/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && D.getMonth() >=4) {
	showMessage=true;
	var T = 12-D.getMonth()+3;
	comment('Numb:'+T);
	addFee('FL090','LICCARDEAL','STANDARD',T,'N');
	}

if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['License Type'] == 'Recurrent Establishment - Exposed Food') {
	addFee('FL006','LICFOOD','STANDARD',1,'N');
	}

if (appMatch('Licenses/Car Dealer/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && D.getMonth() <=3) {
	showMessage=true;
	var D = new Date();
	var T = 3-D.getMonth();
	comment('Numb:'+T);
	addFee('FL090','LICCARDEAL','STANDARD',T,'N');
	}

if (appMatch('Licenses/Tattoo Body Piercing Employee/NA/NA') && wfTask == 'Application Submittal' && (wfStatus == 'Completed' || wfStatus == 'No Review Required') && AInfo['Type of License'] == 'Tattoo' && AInfo['Renewal']=='Yes') {
	addFee('FL103','LICTBPEMP','STANDARD',1,'Y');
	}

if (appMatch('Licenses/Tattoo Body Piercing Employee/NA/NA') && wfTask == 'Application Submittal' && (wfStatus == 'Completed' || wfStatus == 'No Review Required') &&  AInfo['Type of License'] == 'Body Piercing' && AInfo['Renewal']=='Yes') {
	addFee('FL108','LICTBPEMP','STANDARD',1,'Y');
	}

if (appMatch('Licenses/Tattoo Body Piercing Employee/NA/NA') && wfTask == 'Application Submittal' && (wfStatus == 'Completed' || wfStatus == 'No Review Required') && AInfo['Type of License'] == 'Tattoo and Body Piercing'  && AInfo['Renewal']=='Yes') {
	addFee('FL105','LICTBPEMP','STANDARD',1,'Y');
	}

if (appMatch('Licenses/Tattoo Body Piercing Employee/NA/NA') && wfTask == 'Application Submittal' && (wfStatus == 'Completed' || wfStatus == 'No Review Required') &&  AInfo['Type of License'] == 'Temporary Body Piercing') {
	addFee('FL110','LICTBPEMP','STANDARD',1,'Y');
	}

if (appMatch('Licenses/Tattoo Body Piercing Employee/NA/NA') && wfTask == 'Application Submittal' && (wfStatus == 'Completed' || wfStatus == 'No Review Required') &&  AInfo['Type of License'] == 'Temporary Tattoo') {
	addFee('FL109','LICTBPEMP','STANDARD',1,'Y');
	}

if (appMatch('Licenses/Tattoo Body Piercing Employee/NA/NA') && wfTask == 'Application Submittal' && (wfStatus == 'Completed' || wfStatus == 'No Review Required') && AInfo['Type of License'] == 'Temporary Tattoo/Body Piercing') {
	addFee('FL111','LICTBPEMP','STANDARD',1,'Y');
	}

if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['License Type'] == 'Meat Establishment, Warehouse, Food Processing Plant') {
	addFee('FL001','LICFOOD','STANDARD',1,'N');
	}

if (appMatch('Licenses/Alcohol/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	branch('COEP_LICENSE_ALCOHOL_ADDFEES');
	}

if (appMatch('Licenses/Flea Market/*/*') && wfTask == 'Completeness Check' && wfStatus == 'Approved' && AInfo['Renewal'] == 'Yes') {
	addFee('FL260','LICFLEAMARKET','STANDARD',1,'N');
	invoiceFee('FL260','STANDARD');
	}

if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['License Type'] == 'Seasonal Establishment - Exposed Food') {
	addFee('FL007','LICFOOD','STANDARD',1,'N');
	}

if (appMatch('Licenses/Flea Market/*/*') && wfTask == 'Completeness Check' && wfStatus == 'Approved' && AInfo['Renewal'] == 'No') {
	addFee('FL250','LICFLEAMARKET','STANDARD',1,'N');
	invoiceFee('FL250','STANDARD');
	}

if (appMatch('Licenses/Amplification/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Days Between Event and Application'] < 4) {
	addFee('FL090','LICAMP','STANDARD',1,'N');
	}

if (appMatch('Licenses/Temp Event/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Days Between Event and Application'] < 7) {
	addFee('FL090','LICTEMP','STANDARD',1,'N');
	}

if (appMatch('Licenses/Vendor/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Type'] == 'Secondary') {
	addFee('FL066','LICVEND','STANDARD',1,'Y');
	}

if (appMatch('Licenses/Animal/Breeders Permit/NA') && inspType == '1200 Site Inspection' && (inspResult == 'Passed' || inspResult == 'Pass')) {
	addFee('EA001','ANIMALBREEDER','STANDARD',1,'N');
	}

if (appMatch('Licenses/Animal/Establishment/Sales') && inspType == '1200 Site Inspection' && (inspResult == 'Passed' || inspResult == 'Pass')) {
	addFee('EA002','ANIMALESTSALES','STANDARD',1,'N');
	}

if (appMatch('Licenses/Animal/Exhibit or Show/NA') && inspType == '1200 Site Inspection' && (inspResult == 'Passed' || inspResult == 'Pass')) {
	addFee('EA015','ANIMALEXHIBIT','STANDARD',1,'N');
	}

if (appMatch('Licenses/Animal/Litter/NA') && inspType == '1200 Site Inspection' && (inspResult == 'Passed' || inspResult == 'Pass')) {
	addFee('EA007','ANIMALLITTER','STANDARD',1,'N');
	}

if (appMatch('Licenses/Animal/Fowl, Rabbits, Livestock/NA') && inspType == '1200 Site Inspection' && (inspResult == 'Passed' || inspResult == 'Pass') && AInfo['SITE INFORMATION.Animal Size'] == 'Small') {
	addFee('EA10','ANIMALFOWLS','STANDARD',1,'N');
	}

if (appMatch('Licenses/Animal/Fowl, Rabbits, Livestock/NA') && inspType == '1200 Site Inspection' && (inspResult == 'Passed' || inspResult == 'Pass') && (AInfo['SITE INFORMATION.Animal Size'] == 'Large' || AInfo['SITE INFORMATION.Animal Size'] == 'Both')) {
	addFee('EA005','ANIMALFOWLS','STANDARD',1,'N');
	}

if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['License Type'] == 'Home Child Care Facility - Less than 12 Children') {
	addFee('FL008','LICFOOD','STANDARD',1,'N');
	}

if (appMatch('Licenses/Security Alarm/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Term of License'] == '1 Year') {
	addFee('FL021','LICSECALM','STANDARD',1,'N');
	}

if (appMatch('Licenses/Security Alarm/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Term of License'] == '2 Year') {
	addFee('FL025','LICSECALM','STANDARD',1,'N');
	}

if (appMatch('Licenses/Security Alarm/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['Term of License'] == '3 Year') {
	addFee('FL030','LICSECALM','STANDARD',1,'N');
	}

if (appMatch('Licenses/Tattoo Studio/NA/NA') && wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue') {
	addFee('FLTS001', 'LICTATTSTUDIO ', STANDARD, 1, 'Y');
	}

if (appMatch('Licenses/Food/NA/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed' && AInfo['License Type'] == 'Day Care Center - More than 12 Recipients') {
	addFee('FL009','LICFOOD','STANDARD',1,'N');
	}
`^
ES_LICENSES_RENEWAL_ADD_FEE^`
if (appMatch('Licenses/Renewal/*/*')) {
	addFee('FL021','RENEWALLICSECALM','STANDARD',1,'N');
	invoiceFee('FL021','STANDARD');
	}
`^
ES_LICENSE_AUTO_ASSIGN_INSPECTOR^`
if (inspType == '1400 Site Inspection') {
	areaInspector = 'CAHALANSM';
	}

if (inspType == '1500 Site Inspection') {
	areaInspector = 'TERESA.CONTRERAS';
	}

if (inspType == '1505 Fire Dept') {
	areaInspector = 'ORTIZMD';
	}

if (inspType == '1700 Site Inspection') {
	areaInspector = 'PD CODE';
	}
`^
ES_LICENSE_EDIT_EXPIRATION^`
if ((appMatch('Licenses/Hotel Motel/*/*') || appMatch('Licenses/Amusement Occupation Tax/*/*')) && wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['Term of License'] == '1 Year') {
	editAppSpecific('Expiration Date',dateAddMonths(null, 12));
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null, 12));
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/Car Dealer/*/*') && wfTask == 'Issue' && wfStatus == 'Issued' && (AInfo['Term of License'] == '1 Year' || AInfo['Term of License'] == null)) {
	editAppSpecific('Expiration Date', dateAddMonths(null, 12));
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,12));
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/Flea Market/*/*') && wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAddMonths(null, 12));
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,12));
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/Car Dealer/*/*') && wfTask == 'Issue' && wfStatus == 'Issued'  && compareDate('03/31/'+sysDate.getYear()) == true) {
	editAppSpecific('Expiration Date', dateAddMonths('03/31/'+sysDate.getYear(),12));
	}

if (appMatch('Licenses/Lodging/*/*') && wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAddMonths(null, 12));
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,12));
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/Mobile Service Unit/*/*') && wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAddMonths(wfDateMMDDYYYY.toString(),12));
	}

if (appMatch('Licenses/Residential Parking/*/*') && wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAddMonths(null, 12));
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,12));
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/Sexually Oriented Business/*/*') && wfTask == 'Application Submittal' && wfStatus == 'Temp License Issued') {
	editAppSpecific('Expiration Date', dateAdd(wfDateMMDDYYYY.toString(), 20));
	}

if (appMatch('Licenses/Sexually Oriented Business/*/*') && wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAddMonths(wfDateMMDDYYYY.toString(), 12));
	}

if (appMatch('Licenses/Sexually Oriented Business Emp/*/*') && wfTask == 'Application Submittal' && wfStatus == 'Temp License Issued') {
	editAppSpecific('Expiration Date', dateAdd(wfDateMMDDYYYY.toString(), 20));
	}

if (appMatch('Licenses/Swimming Pool and Spa/*/*') && wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAddMonths(wfDateMMDDYYYY.toString(), 12));
	}

if ((appMatch('Licenses/Tattoo Body Piercing Employee/*/*') || appMatch('Licenses/Lodging/*/*') )&& wfTask == 'Issue' && (wfStatus == 'Issued' || wfStatus == 'Issue') && AInfo['Expiration Date'] == null) {
	editAppSpecific('Expiration Date', dateAddMonths(null, 12));
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,12));
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/Sign/*/*') && wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['Term of License'] == '1 Year') {
	editAppSpecific('Expiration Date', dateAddMonths(null, 12));
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,12));
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/Sexually Oriented Business Emp/*/*') && wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['Expiration Date'] != null) {
	editAppSpecific('Expiration Date', dateAddMonths(AInfo['Expiration Date'].toString(), 12));
	}

if (appMatch('Licenses/Temp Event/*/*') && wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAdd(AInfo['End Date'], 1));
	}

if (appMatch('Licenses/Vendor/*/*') && wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAddMonths(null, 12));
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,12));
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/Shoe Shine/*/*') && wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAddMonths(wfDateMMDDYYYY.toString(), 12));
	}

if ((appMatch('Licenses/Hotel Motel/*/*') || appMatch('Licenses/Amusement Occupation Tax/*/*')) && wfTask == 'Issue' && wfStatus == 'Issue Renewal' && AInfo['Term of License'] == '1 Year') {
	editAppSpecific('Expiration Date',dateAddMonths(AInfo['Expiration Date'], 12));
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(AInfo['Expiration Date']);
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/Laundry/*/*') && wfTask == 'Issue' && wfStatus == 'Issue Renewal' && AInfo['Term of License'] == '1 Year') {
	editAppSpecific('Expiration Date',dateAddMonths(AInfo['Expiration Date'], 12));
	}

if (appMatch('Licenses/Car Dealer/*/*') && wfTask == 'Issue' && wfStatus == 'Issue Renewal' && (AInfo['Term of License'] == '1 Year' || AInfo['Term of License'] == null)) {
	editAppSpecific('Expiration Date', dateAddMonths(AInfo['Expiration Date'], 12));
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(AInfo['Expiration Date']);
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/Home Occupation/*/*') && wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAddMonths(null, 12));
	}

if (appMatch('Licenses/Charitable Solicitation/*/*') && wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAdd(wfDateMMDDYYYY, 365));
	}

if ((appMatch('Licenses/Itinerant Vendor/*/*') || appMatch('Licenses/Fire/*/*')) && wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['Expiration Date'] == null) {
	editAppSpecific('Expiration Date', dateAddMonths(null, 12));
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,12));
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/Animal/*/*') && (!appMatch('Licenses/Animal/Breeders Permit/NA') || !appMatch('Licenses/Animal/Exhibit or Show/NA') || !appMatch('Licenses/Animal/Litter/NA')) && wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('EXPIRATION DATE', dateAddMonths(null, 12));
	}

if (appMatch('Licenses/Animal/Exhibit or Show/NA') && wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('EXPIRATION DATE', dateAdd(null, 30));
	}

if (appMatch('Licenses/Animal/Breeders Permit/NA') && wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('EXPIRATION DATE', dateAddMonths(null, 36));
	}

if (appMatch('Licenses/Security Alarm/*/*') && wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['Term of License'] == '3 Year') {
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,36));
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/CreditAccessBusiness/*/*') && wfTask == 'Issued' && wfStatus == 'Issued' && AInfo['License Term'] == '1') {
	editAppSpecific('Expiration Date', dateAddMonths(wfDateMMDDYYYY.toString(),12));
	}

if (appMatch('Licenses/CreditAccessBusiness/*/*') && wfTask == 'Issued' && wfStatus == 'Issued' && AInfo['License Term'] == '2') {
	editAppSpecific('Expiration Date', dateAddMonths(wfDateMMDDYYYY.toString(),24));
	}

if (appMatch('Licenses/DowntownResidentialParking/*/*') && wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAddMonths(null, 12));
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,12));
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/Alcohol/NA/NA') && wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['Term of License'] == '1 Year') {
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,12));
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/Alcohol/NA/NA') && wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['Term of License'] == '2 Year') {
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,24));
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/Car Dealer/*/*') && wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['Term of License'] == '2 Year') {
	editAppSpecific('Expiration Date', dateAddMonths(null, 24));
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,24));
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/Laundry/*/*') && wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['Term of License'] == '1 Year') {
	editAppSpecific('Expiration Date',dateAddMonths(null, 12));
	}

if (appMatch('Licenses/Car Dealer/*/*') && wfTask == 'Issue' && wfStatus == 'Issue Renewal' && AInfo['Term of License'] == '2 Year') {
	editAppSpecific('Expiration Date', dateAddMonths(AInfo['Expiration Date'], 24));
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(AInfo['Expiration Date']);
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/Laundry/*/*') && wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['Term of License'] == '2 Year') {
	editAppSpecific('Expiration Date',dateAddMonths(null, 24));
	}

if (appMatch('Licenses/Laundry/*/*') && wfTask == 'Issue' && wfStatus == 'Issue Renewal' && AInfo['Term of License'] == '2 Year') {
	editAppSpecific('Expiration Date',dateAddMonths(AInfo['Expiration Date'], 24));
	}

if (appMatch('Licenses/Hotel Motel/*/*') && wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['Term of License'] == '2 Year') {
	editAppSpecific('Expiration Date', dateAddMonths(null, 24));
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,24));
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/Hotel Motel/*/*') && wfTask == 'Issue' && wfStatus == 'Issue Renewal' && AInfo['Term of License'] == '2 Year') {
	editAppSpecific('Expiration Date', dateAddMonths(AInfo['Expiration Date'], 24));
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(AInfo['Expiration Date']);
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/Sign/*/*') && wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['Term of License'] == '2 Year') {
	editAppSpecific('Expiration Date', dateAddMonths(null, 24));
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,24));
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/City Registration/*/*') && wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['Term of License'] == '1 Year') {
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,12));
	thisLic.setStatus('Active');
	editAppSpecific('Expiration Date',dateAddMonths(null, 12));
	}

if (appMatch('Licenses/City Registration/*/*') && wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['Term of License'] == '2 Year') {
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,24));
	thisLic.setStatus('Active');
	editAppSpecific('Expiration Date',dateAddMonths(null, 24));
	}

if (appMatch('Licenses/City Registration/*/*') && wfTask == 'Issue' && wfStatus == 'Renewal' && AInfo['Term of License'] == '1 Year') {
	editAppSpecific('Expiration Date', dateAddMonths(AInfo['Expiration Date'], 12));
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(AInfo['Expiration Date']);
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/City Registration/*/*') && wfTask == 'Issue' && wfStatus == 'Renewal' && AInfo['Term of License'] == '2 Year') {
	editAppSpecific('Expiration Date', dateAddMonths(AInfo['Expiration Date'], 24));
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(AInfo['Expiration Date']);
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/Security Alarm/*/*') && wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['Term of License'] == '1 Year') {
	thisLic = new licenseObject(capId);
	thisLic.setExpiration(dateAddMonths(null,12));
	thisLic.setStatus('Active');
	}

if (appMatch('Licenses/Secondhand Dealer/*/*') && wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAddMonths(null, 12));
	}

if (appMatch('Licenses/Money Exchange/*/*') && wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAddMonths(null, 12));
	}

if (appMatch('Licenses/Trailer Court/*/*') && wfTask == 'Issue' && wfStatus == 'Issued' && compareDate('03/31/'+sysDate.getYear()) == false) {
	editAppSpecific('Expiration Date', '03/31/'+sysDate.getYear());
	}

if (appMatch('Licenses/Trailer Court/*/*') && wfTask == 'Issue' && wfStatus == 'Issued' && compareDate('03/31/'+sysDate.getYear()) == true) {
	editAppSpecific('Expiration Date', dateAddMonths('03/31/'+sysDate.getYear(),12));
	}
`^
ES_LICENSE_FIRE_COO^`
if (appMatch('Licenses/Fire/NA/NA')) {
	var newChild = createChild('Building','Existing Building C of O','NA','NA','Child of record ID ' + capIDString);
	copyAppSpecific(newChild);
	copyASITables(capId,newChild);
	copyAddresses(capId,newChild);
	copyOwner(capId,newChild);
	}

var tempCapId = capId;
capId = newChild;
closeTask('Application Submittal','Completed','Closed by Script');
deactivateTask('Building Review');
activateTask('Issue Certificate');
capId = tempCapId;
`^
ES_LICPOOLSPA_ADDFEES^`
if (typeof(POOLANDSPAINFORMATION ) == 'object') {
	for (eachrow in POOLANDSPAINFORMATION ) branch('ES_LICPOOLSPA_ADDFEES_LOOP');
	}
`^
ES_LICPOOLSPA_ADDFEES_LOOP^`
asiRow = POOLANDSPAINFORMATION [eachrow];
showMessage=true;
if (asiRow['No. of Pools'] > 0 && AInfo['New Applicant']=='Yes') {
	addFee('FL095','LICPOOL','STANDARD',asiRow['No. of Pools'],'N');
	}

if (asiRow['No. of Spas'] >  0 && AInfo['New Applicant']=='Yes') {
	addFee('FL096','LICPOOL','STANDARD',asiRow['No. of Spas'] ,'N');
	}

comment('Pools'+asiRow['No. of Pools']+' Spas:'+asiRow['No. of Spas'] +'New Applicant:'+AInfo['New Applicant']);
if (asiRow['No. of Pools'] > 0 && AInfo['New Applicant']=='No') {
	addFee('FL097','LICPOOL','STANDARD',asiRow['No. of Pools'],'N');
	}

if (asiRow['No. of Spas'] >  0 && AInfo['New Applicant']=='No') {
	addFee('FL098','LICPOOL','STANDARD',asiRow['No. of Spas'] ,'N');
	}
`^
ES_LIC_INSP_UPDATE_WF^`
if (appMatch('Licenses/Alcohol/*/*') && isTaskActive('Inspection') && inspType == '1400 Site Inspection' && inspResult == 'Pass') {
	closeTask('Inspection','Passed','Updated via Event Script');
	}

if ((appMatch('Licenses/Laundry/*/*') || appMatch('Licenses/Trailer Court/*/*')) && isTaskActive('2nd Inspection') && inspType == '1600 Site Inspection' && (inspResult == 'Fail' || inspResult == 'Fail w/refee')) {
	updateTask('2nd Inspection','Fail w ReFee','Updated via Event Script');
	}

if (appMatch('Licenses/Tattoo Body Piercing Employee/*/*')  && isTaskActive('1st Inspection') && inspType == '1600 Site Inspection' && inspResult == 'Pass') {
	closeTask('1st Inspection','Passed','Updated via Event Script');
	}

if ((appMatch('Licenses/Tattoo Body Piercing Employee/*/*') || appMatch('Licenses/Swimming Pool and Spa/*/*')) && isTaskActive('1st Inspection') && inspType == '1600 Site Inspection' && (inspResult == 'Fail' || inspResult == 'Fail w/re-fee')) {
	updateTask('1st Inspection','Failed','Updated via Event Script');
	}

if (appMatch('Licenses/Tattoo Body Piercing Employee/*/*') && isTaskActive('2nd Inspection') && inspType == '1600 Site Inspection' && inspResult == 'Pass') {
	updateTask('2nd Inspection','Passed','Updated via Event Script');
	}

if ((appMatch('Licenses/Tattoo Body Piercing Employee/*/*') || appMatch('Licenses/Swimming Pool and Spa/*/*')) && isTaskActive('2nd Inspection') && inspType == '1600 Site Inspection' && (inspResult == 'Fail' || inspResult == 'Fail w/re-fee')) {
	updateTask('2nd Inspection','Fail w ReFee','Updated via Event Script');
	}

if (appMatch('Licenses/Secondhand Dealer/*/*') && isTaskActive('Inspections') && inspType == '1700 Site Inspection' && inspResult == 'Pass') {
	updateTask('Inspection','Passed','Updated via Event Script');
	}

if (appMatch('Licenses/Secondhand Dealer/*/*') && isTaskActive('Inspections') && inspType == '1700 Site Inspection' && (inspResult == 'Fail' || inspResult == 'Fail w/refee')) {
	updateTask('Inspection','Cited','Updated via Event Script');
	}

if (appMatch('Licenses/Swimming Pool and Spa/*/*') && isTaskActive('1st Inspection') && checkInspectionResult('1600 Site Inspection', 'Pass')) {
	showMessage=true;
	comment('Inspections are present and have passed!');
	closeTask('1st Inspection','Passed','Updated via Event Script','Updated Via Event Script');
	}

if (appMatch('Licenses/Swimming Pool and Spa/*/*') && isTaskActive('2nd Inspection') && checkInspectionResult('1610 Annual Site Inspection', 'Pass')) {
	showMessage=true;
	comment('Inspections are present and have passed!');
	closeTask('2nd Inspection','Passed','Updated via Event Script','Updated Via Event Script');
	}

if (appMatch('Licenses/Animal/*/*') && inspType == '1200 Site Inspection' && (inspResult == 'Passed' || inspResult == 'Pass') && isTaskActive('Inspection') == true && isTaskComplete('Inspection') == false) {
	updateTask('Inspection','Approved',' ',' ');
	deactivateTask('Inspection');
	activateTask('Issue');
	}

if (appMatch('Licenses/Alcohol/*/*') && isTaskActive('Inspection') && inspType == '1400 Site Inspection' && (inspResult == 'Fail' || inspResult == 'Fail w/refee')) {
	branchTask('Inspection','Failed','Updated via Event Script');
	}

if ((appMatch('Licenses/Home Occupation/*/*') || appMatch('Licenses/Sexually Oriented Business/*/*')) && isTaskActive('Inspection') && inspType == '1400 Site Inspection' && inspResult == 'Pass') {
	closeTask('Inspection','Passed','Updated via Event Script');
	}

if ((appMatch('Licenses/Home Occupation/*/*') || appMatch('Licenses/Sexually Oriented Business/*/*')) && isTaskActive('Inspection') && inspType == '1400 Site Inspection' && (inspResult == 'Fail' || inspResult == 'Fail w/refee')) {
	updateTask('Inspection','Failed','Updated via Event Script');
	}

if (appMatch('Licenses/Fire/*/*') && isTaskActive('Fire Inspection') && inspType == '1500 Site Inspection' && inspResult == 'Pass') {
	closeTask('Fire Inspection','Passed','Updated via Event Script');
	}

if (appMatch('Licenses/Fire/*/*') && isTaskActive('Fire Inspection') && inspType == '1500 Site Inspection' && (inspResult == 'Fail' || inspResult == 'Fail w/refee')) {
	updateTask('Fire Inspection','Failed','Updated via Event Script');
	}

if ((appMatch('Licenses/Laundry/*/*') || appMatch('Licenses/Trailer Court/*/*')) && isTaskActive('1st Inspection') && inspType == '1600 Site Inspection' && inspResult == 'Pass') {
	closeTask('1st Inspection','Passed','Updated via Event Script');
	}

if ((appMatch('Licenses/Laundry/*/*') || appMatch('Licenses/Trailer Court/*/*')) && isTaskActive('1st Inspection') && inspType == '1600 Site Inspection' && (inspResult == 'Fail' || inspResult == 'Fail w/refee')) {
	updateTask('1st Inspection','Failed','Updated via Event Script');
	}

if ((appMatch('Licenses/Laundry/*/*') || appMatch('Licenses/Trailer Court/*/*')) && isTaskActive('2nd Inspection') && inspType == '1600 Site Inspection' && inspResult == 'Pass') {
	updateTask('2nd Inspection','Passed','Updated via Event Script');
	}
`^
ES_MISSED_GARBAGE_LOOP^`
if (asiRow ['Reason'] == 'Bin(s) dropped into truck') {
	var newChild = createChild('AMS','ESD','Containers','Container Replacement',capId);
	var savedcapid = capId;
	comment('capid ' + capId);
	capId = newChild;
	comment ('new capID' + capId);
	assignTask('Work Order Submittal','CONTRERASBX');
	capId = savedcapid;
	}
`^
ES_MOVE_WORKDESC_SHORTNOTES^`
theLength = workDescGet(capId).length();
showMessage=true;
comment('Length is:'+theLength+' Capid:'+capid);
if (theLength > 50) {
	theLength = 50;
	}

updateShortNotes(workDescGet(capId).substring(0,theLength));
`^
ES_NEWDOCUMENT_CASE_NOTIFICATION^`
emailAddrs='';
sender= 'accela@elpasotexas.gov';
subject = 'Case Manager,  Record ' + capIDString  + ' has new documents uploaded.';
emailBody = 'Notification for Case Manager. New Documents have been uploaded to this record Id.';
assignedToUser = getAssignedToStaff();
if(assignedToUser != null) emailAddrs = aa.person.getUser(assignedToUser).getOutput().getEmail();
if ((emailAddrs != undefined && emailAddrs != '' && emailAddrs != null)) {
	email(emailAddrs, sender, subject,emailBody);
	}
`^
ES_PLAC_CLOSE_LOOP^`
asiRow = GROUPHOUSING[eachrow];
subject1 = ('A group home has been verified, registered or approved. The record number is ' + capIDString + '.');
body1 = ('A group home has been verified, registered or approved. The record number is ' + capIDString + '.');
subject2 = ('A group home requiring local licensing has been verified, registered or approved. The record number is ' + capIDString + '.');
body2 = ('A group home requiring local licensing has been verified, registered or approved. The record number is ' + capIDString + '.');
if (wfTask == 'Close' && wfStatus == 'Close' && asiRow['Group Housing'] != 'null') {
	email('SotoMX@elpasotexas.gov','HoffmanAP@elpasotexas.gov','[DEV] ' +  'accela@elpasotexas.gov', subject1, body1);
	}

if (wfTask == 'Close' && wfStatus == 'Close' && asiRow['Licenses'] != 'null') {
	email('CantuBR@elpasotexas.gov', 'accela@elpasotexas.gov','[DEV] ' +  subject2, body2);
	}
`^
ES_PLAC_DROPDOWN_LOOP^`
asiRow =GROUPHOUSING[eachrow];
if (asiRow['Group Housing'] == 'Homeless Shelter' || asiRow['Group Housing'] == 'Halfway House' || asiRow['Group Housing'] == 'Group Residential Facility' || asiRow['Group Housing'] == 'Disabled Group Dwelling') {
	activateTask('Site Verification');
	closeTask('Application Submittal','Submitted', 'Closed by script', 'Closed by script');
	assignTask('Site Verification','CAHALANSM');
	activateTask('Close');
	}

if (asiRow['Licenses'] == 'Boarding Home' || asiRow['Licenses'] == 'Adult Foster Care Facility' || asiRow['Licenses'] == 'Lodging House') {
	activateTask('Close');
	closeTask('Application Submittal','Submitted', 'Closed by script');
	}
`^
ES_PLANNING_ACA_EMAIL_NOTIFICATION^`
if (appMatch('Planning/Zoning/*/*')) {
	email('HOFFMANAP@elpasotexas.gov;
	RUBIOAX@elpasotexas.gov','accela@elpasotexas.gov',('ACA Record Number: ' + capIDString), 'The Record Number ' + capIDString + ' has been submitted');
	}

if (appMatch('Planning/Subdivision/*/*')) {
	email('AustinAJ@elpasotexas.gov;
	OrtizNX@elpasotexas.gov','accela@elpasotexas.gov',('ACA Record Number: ' + capIDString), 'The Record Number ' + capIDString + ' has been submitted');
	}
`^
ES_PLANNING_AMENDMNT_ACA_ADD_FEES^`
if (publicUser) {
	updateFee('FP004','PLNCNDAMND','STANDARD',1,'Y','N');
	updateFee('CC003','PLNCNDAMND','STANDARD',1,'Y','N');
	updateFee('TF001A','PLNCNDAMND','STANDARD',1,'Y','N');
	}
`^
ES_PLANNING_APP_SUBMITTED_ACA_EMAIL^`
emailAddr = undefined;
if (publicUser) {
	conType = conArray[y].getPeople().contactType;
	emailAddr = conArray[y].getPeople().email;
	lastName = conArray[y].getPeople().lastName;
	firstName= conArray[y].getPeople().firstName;
	middleName= conArray[y].getPeople().middleName;
	userObj = aa.person.getUser(firstName,middleName,lastName).getOutput();
	sender= 'accela@elpasotexas.gov';
	subject = ('Your Subdivision Application' + capIDString  + ' has been submitted');
	emailBody = 'Your Subdivision application has been submitted.<BR> We will start processing it and will notify you of any updates.';
	}

if (emailAddr != undefined && conType =='APPLICANT/DEVELOPER') {
	email(emailAddr , sender, subject, emailBody);
	}
`^
ES_PLANNING_DETSITEP_ACA_ADD_FEES^`
feeNumber = '';
parcelAcreage =  AInfo['Parcel Acreage'];
if(parcelAcreage  == 'Up to 1 acre') feeNumber = 321.18;
if(parcelAcreage  == '1.1 to 3.0 acres') feeNumber = 378.42;
if(parcelAcreage  == '3.1 to 5.0 acres') feeNumber = 450.50;
if(parcelAcreage  == '5.1 to 10.0 acres') feeNumber = 511.98;
if(parcelAcreage  == '10.1 to more acres') feeNumber = 645.54;
showMessage=true;
comment('=======> feeNumber is ' + feeNumber);
if (publicUser && parcelAcreage  != '') {
	updateFee('FP006','PLNDSP','STANDARD',feeNumber,'Y','N');
	updateFee('CC003','PLNDSP','STANDARD',1,'Y','N');
	updateFee('TF001A','PLNDSP','STANDARD',1,'Y','N');
	}
`^
ES_PLANNING_DTL_SITE_PLAN_ADD_FEES^`
feeNumber = '';
parcelAcreage =  AInfo['Parcel Acreage'];
if(parcelAcreage  == 'Up to 1 acre') feeNumber = 321.18;
if(parcelAcreage  == '1.1 to 3.0 acres') feeNumber = 378.42;
if(parcelAcreage  == '3.1 to 5.0 acres') feeNumber = 450.50;
if(parcelAcreage  == '5.1 to 10.0 acres') feeNumber = 511.98;
if(parcelAcreage  == '10.1 to more acres') feeNumber = 645.54;
showMessage=true;
comment('=======> feeNumber is ' + feeNumber);
if (parcelAcreage  != '') {
	updateFee('FP006','PLNDSP','STANDARD',feeNumber,'Y','N');
	}
`^
ES_PLANNING_FEES^`
if (appMatch('Planning/Subdivision/Improvement Permits/ROW') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FP001','PLNIMPROW','STANDARD',1,'N');
	}

if (appMatch('Planning/Zoning/PWSF Communications/NA') && wfTask == 'Completeness Check' && wfStatus == 'Passed') {
	addFee('FB039','BLDGGEN','STANDARD',1,'N');
	}

if (appMatch('Planning/Subdivision/Subdivision/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FP002','PLNIMPROW','STANDARD',1,'N');
	}

if (appMatch('Planning/Zoning/Detailed Site Plan/NA') && wfTask == 'Application Submittal' && wfStatus == 'Submitted' && AInfo['Parcel Acreage'] != null) {
	branch('ES_PLANNING_DTL_SITE_PLAN_ADD_FEES');
	}

if (appMatch('Planning/Zoning/Rezoning/NA') && wfTask == 'Application Submittal' && wfStatus == 'Submitted' && AInfo['GENERAL.Field Acreage'] > 0) {
	addFee('FP007','PLNREZON','STANDARD',1,'N');
	}

if (appMatch('Planning/Zoning/Special Permit/NA') && wfTask == 'Application Submittal' && wfStatus == 'Submitted' && AInfo['Parcel Acreage'] != null) {
	branch('ES_PLANNING_SPECIAL_PERMIT_ADD_FEES');
	}

if (appMatch('Planning/Subdivision/Ammending Final/NA') && wfTask == 'Application Submittal' && wfStatus == 'Submitted') {
	addFee('FP009','PLNAMNDF','STANDARD',1,'N');
	}

if (appMatch('Planning/Subdivision/Plat Determination/NA') && wfTask == 'Application Submittal' && wfStatus == 'Submitted') {
	addFee('FP010','PLNPLAT','STANDARD',1,'N');
	}

if (appMatch('Planning/Zoning/Sign Demo Permit/NA') && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	addFee('FP048','PLNSGNDEM','STANDARD',1,'N');
	}

if (appMatch('Engineering/Flood Zone Verification/NA/NA') && wfTask == 'Request Received' && wfStatus == 'Completed') {
	addFee('FP049','ENGFLD','STANDARD',1,'N');
	}
`^
ES_PLANNING_REZONING_ACA_ADD_FEES^`
if (publicUser && parcelAcreage  != '') {
	updateFee('FP007','PLNREZON','STANDARD',feeNumber,'Y','N');
	updateFee('CC003','PLNREZON','STANDARD',1,'Y','N');
	updateFee('TF001A','PLNREZON','STANDARD',1,'Y','N');
	}

feeNumber = '';
parcelAcreage =  AInfo['Parcel Acreage'];
if(parcelAcreage  == 'Up to 1 acre') feeNumber = 835.28;
if(parcelAcreage  == '1.1 to 10 acres') feeNumber = 902.06;
if(parcelAcreage  == '10.1 to 30 acres') feeNumber = 968.84;
if(parcelAcreage  == '30.1 to 50 acres') feeNumber = 1029.26;
if(parcelAcreage  == '50.1 to 75 acres') feeNumber = 1090.74;
if(parcelAcreage  == '75.1 to more acres') feeNumber = 1541.24;
showMessage=true;
comment('=======> feeNumber is ' + feeNumber);
`^
ES_PLANNING_SPECIALP_ACA_ADD_FEES^`
feeNumber = '';
parcelAcreage =  AInfo['Parcel Acreage'];
if(parcelAcreage  == 'Up to 1 acre') feeNumber = 645.54;
if(parcelAcreage  == '1.1 to 3.0 acres') feeNumber = 707.02;
if(parcelAcreage  == '3.1 to 5.0 acres') feeNumber = 771.68;
if(parcelAcreage  == '5.1 to 10.0 acres') feeNumber = 836.34;
if(parcelAcreage  == '10.1 to more acres') feeNumber = 963.54;
showMessage=true;
comment('=======> feeNumber is ' + feeNumber);
if (publicUser && parcelAcreage  != '') {
	updateFee('FP008','PLNSP','STANDARD',feeNumber,'Y','N');
	updateFee('CC003','PLNSP','STANDARD',1,'Y','N');
	updateFee('TF001A','PLNSP','STANDARD',1,'Y','N');
	}
`^
ES_PLANNING_SPECIAL_PERMIT_ADD_FEES^`
feeNumber = '';
parcelAcreage =  AInfo['Parcel Acreage'];
if(parcelAcreage  == 'Up to 1 acre') feeNumber = 645.54;
if(parcelAcreage  == '1.1 to 3.0 acres') feeNumber = 707.02;
if(parcelAcreage  == '3.1 to 5.0 acres') feeNumber = 771.68;
if(parcelAcreage  == '5.1 to 10.0 acres') feeNumber = 836.34;
if(parcelAcreage  == '10.1 to more acres') feeNumber = 963.54;
showMessage=true;
comment('=======> feeNumber is ' + feeNumber);
if (parcelAcreage  != '') {
	updateFee('FP008','PLNDSP','STANDARD',feeNumber,'Y','N');
	}
`^
ES_PLAN_ASSIGN_NOTIFICATIONS^`
comment('im at ES_PLAN_ASSIGN_NOTIFICATIONS');
if (AInfo['Fire Review'] == 'Yes') {
	email('BartleyRE@elpasotexas.gov;
	FloresLU@elpasotexas.gov', 'accela@elpasotexas.gov', 'Fire Review is Active', 'Please review task Fire  Review of Record Number '+capIDString);
	}

if (AInfo['Subdiv Improv Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov', 'Subdiv Improv Review is Active', 'Please review task Subdiv Improv Review of Record Number '+capIDString);
	}

if (AInfo['El Paso Electric Co Review'] == 'Yes') {
	email('gloria.franco@epelectric.com;
	william.eggleston@epelectric.com;
	joann.blair@epelectric.com', 'accela@elpasotexas.gov', 'El Paso Electric Co Review is Active', 'Please review task El Paso Electric Co Review of Record Number '+capIDString);
	}

if (AInfo['County Water Improv Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov', 'County Water Improv Review is Active', 'Please review task County Water Improv Review of Record Number '+capIDString);
	}

if (AInfo['YISD Review'] == 'Yes') {
	email('jbooher@yisd.net;
	rcarrera3@yisd.net', 'accela@elpasotexas.gov', 'YISD Review is Active', 'Please review task YISD Review of Record Number '+capIDString);
	}

if (AInfo['AT and T Review'] == 'Yes') {
	email('dm8486@att.com', 'accela@elpasotexas.gov', 'AT and T Review is Active', 'Please review task AT and T Review of Record Number '+capIDString);
	}

if (AInfo['MPO Review'] == 'Yes') {
	email('MedinaMX@elpasotexas.gov;
	Iramos@elpasompo.org', 'accela@elpasotexas.gov', 'MPO Review is Active', 'Please review task MPO Review of Record Number '+capIDString);
	}

if (AInfo['BPI Review'] == 'Yes') {
	email('Morrison-VegaVX@elpasotexas.gov;
	EstalaJO@elpasotexas.gov', 'accela@elpasotexas.gov', 'BPI Review is Active', 'Please review task BPI Review of Record Number '+capIDString);
	}

if (AInfo['DPH Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov', 'DPH Review is Active', 'Please review task DPH Review of Record Number ' + capIDString);
	}

if (AInfo['Transportation Planning Review'] == 'Yes') {
	email('LopezAR@elpasotexas.gov;
	SmithKW@elpasotexas.gov', 'accela@elpasotexas.gov', 'Transportation Planning Review is Active', 'Please review task Transportation Planning Review of Record Number ' + capIDString);
	}

var TSI = new Array();
var emailTo = 'accela@elpasotexas.gov';
if (AInfo['Sun Metro Review'] == 'Yes') {
	email('EsparzaEX@elpasotexas.gov;
	GarciaCK@elpasotexas.gov;
	BryantAM@elpasotexas.gov', 'accela@elpasotexas.gov', 'Sun Metro Review is Active', 'Please review task Sun Metro Review of Record Number ' + capIDString);
	}

if (AInfo['CAD Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov', 'CAD Review is Active', 'Please review task CAD Review of Record Number ' + capIDString);
	}

if (AInfo['EPISD Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov', 'EPISD Review is Active', 'Please review task EPISD Review of Record Number ' + capIDString);
	}

if (AInfo['CISD Review'] == 'Yes') {
	email('greveles@canutillo-isd.org;
	abarraza@canutillo-isd.org', 'accela@elpasotexas.gov', 'CISD Review is Active', 'Please review task CISD Review of Record Number ' + capIDString);
	}

if (AInfo['Texas Gas Serv Review'] == 'Yes') {
	email('eroman@txgas.com;
	lcruiz0716@gmail.com', 'accela@elpasotexas.gov', 'Texas Gas Serv Review is Active', 'Please review task Texas Gas Serv Review of Record Number ' + capIDString);
	}

if (AInfo['El Paso Water Utilities Review'] == 'Yes') {
	email('flopez@epwu.org;
	gcedillos@epwu.org;
	acastillo@epwu.org', 'accela@elpasotexas.gov', 'El Paso Water Utilities Review is Active', 'Please review task El Paso Water Utilities Review of Record Number ' + capIDString);
	}

if (AInfo['City Eng Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov', 'City Eng Review is Active', 'Please review task City Eng Review of Record Number ' + capIDString);
	}

if (AInfo['Parks Review'] == 'Yes') {
	email('DeLaRosaJA@elpasotexas.gov;
	NovakTA@elpasotexas.gov', 'accela@elpasotexas.gov', 'Parks Review is Active', 'Please review task Parks Review of Record Number ' + capIDString);
	}

if (AInfo['ESD Review'] == 'Yes') {
	email('AvitiaJX@elpasotexas.gov;
	Manuel.A.Morales2@elpasoatexas.gov', 'accela@elpasotexas.gov', 'ESD Review is Active', 'Please review task ESD Review of Record Number ' + capIDString);
	}

if (AInfo['Post Office Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov', 'Post Office Review is Active', 'Please review task Post Office Review of Record Number ' + capIDString);
	}

loadTaskSpecific(TSI,capId);
if (AInfo['County Eng Review'] == 'Yes') {
	email('rrivera@epcounty.com;
	lrodriguez@epcounty.com', 'accela@elpasotexas.gov', 'County Eng Review is Active', 'Please review task County Eng Review of Record Number ' + capIDString);
	}

if (AInfo['SISD Review'] == 'Yes') {
	email('rpadil05@sisd.net;
	jjaime@sisd.net', 'accela@elpasotexas.gov', 'SISD Review is Active', 'Please review task SISD Review of Record Number '+capIDString);
	}

if (AInfo['Cable TV Review'] == 'Yes') {
	email('ray.mendoza@twcable.com', 'accela@elpasotexas.gov', 'Cable TV Review is Active', 'Please review Cable TV task  Review of Record Number '+capIDString);
	}

if (AInfo['TXDot Review'] == 'Yes') {
	email('Robert.Flores9@txdot.gov;
	James.Stevenson@txdot.gov;
	Gus.Sanchez@txdot.gov;
	Jaime.Perales@txdot.gov;
	Alfredo.Sanchez@txdot.gov','accela@elpasotexas.gov', 'TXDot Review is Active', 'Please review TXDot task  Review of Record Number '+capIDString);
	}

if (AInfo['911 Review'] == 'Yes') {
	email('thelmam@elpasocounty911.org;
	SoniaR@elpasocounty911.org', 'accela@elpasotexas.gov', '911 Review is Active', 'Please review task 911 Review of Record Number '+capIDString);
	}

if (AInfo['Land Development Review'] == 'Yes') {
	email('DalloKF@elpasotexas.gov;
	CastilloAM@elpasotexas.gov', 'accela@elpasotexas.gov', 'Land Development Review is Active', 'Please review task Land Development Review of Record Number '+capIDString);
	}

if (AInfo['EPDOT Review'] == 'Yes') {
	email('BustillosAX@elpasotexas.gov;
	KutzHD@elpasotexas.gov', 'accela@elpasotexas.gov', 'EPDOT Review is Active', 'Please review task EPDOT Review of Record Number '+capIDString);
	}
`^
ES_POLICE_GIS_DATA^`
editAppSpecific('Police Region', getGISInfo('Accela_map', 'PoliceRegion', 'DISTRICT'));
editAppSpecific('Rep Districts', getGISInfo('Accela_map', 'RepDistricts', 'DISTRICT'));
editAppSpecific('PD District', getGISInfo('Accela_map', 'PoliceDistrict', 'DISTRICT'));
`^
ES_POS_On_Payment^`
deactivateTask('Close');
closeTask('Close', 'Close', 'Closed by Script');
`^
ES_PRA_FIRE_EMAIL^`
email('FD-FPDPublicEducation@elpasotexas.gov', 'accela@elpasotexas.gov', 'Payment has been received for record ' + capIDString, 'Payment has been received for record ' + capIDString + ' with address ' + getCapAddress(capId));
`^
ES_PRINT_BLDG^`
showDebug = false;
showMessage = false;
if (appMatch('Building/3rd/Residential/New')) {
	var reportName = '3rd Residential New';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Existing Building C of O/NA/NA')) {
	var reportName = 'Certificate of Occupancy';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Commercial/Addition/NA')) {
	var reportName = 'Commercial Addition';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Commercial/New/NA')) {
	var reportName = 'Commerical New';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Commercial/Shell/NA')) {
	var reportName = 'Commercial Shell';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Commercial/Swimming Pool-Spa/NA')) {
	var reportName = 'Commercial Swimming Pool - Spa';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Commercial/Tenant Improvement/NA')) {
	var reportName = 'Commercial Tenant Improvement';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Demolition/NA/NA')) {
	var reportName = 'Demolition';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Electrical/NA/NA')) {
	var reportName = 'Electrical';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Fences/NA/NA')) {
	var reportName = 'Fence';
	comment('Report Name = '+reportName);
	}

var reportName = 'No Report';
if (appMatch('Building/Foundation/NA/NA')) {
	var reportName = 'Foundation';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Irrigation/NA/NA')) {
	var reportName = 'Irrigation';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Mechanical/NA/NA')) {
	var reportName = 'Mechanical';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Placement/NA/NA')) {
	var reportName = 'Placement';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Plumbing/NA/NA')) {
	var reportName = 'Plumbing';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Reroof/NA/NA')) {
	var reportName = 'Reroof';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Residential/Accessory Structure/NA')) {
	var reportName = 'Residential Accessory Structure';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Residential/Addition/NA')) {
	var reportName = 'Residential Addition';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Residential/Alteration/NA')) {
	var reportName = 'Residential Alteration';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Residential/New/NA')) {
	var reportName = 'Residential New';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/3rd/Commercial/Addition')) {
	var reportName = '3rd Commercial Addition';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Residential/Swimming Pool-Spa/NA')) {
	var reportName = 'Residential Swimming Pool-Spa';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Retaining Walls/NA/NA')) {
	var reportName = 'Retaining Wall';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Right of Way/NA/NA')) {
	var reportName = 'Right of Way';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Shared Parking/NA/NA')) {
	var reportName = 'Shared Parking';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Siding/NA/NA')) {
	var reportName = 'Siding';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Temporary Amusement/NA/NA')) {
	var reportName = 'Temporary Amusement';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Temporary Placement/NA/NA')) {
	var reportName = 'Temporary Placement';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Tents/NA/NA')) {
	var reportName = 'Tent';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/Windows/NA/NA')) {
	var reportName = 'Windows';
	comment('Report Name = '+reportName);
	}

if (reportName != 'No Report') {
	var bReport=false;
	var user='admin';
	report = aa.reportManager.getReportModelByName(reportName);
	report = report.getOutput();
	var permit = aa.reportManager.hasPermission(reportName,user);
	if(permit.getOutput().booleanValue()) bReport=true;
	var parameters = aa.util.newHashMap();
	if( bReport ) var msg = aa.reportManager.runReport(parameters,report);
	showMessage=true;
	if( bReport) aa.env.setValue('ScriptReturnCode', '0');
	if( bReport) aa.env.setValue('ScriptReturnMessage', msg.getOutput() );
	}

if (appMatch('Building/3rd/Commercial/New')) {
	var reportName = '3rd Commercial New';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/3rd/Commercial/Shell')) {
	var reportName = '3rd Commercial Shell';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/3rd/Commercial/Tenant Improvement')) {
	var reportName = '3rd Commercial Tenant Improvement';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/3rd/Residential/Accessory Structure')) {
	var reportName = '3rd Residential Accessory Structure';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/3rd/Residential/Addition')) {
	var reportName = '3rd Residential Addition';
	comment('Report Name = '+reportName);
	}

if (appMatch('Building/3rd/Residential/Alteration')) {
	var reportName = '3rd Residential Alteration';
	comment('Report Name = '+reportName);
	}
`^
ES_PRINT_LIC^`
var reportName = 'No Report';
if (appMatch('Licenses/Lodging/NA/NA')) {
	var reportName = 'Lodging';
	comment('Report Name = '+reportName);
	}

if (appMatch('Licenses/Money Exchange/NA/NA')) {
	var reportName = 'Money Exchange';
	comment('Report Name = '+reportName);
	}

if (appMatch('Licenses/Residential Parking/NA/NA')) {
	var reportName = 'Residential Parking';
	comment('Report Name = '+reportName);
	}

if (appMatch('Licenses/Sexually Oriented Business/NA/NA')) {
	var reportName = 'Sexually Oriented Business';
	comment('Report Name = '+reportName);
	}

if (appMatch('Licenses/Sexually Oriented Business Emp/NA/NA')) {
	var reportName = 'Sexually Oriented Business Employee';
	comment('Report Name = '+reportName);
	}

if (appMatch('Licenses/Shoe Shine/NA/NA')) {
	var reportName = 'Shoe Shine';
	comment('Report Name = '+reportName);
	}

if (appMatch('Licenses/Sign/NA/NA')) {
	var reportName = 'Sign';
	comment('Report Name = '+reportName);
	}

if (appMatch('Licenses/Swimming Pool and Spa/NA/NA')) {
	var reportName = 'Swimming Pool and Spa';
	comment('Report Name = '+reportName);
	}

if (appMatch('Licenses/Tattoo Body Piercing Employee/NA/NA')) {
	var reportName = 'Tattoo Body Piercing Employee';
	comment('Report Name = '+reportName);
	}

if (appMatch('Licenses/Tax Exempt Vendor/NA/NA')) {
	var reportName = 'Tax Exempt Vendor';
	comment('Report Name = '+reportName);
	}

if (appMatch('Licenses/Amplification/NA/NA')) {
	var reportName = 'Amplification';
	comment('Report Name = '+reportName);
	}

if (appMatch('Licenses/Temp Event/NA/NA')) {
	var reportName = 'Temp Event';
	comment('Report Name = '+reportName);
	}

if (appMatch('Licenses/Temp Vendor/NA/NA')) {
	var reportName = 'Temp Vendor';
	comment('Report Name = '+reportName);
	}

if (appMatch('Licenses/Trailer Court/NA/NA')) {
	var reportName = 'Trailer Court';
	comment('Report Name = '+reportName);
	}

if (appMatch('Licenses/Vendor/NA/NA')) {
	var reportName = 'Vendor';
	comment('Report Name = '+reportName);
	}

showDebug = false;
showMessage = true;
//To PRINT LIC debug and Message must be false;
if (reportName != 'No Report') {
	var bReport=false;
	var user='admin';
	report = aa.reportManager.getReportModelByName(reportName);
	report = report.getOutput();
	var permit = aa.reportManager.hasPermission(reportName,user);
	if(permit.getOutput().booleanValue()) bReport=true;
	var parameters = aa.util.newHashMap();
	if( bReport ) var msg = aa.reportManager.runReport(parameters,report);
	showMessage=true;
	if( bReport) aa.env.setValue('ScriptReturnCode', '0');
	if( bReport) aa.env.setValue('ScriptReturnMessage', msg.getOutput() );
	comment('Report Print Line executed - Report Name = '+reportName);
	}

if (appMatch('Licenses/Amusement Occupation Tax/NA/NA')) {
	var reportName = 'Amusement Occupation Tax';
	comment('Report Name = '+reportName);
	}

if (appMatch('Licenses/Charitable Solicitation/NA/NA')) {
	var reportName = 'Charitable Solicitation';
	comment('Report Name = '+reportName);
	}

if (appMatch('Licenses/Flea Market/NA/NA')) {
	var reportName = 'Flea Market';
	comment('Report Name = '+reportName);
	}

if (appMatch('Licenses/Food/NA/NA')) {
	var reportName = 'Food';
	comment('Report Name = '+reportName);
	}

if (appMatch('Licenses/Home Occupation/NA/NA')) {
	var reportName = 'Home Occupation';
	comment('Report Name = '+reportName);
	}

if (appMatch('Licenses/Hotel Motel/NA/NA')) {
	var reportName = 'Hotel Motel';
	comment('Report Name = '+reportName);
	}

if (appMatch('Licenses/Laundry/NA/NA')) {
	var reportName = 'Laundry';
	comment('Report Name = '+reportName);
	}
`^
ES_PROJECT_NAME^`
if (AInfo['Program'] == 'Nuisance') {
	var projName = AInfo['Program Nuisance'];
	editAppName (projName);
	}

if (AInfo['Program'] == 'Facilities') {
	var projName = AInfo['Program Facilities'];
	editAppName (projName);
	}

if (AInfo['Program'] == 'Solid Waste') {
	var projName = AInfo['Program Solid Waste'];
	editAppName (projName);
	}

if (AInfo['Program'] == 'Vector') {
	var projName = AInfo['Program Vector'];
	editAppName (projName);
	}

if (AInfo['Program'] == 'Zoning') {
	var projName = AInfo['Program Zoning'];
	editAppName (projName);
	}

if (AInfo['Program'] == 'Building') {
	var projName = AInfo['Program Building'];
	editAppName (projName);
	}
`^
ES_PZST_CLOSE_LOOP^`
asiRow = GROUPHOUSING[eachrow];
subject1 = ('A group home has been verified, registered or approved. The record number is ' + capIDString + '.');
body1 = ('A group home has been verified, registered or approved. The record number is ' + capIDString + '.');
subject2 = ('A group home requiring local licensing has been verified, registered or approved. The record number is ' + capIDString + '.');
body2 = ('A group home requiring local licensing has been verified, registered or approved. The record number is ' + capIDString + '.');
if (wfTask == 'Close' && wfStatus == 'Closed' && asiRow['Group Housing'] != 'null') {
	email('SotoMX@elpasotexas.gov','HoffmanAP@elpasotexas.gov','[DEV] ' +  'accela@elpasotexas.gov', subject1, body1);
	}

if (wfTask == 'Close' && wfStatus == 'Closed' && asiRow['Licenses'] != 'null') {
	email('CantuBR@elpasotexas.gov', 'accela@elpasotexas.gov','[DEV] ' +  subject2, body2);
	}
`^
ES_PZST_DROPDOWN_LOOP^`
asiRow =GROUPHOUSING[eachrow];
if (asiRow['Group Housing'] == 'Homeless Shelter' || asiRow['Group Housing'] == 'Halfway House' || asiRow['Group Housing'] == 'Group Residentail Facility' || asiRow['Group Housing'] == 'Disabled Group Dwelling') {
	activateTask('Site Verification');
	closeTask('Application Submittal','Submitted', 'Closed by script', 'Closed by script');
	closeTask('Task Assignment','Assign Paper Review', 'Closed by script', 'Closed by script');
	assignTask('Site Verification','CAHALANSM');
	activateTask('Close');
	}

if (asiRow['Licenses'] == 'Boarding Home' || asiRow['Licenses'] == 'Adult Foster Care Facility' || asiRow['Licenses'] == 'Lodging Home') {
	activateTask('Close');
	closeTask ('Application Submittal', 'Submitted', 'Closed by script', 'Closed by script');
	closeTask ('Task Assignment', 'Assign Paper Review', 'Closed by script', 'Closed by script');
	}
`^
ES_PZVE_CHECKMARK_LOOP^`
asiRow =GROUPHOUSING[eachrow];
if (asiRow['Group Housing'] == 'Homeless Shelter' || asiRow['Group Housing'] == 'Halfway House' || asiRow['Group Housing'] == 'Group Residential Facility' || asiRow['Group Housing'] == 'Disabled Group Dwelling' ||  asiRow['Less than 5 People'] == 'CHECKED') {
	activateTask('Site Verification Review');
	closeTask('Application Submittal','Submitted', 'Closed by script', 'Closed by script');
	closeTask('Task Assignment','Assign Paper Review', 'Closed by script', 'Closed by script');
	assignTask('Site Verification Review','CAHALANSM');
	}

if (asiRow['Permitted by Right'] == 'CHECKED') {
	activateTask('Close');
	closeTask('Application Submittal','Submitted', 'Closed by script', 'Closed by script');
	closeTask('Task Assignment','Assign Paper Review', 'Closed by script', 'Closed by script');
	}
`^
ES_PZVE_CLOSE_LOOP^`
asiRow = GROUPHOUSING[eachrow];
subject1 = ('A group home has been verified, registered or approved. The record number is ' + capIDString + '.');
body1 = ('A group home has been verified, registered or approved. The record number is ' + capIDString + '.');
subject2 = ('A group home requiring local licensing has been verified, registered or approved. The record number is ' + capIDString + '.');
body2 = ('A group home requiring local licensing has been verified, registered or approved. The record number is ' + capIDString + '.');
if (wfTask == 'Close' && wfStatus == 'Closed' && asiRow['Group Housing'] != 'null' && asiRow['Permitted by Right'] == 'CHECKED') {
	email('SotoMX@elpasotexas.gov','HoffmanAP@elpasotexas.gov','[DEV] ' +  'accela@elpasotexas.gov', subject1, body1);
	}

if (wfTask == 'Close' && wfStatus == 'Closed' && asiRow['Licenses'] != 'null' && asiRow['Permitted by Right'] == 'CHECKED') {
	email('CantuBR@elpasotexas.gov', 'accela@elpasotexas.gov','[DEV] ' +  subject2, body2);
	}
`^
ES_RENEW_ON_PAYMENT^`
if (balanceDue == 0) {
	aa.runScript('PAYMENTRECEIVEAFTER4RENEW');
	logDebug('Return fromPRA4REN: ' +aa.env.getValue('ScriptReturnMessage'));
	}

if (balanceDue == 0 && isTaskActive('Renewal Application')) {
	closeTask('Renewal Application','Issue Renewal','Updated by script when Fees Paid');
	}

if (balanceDue == 0) {
	branch('ES_UPDATE_RENEWAL_PARENT');
	//update License to 'Active';
	}
`^
ES_REZONING_ASSIGN_NOTIFICATIONS^`
var TSI = new Array();
var emailTo = 'chavezj1@elpasotexas.gov;
rubioax@elpasotexas.gov;
mcelroyms@elpasotexas.gov';
var sender= 'accela@elpasotexas.gov';
if (AInfo['Parks Review'] == 'Yes') {
	email('delarosaja@elpasotexas.gov',  'accela@elpasotexas.gov',' Parks Review is Active', emailBody+'Please review task Parks Review of Record Number ' + capIDString);
	}

if (AInfo['Fire Review'] == 'Yes') {
	email('floreslu@elpasotexas.gov;
	arriolaox@elpasotexas.gov;
	bartleyre@elpasotexas.gov', 'accela@elpasotexas.gov','Fire Review is Active', emailBody+'Please review task Fire Review of Record Number '+capIDString);
	}

if (AInfo['Street Review'] == 'Yes') {
	email('doat@elpasotexas.gov;
	bustillosax@elpasotexas.gov;
	kutzhd@elpasotexas.gov;
	bennekd@elpasotexas.gov', 'accela@elpasotexas.gov','Street Review is Active', emailBody+'Please review task Street Review of Record Number '+capIDString);
	}

if (AInfo['Sun Metro Review'] == 'Yes') {
	email('esparzaex@elpasotexas.gov;
	segoviaib@elpasotexas.gov;
	bryantam@elpasotexas.gov', 'accela@elpasotexas.gov','Sun Metro Review is Active', emailBody+'Please review task Sun Metro Review of Record Number '+capIDString);
	}

if (AInfo['HLC Review'] == 'Yes') {
	email('velasquezpx@elpasotexas.gov', 'accela@elpasotexas.gov','HLC Review is Active', emailBody+'Please review task HLC Review of Record Number '+capIDString);
	}

if (AInfo['EPWU Review'] == 'Yes') {
	email('velasquezpx@elpasotexas.gov', 'accela@elpasotexas.gov','El Paso Water Utilities Review is Active', emailBody+'Please review task El Paso Water Utilities Review of Record Number ' + capIDString);
	}

if (AInfo['PD Review'] == 'Yes') {
	email('14412@elpaostexas.gov;
	AC779@elpasotexas.gov', 'accela@elpasotexas.gov','PD Review is Active', emailBody+'Please review task PD Review of Record Number '+capIDString);
	}

if (AInfo['TXDot Review'] == 'Yes') {
	email('Margarita.Montes@txdot.gov;
	walter.devine@txdot.gov;
	james.stevenson@txdot.gov;
	mararita.montes@txdot.gov','accela@elpasotexas.gov','TXDot Review is Active', emailBody+'Please review TXDot task  Review of Record Number '+capIDString);
	}

if (AInfo['YISD Review'] == 'Yes') {
	email('rcarrera@yisd.net', 'accela@elpasotexas.gov','YISD Review is Active', emailBody+'Please review task YISD Review of Record Number '+capIDString);
	}

if (AInfo['SISD Review'] == 'Yes') {
	email('rpdil05@sisd.net', 'accela@elpasotexas.gov','SISD Review is Active', emailBody+'Please review task SISD Review of Record Number '+capIDString);
	}

var emailBody = '  '+ '<BR>';
if (AInfo['Canutillo Review'] == 'Yes') {
	email('rleon@canutillo-isd.org','accela@elpasotexas.gov','Canutillo Review is Active', emailBody+'Please review task Canutillo Review of Record Number ' +capIDString);
	}

if (AInfo['Communication Review'] == 'Yes') {
	email('MendezF@elpasotexas.gov','accela@elpasotexas.gov','Communication Review is Active', emailBody+'Please review task Communication Review of Record Number ' +capIDString);
	}

if (AInfo['RF Engineering Review'] == 'Yes') {
	email('john.hargrove@newsignals.net','accela@elpasotexas.gov','RF Engineering Review Review is Active', emailBody+'Please review task RF Engineering Review Review of Record Number ' +capIDString);
	}

if (AInfo['Historical Review'] == 'Yes') {
	email(emailTo,'accela@elpasotexas.gov','Historical Review is Active', emailBody+'Please review task Historical Review of Record Number ' +capIDString);
	}

if (AInfo['Zoning Review'] == 'Yes') {
	email(emailTo,'accela@elpasotexas.gov','Zoning Review is Active', emailBody+'Please review task Zoning Review of Record Number ' +capIDString);
	}

if (AInfo['PST Review'] == 'Yes') {
	email(emailTo,'accela@elpasotexas.gov','PST Review is Active', emailBody+'Please review task PST Review of Record Number ' +capIDString);
	}

if (AInfo['Electrical Review'] == 'Yes') {
	email(emailTo,'accela@elpasotexas.gov','Electrical Review is Active', emailBody+'Please review task Electrical Review of Record Number ' +capIDString);
	}

if (AInfo['Landscape Review'] == 'Yes') {
	email(emailTo,'accela@elpasotexas.gov','Landscape Review is Active', emailBody+'Please review task Landscape Review of Record Number ' +capIDString);
	}

if (AInfo['Fast Track'] == 'Yes') {
	var emailBody = 'This item needs to be fast tracked in order to meet FCC regulations on Personal Wireless Service Facilities.'+ '<BR>';
	}

if (AInfo['Irrigation Review'] == 'Yes') {
	email(emailTo,'accela@elpasotexas.gov','Irrigation Review is Active', emailBody+'Please review task Irrigation Review of Record Number ' +capIDString);
	}

if (AInfo['Special Permit Type'] == 'PWSF (Personal Wireless Service Facility)') {
	var emailBody = 'This is an Expedited review for a Personal Wireless Service Facility Special Permit.  The expedited review is Required so that the City of El Paso will be in compliance with new FCC Regulations governing the expedited processing time on these types of facilities. Please review within 5 days of review of the distribution.'+ '<BR>';
	}

loadTaskSpecific(TSI,capId);
if (AInfo['Planned Land Dev Plat Review'] == 'Yes') {
	email('dallokf@elpasotexas.gov;
	unzuetajx@elpasotexas.gov', 'accela@elpasotexas.gov','Planned Land Dev Plat Review is Active', emailBody+'Please review task Planned Land Dev Plat Review of Record Number '+capIDString);
	}

if (AInfo['BPI Review'] == 'Yes') {
	email('delacruzja@elpasotexas.gov;
	chavirad1@elpasotexas.gov;
	LamasMX@elpasotexas.gov', 'accela@elpasotexas.gov','BPI Review is Active', emailBody+'Please review task BPI Review of Record Number '+capIDString);
	}

if (AInfo['MPO Review'] == 'Yes') {
	email('rwilliams@elpasompo.org;
	cstokes@elpasompo.org;
	grandados@elpasompo.org', 'accela@elpasotexas.gov','MPO Review is Active', emailBody+'Please review MPO Review of Record Number '+capIDString);
	}

if (AInfo['El Paso ISD'] == 'Yes') {
	email('rwilliams@elpasompo.org;
	cstokes@elpasompo.org;
	grandados@elpasompo.org', 'accela@elpasotexas.gov','El Paso ISD Review is Active', emailBody+'Please review task El Paso ISD Review of Record Number ' + capIDString);
	}
`^
ES_REZONING_ASSIGN_NOTIFICATIONS_TEST^`
var TSI = new Array();
var emailTo = 'RubioAX@elpasotexas.gov';
if (AInfo['Sun Metro Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov','[DEV] ' + '[TEST] ' +  'TEST - Sun Metro Review is Active', 'Please review task Sun Metro Review of Record Number '+capIDString);
	}

if (AInfo['HLC Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov','[DEV] ' + '[TEST] ' +  'TEST - HLC Review is Active', 'Please review task HLC Review of Record Number '+capIDString);
	}

if (AInfo['EPWU Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov','[DEV] ' + '[TEST] ' +  'TEST - El Paso Water Utilities Review is Active', 'Please review task El Paso Water Utilities Review of Record Number ' + capIDString);
	}

if (AInfo['PD Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov','[DEV] ' + '[TEST] ' +  'TEST - PD Review is Active', 'Please review task PD Review of Record Number '+capIDString);
	}

if (AInfo['TXDot Review'] == 'Yes') {
	email(emailTo,'accela@elpasotexas.gov','[DEV] ' + '[TEST] ' +  'TEST - TXDot Review is Active', 'Please review TXDot task  Review of Record Number '+capIDString);
	}

if (AInfo['YISD Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov','[DEV] ' + '[TEST] ' +  'TEST - YISD Review is Active', 'Please review task YISD Review of Record Number '+capIDString);
	}

if (AInfo['SISD Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov','[DEV] ' + '[TEST] ' +  'TEST - SISD Review is Active', 'Please review task SISD Review of Record Number '+capIDString);
	}

loadTaskSpecific(TSI,capId);
if (AInfo['Planned Land Dev Plat Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov','[DEV] ' + '[TEST] ' +  'TEST - Planned Land Dev Plat Review is Active', 'Please review task Planned Land Dev Plat Review of Record Number '+capIDString);
	}

if (AInfo['BPI Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov','[DEV] ' + '[TEST] ' +  'TEST - BPI Review is Active', 'Please review task BPI Review of Record Number '+capIDString);
	}

if (AInfo['MPO Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov','[DEV] ' + '[TEST] ' +  'TEST - MPO Review is Active', 'Please review MPO Review of Record Number '+capIDString);
	}

if (AInfo['El Paso ISD'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov','[DEV] ' + '[TEST] ' +  'TEST - El Paso ISD Review is Active', 'Please review task El Paso ISD Review of Record Number ' + capIDString);
	}

if (AInfo['Parks Review'] == 'Yes') {
	email(emailTo,  'accela@elpasotexas.gov','[DEV] ' + '[TEST] ' +  'TEST - Parks Review is Active', 'Please review task Parks Review of Record Number ' + capIDString);
	}

if (AInfo['Fire Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov','[DEV] ' + '[TEST] ' +  'TEST - Fire Review is Active', 'Please review task Fire Review of Record Number '+capIDString);
	}

if (AInfo['Street Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov','[DEV] ' + '[TEST] ' +  'TEST - Street Review is Active', 'Please review task Street Review of Record Number '+capIDString);
	}
`^
ES_SCHEDULE_AUDIT_INSPECTION^`
pCapId = getParent();
if (pCapId != false) {
	branch('ES_SCHEDULE_AUDIT_INSPECTION_');
	}
`^
ES_SCHEDULE_AUDIT_INSPECTION_^`
pCapId = getParent();
if(pCapId != false) pCapObj = aa.cap.getCap(pCapId).getOutput();
pCapIDString = pCapObj.getCapType().toString();
if (pCapIDString != null && matches(pCapIDString,'Building/Residential/New/NA','Building/Commercial/New/NA','Building/3rd/Residential/New')) {
	cCapId = childGetByCapType('Building/Audit/NA/NA',pCapId);
	}

if (cCapId != false) {
	tempCap = capId;
	capId = cCapId;
	scheduleInspectDate('500 Audit',(dateAdd(inspSchedDate, 1,true)),null,null,('Auditing Inspection : ' + inspType));
	}
`^
ES_SCHED_CODE_INSP^`
assignedInsp = getLastInspector(inspType);
comment('Assigned Inspector is: ' +assignedInsp);
nextInspDate = dateAdd(null,8);
comment('nextInspDate is: ' + nextInspDate);
if (AInfo['Code Violations'] == 'Weeds, Trash & Debris') {
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}

if (AInfo['Facility Inspections'] == 'Swimming Pool/Spa') {
	scheduleInspectDate(inspType,nextInspDate,assignedInsp);
	}
`^
ES_SECURITY_ALARM_ACA_EMAIL_NOTIFICATION^`
sender = 'accela@elpasotexas.gov';
recipient = 'businesslicense@elpasotexas.gov;
delafuentejr@elpasotexas.gov';
subject = ('Record Number: ' + capIDString + ' Has been renewed');
body = ('Record Number: ' + capIDString + ' Has been renewed');
email(recipient, sender, subject, body);
`^
ES_SEND_PET_OWNER_EMAIL^`
emailSubject = 'Animal Registration for ' + capIDString;
emailBody = 'Please login to El Paso's Citizen Access portal http://epermit.elpasotexas.gov/CitizenAccess/ to pay your registration fee and complete the process. You will be able to print your registration document after payment has been completed. Your record ID is ' + capIDString;
emailContact(emailSubject,emailBody,'PET OWNER');
`^
ES_SERVICEREQUEST_APPLICATIONSUBMITAFTER^`
comment('Selected: ' + AInfo['Environmental Complaints']);
if (AInfo['Environmental Complaints'] == 'Code Compliance') {
	assignTask('Request','IRROBALIBA');
	}

if (AInfo['Environmental Complaints'] == 'Senior/Disabled Discount') {
	assignTask('Request','EISERTDA');
	}

if (AInfo['Environmental Complaints'] == 'Missed Recycling Complaint') {
	assignTask('Request','ROSSPR');
	}

if (AInfo['Environmental Complaints'] == 'Driver Complaints') {
	assignTask('Request','GDURAN');
	}

if (AInfo['Complaint Type'] == 'Building Safety Complaint') {
	assignTask('Request','SPENCERNM');
	}

if (AInfo['Complaint Type']  == 'Payday Loan Complaint') {
	assignTask ('Request', 'CahalanSM');
	}

if (AInfo['Environmental Complaints'] == 'Animal Services Duplicate Complaint') {
	assignTask('Request','ASFS');
	}

if (AInfo['Environmental Complaints'] == 'Solid Waste Billing Issues') {
	assignTask('Request','HERNANDEZMX');
	}

if (AInfo['Environmental Complaints'] == 'Waivers') {
	assignTask('Request','GDURAN');
	}

if (AInfo['Environmental Complaints'] == 'ESD Property Liens') {
	assignTask('Request','REYESD');
	}

if (AInfo['Environmental Complaints'] == 'Special/Bulk Pick-ups') {
	assignTask('Request','LUISA.E.BUSTAMANTE');
	}

if (AInfo['Environmental Complaints'] == 'Missed Garbage Duplicate Complaint') {
	assignTask('Request','SMITHJM');
	}

if (AInfo['Environmental Complaints'] == 'Dead Animal Pick-up') {
	assignTask('Request','YAMAGUCHIJ');
	}

if (AInfo['Environmental Complaints'] == 'Fogging Requests') {
	assignTask('Request','SALCIDOFX');
	}
`^
ES_SERVICEREQUEST_GIS_DATA^`
editAppSpecific('Police Region', getGISInfo('Accela_map', 'PoliceRegion', 'DISTRICT'));
editAppSpecific('Rep Districts', getGISInfo('Accela_map', 'RepDistricts', 'DISTRICT'));
`^
ES_SIGN_VALUATION^`
if (typeof(SIGN) == 'object') {
	for (eachrow in SIGN) branch('ES_SIGN_VALUATION_LOOP');
	}
`^
ES_SIGN_VALUATION_LOOP^`
valuation = SIGN[eachrow];
if (valuation['Valuation'] > 0) {
	valuation1= parseFloat(valuation['Valuation']) + valuation1;
	}
`^
ES_SUBDIVISION_EMAIL_PRE_MYLAR_COMPLETE^`
conType = conArray[y].getPeople().contactType;
emailAddr = conArray[y].getPeople().email;
lastName= conArray[y].getPeople().lastName;
firstName= conArray[y].getPeople().firstName;
middleName= conArray[y].getPeople().middleName;
sender= 'accela@elpasotexas.gov';
subject = 'Pre-Mylar Review for application ' + capIdString + ' is complete';
emailBody = 'The pre-cloth has been reviewed by city staff.  Please pick-up your copy at the One-Stop-Shop.';
if (emailAddr != undefined && (conType =='Applicant/Developer' || conType =='APPLICANT/DEVELOPER')) {
	email(emailAddr, sender, subject, emailBody);
	}

showMessage=true;
comment(emailAddr + ', ' + lastName + ', ' + firstName + ' ' + conType );
`^
ES_SUBDIVISION_INCOMPLETE_APP_EMAIL^`
assignedToUser = getAssignedToStaff(capId);
var user = aa.person.getUser(assignedToUser);
userEmail = undefined;
userFirst = undefined;
userLast = undefined;
if (user.getSuccess()) {
	user = user.getOutput();
	userEmail= user.getEmail();
	userFirst = user.getFirstName();
	userLast = user.getLastName();
	showMessage=true;
	comment(userFirst + ' ' + userLast + ' ' + userEmail );
	}

conType = conArray[y].getPeople().contactType;
emailAddr = conArray[y].getPeople().email;
lastName= conArray[y].getPeople().lastName;
firstName= conArray[y].getPeople().firstName;
middleName= conArray[y].getPeople().middleName;
userObj = aa.person.getUser(firstName,middleName,lastName).getOutput();
userPhoneNumber = user.getPhoneNumber();
sender= 'accela@elpasotexas.gov';
subject = 'Your application ' + capIdString + ' is incomplete';
emailBody = 'After initial review, the application ' + capIdString + ' submitted is missing one or more documents and the application is deemed incomplete.  Please upload any missing documents via customer portal or contact subdivision staff if you have any questions.<BR><BR>Please contact your Case Manager below: ';
reviewerInfo =  ('<BR>'+ userFirst + ' ' + userLast + '<BR>' + userEmail + '<BR>' + userPhoneNumber);
if (emailAddr != undefined && (conType =='Applicant' || conType =='APPLICANT/DEVELOPER')) {
	email(emailAddr, sender, subject, (emailBody + '<BR>' + reviewerInfo + '<BR>'));
	}

showMessage=true;
comment(emailAddr + ', ' + lastName + ', ' + firstName + ' ' +  userPhoneNumber + ' ' + conType );
`^
ES_SUB_FIVE_DAY_ASSIGN_NOTIFICATIONS^`
var TSI = new Array();
var emailTo = 'accela@elpasotexas.gov';
loadTaskSpecific(TSI,capId);
if (AInfo['Land Development Review'] == 'Yes') {
	email('DalloKF@elpasotexas.gov;
	CastilloAM@elpasotexas.gov', 'accela@elpasotexas.gov', 'Land Development Review is Active', 'Please review task Land Development Review of Record Number '+capIDString);
	}

if (AInfo['EPWU - Storm Water Review'] == 'Yes') {
	email('flopez@epwu.org;
	gcedillos@epwu.org;
	acastillo@epwu.org', 'accela@elpasotexas.gov', 'EPWU - Storm Water Review is Active', 'Please review task EPWU - Storm Water Review of Record Number ' + capIDString);
	}

if (AInfo['EPWU - PSB Review'] == 'Yes') {
	email('flopez@epwu.org;
	gcedillos@epwu.org;
	acastillo@epwu.org', 'accela@elpasotexas.gov', 'EPWU - Storm Water Review is Active', 'Please review task EPWU - Storm Water Review of Record Number ' + capIDString);
	}

if (AInfo['Parks Review'] == 'Yes') {
	email('DeLaRosaJA@elpasotexas.gov;
	OrtizJA@elpasotexas.gov;
	NovakTA@elpasotexas.gov', 'accela@elpasotexas.gov', 'Parks Review is Active', 'Please review task Parks Review of Record Number ' + capIDString);
	}

if (AInfo['911 Review'] == 'Yes') {
	email('thelmam@elpasocounty911.org;
	SoniaR@elpasocounty911.org', 'accela@elpasotexas.gov', '911 Review is Active', 'Please review task 911 Review of Record Number '+capIDString);
	}
`^
ES_SUB_FIVE_DAY_ASSIGN_NOTIFICATIONS_FOR_TESTING^`
var dueDate = getTaskDueDate('Task Assignment');
var TSI = new Array();
var emailTo = 'ledezmaja@elpasotexas.gov';
loadTaskSpecific(TSI,capId);
if (AInfo['Land Development Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov', 'TEST - Land Development Review is Active', 'Please review task Land Development Review of Record Number '+capIDString + '<br/>Please review/respond before ' + dueDate);
	}

if (AInfo['EPWU - Storm Water Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov', 'TEST - EPWU - Storm Water Review is Active', 'Please review task EPWU - Storm Water Review of Record Number ' + capIDString + '<br/>Please review/respond before ' + dueDate);
	}

if (AInfo['EPWU - PSB Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov', 'TEST - EPWU - Storm Water Review is Active', 'Please review task EPWU - Storm Water Review of Record Number ' + capIDString + '<br/>Please review/respond before ' + dueDate);
	}

if (AInfo['Parks Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov', 'TEST - Parks Review is Active', 'Please review task Parks Review of Record Number ' + capIDString + '<br/>Please review/respond before ' + dueDate);
	}

if (AInfo['911 Review'] == 'Yes') {
	email(emailTo, 'accela@elpasotexas.gov', 'TEST - 911 Review is Active', 'Please review task 911 Review of Record Number '+capIDString + '<br/>Please review/respond before ' + dueDate);
	}
`^
ES_TAXDATE_CHECK^`
showDebug = false;
showMessage = false;
lastDate = AInfo['Date 1'];
if (AInfo['Date 2'] != null) {
	lastDate = AInfo['Date 2'];
	}

if (AInfo['Date 3'] != null) {
	lastDate = AInfo['Date 3'];
	}

if (AInfo['Date 4'] != null) {
	lastDate = AInfo['Date 4'];
	}

if (AInfo['Date 5'] != null) {
	lastDate = AInfo['Date 5'];
	}

editAppSpecific('Expiration Date', dateAdd(lastDate, 1));
`^
ES_TITLE_19 WEBSERVICE^`
showDebug=true;
showMessage=true;
var subdivisionName = getGISInfo('Accela_map', 'Subdivisions', 'NAME');
var i = 0;
var percent = 0;
comment('***** Subdivision is ' + subdivisionName);
var wsURL = ('http://dev.elpasotexas.gov/AccelaBuildingService/Subdivision.asmx/UpdateSubdivisionCount');
var client = aa.httpClient;
var params = client.initPostParameters();
params.put('subdivisionName', subdivisionName);
var scriptResult = client.post(wsURL, params);
logDebug(scriptResult.getOutput());
`^
ES_TITLE_19_PREVENT_50_PERCENT^`
showDebug=true;
showMessage=true;
var subdivisionName = getGISInfo('Accela_map', 'Subdivisions', 'NAME');
var i = 0;
var percent = 0;
comment('***** Subdivision is ' + subdivisionName);
var wsURL = ('http://dev.elpasotexas.gov/AccelaBuildingService/Subdivision.asmx/GetPercentage');
var client = aa.httpClient;
var params = client.initPostParameters();
params.put('subdivisionName', subdivisionName);
var scriptResult = client.post(wsURL, params);
logDebug(scriptResult.getOutput());
eval('var obj = ' + scriptResult.getOutput());
logDebug(obj[0].Subdivision);
eval('var test = ' + scriptResult.getOutput());
percent = test[0].PercentageValue.toString();
logDebug(test[0].PercentageValue.toString());
if (percent > 50) {
	comment('Percent is greater than 50 and is not approved by PSB, got: ' + percent);
	cancel=true;
	}
`^
ES_UPDATE_CHILD_EXPDATE_LOOP^`
eachChildCapID = childrenCapID[eachchild];
if (eachChildCapID != null) {
	editAppSpecific('Expiration Date',dateAdd(inspManualDate,180),eachChildCapID);
	}

eachSiblingCapID = siblingCapID[eachchild];
if (eachSiblingCapID != null) {
	editAppSpecific('Expiration Date',dateAdd(inspManualDate,180),eachSiblingCapID);
	}
`^
ES_UPDATE_EXP_DATE^`
if (appMatch('Engineering/Special Privilege/*/*') && wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAdd(null,375));
	}

if (appMatch('Health/*/Fixed Location/*') && matches(AInfo['Section'],'2(b)','4(a)','4(b)','4(h)','4(i)','4(j)','4(k)','4(l)')) {
	editAppSpecific('Expiration Date',dateAddMonths(wfDateMMDDYYYY,12));
	}

if (appMatch('Building/*/*/*') && !appMatch('Building/Historic/*/*') && !appMatch('Building/Property Maintenance/*/*') && !appMatch('Building/Public Education/*/*') && !appMatch('Building/Shared Parking/*/*') && !appMatch('Building/Temporary Amusement/*/*') && !appMatch('Building/Temporary Placement/*/*') && !appMatch('Building/Right of Way/NA/NA') && wfTask == 'Issue' && (wfStatus == 'Issued' || wfStatus == 'Issue per BPI Director')) {
	editAppSpecific('Expiration Date',dateAdd(null,180));
	}

if (appMatch('Engineering/Special Permit/*/*') && wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAddMonths(null,60));
	}
`^
ES_UPDATE_PARENT_WF^`
pCapID = getParent();
totalCapsIncomplete = null;
sibCapID = false;
numCapsIncomplete = 0;
if (pCapID != false) {
	pCapObj = aa.cap.getCap(pCapID).getOutput();
	pAppTypeResult = pCapObj.getCapType();
	pAppTypeString = pAppTypeResult.toString();
	comment('PARENT CAP Type is: ' + pAppTypeString);
	}

if (pCapID != false && pAppTypeString == 'Planning/Subdivision/Improvement Plans/NA') {
	sibCapID = getChildren('*/*/*/*',pCapID,capId);
	comment('Sib Cap Ids exist');
	}

if (sibCapID != false && typeof(sibCapID) == 'object') {
	for (eachchild in sibCapID) branch('ES_CHECK_SIB_WF_LOOP');
	}

if (sibCapID != false && totalCapsIncomplete == 0) {
	closeTask('Construction','Completed','Updated via event script','',null,pCapID);
	comment('DID IT');
	}

if (sibCapID != false && totalCapsIncomplete > 0) {
	comment('There are ' + totalCapsIncomplete + ' open sibling workflows, not updating parent CAP.');
	}
`^
ES_UPDATE_RENEWAL_PARENT^`
saveId = capId;
parentLicenseCAPID = getParentCapIDForReview(capId);
comment('ParentLic CAPID = '+parentLicenseCAPID);
if (!publicUser && AInfo['Term of License'] == '2 Year') {
	thisLic = new licenseObject();
	thisLic.setExpiration(dateAddMonths(thisLic.b1ExpDate,12));
	thisLic.setStatus('Active');
	editAppSpecific('Expiration Date', dateAddMonths(AInfo['Expiration Date'], 24));
	}

if (!publicUser && AInfo['Term of License'] == '3 Year') {
	thisLic = new licenseObject();
	thisLic.setExpiration(dateAddMonths(thisLic.b1ExpDate,24));
	thisLic.setStatus('Active');
	editAppSpecific('Expiration Date', dateAddMonths(AInfo['Expiration Date'], 36));
	}

capId = saveId;
capId = parentLicenseCAPID;
logDebug(capId);
updateAppStatus('Active','Renewal Approved By: '+capIDString,parentLicenseCAPID);
if (!publicUser && (appMatch('Licenses/Renewal/Vendor/NA') || appMatch('Licenses/Renewal/Flea Market/NA') || appMatch('Licenses/Renewal/Lodging/NA') || appMatch('Licenses/Renewal/DowntownResidentialParking/NA') || appMatch('Licenses/Renewal/Residential Parking/NA'))) {
	thisLic = new licenseObject();
	thisLic.setExpiration(dateAddMonths(thisLic.b1ExpDate,6));
	thisLic.setStatus('Active');
	editAppSpecific('Expiration Date', dateAddMonths(AInfo['Expiration Date'], 12));
	}

if (publicUser && (appMatch('Licenses/Renewal/Vendor/NA') || appMatch('Licenses/Renewal/Flea Market/NA') || appMatch('Licenses/Renewal/Lodging/NA') || appMatch('Licenses/Renewal/DowntownResidentialParking/NA') || appMatch('Licenses/Renewal/Residential Parking/NA'))) {
	thisLic = new licenseObject();
	thisLic.setExpiration(dateAddMonths(thisLic.b1ExpDate,12));
	thisLic.setStatus('Active');
	editAppSpecific('Expiration Date', dateAddMonths(AInfo['Expiration Date'], 12));
	}

if (publicUser && AInfo['Term of License'] == '1 Year') {
	thisLic = new licenseObject();
	thisLic.setExpiration(dateAddMonths(thisLic.b1ExpDate,12));
	thisLic.setStatus('Active');
	editAppSpecific('Expiration Date', dateAddMonths(AInfo['Expiration Date'], 12));
	}

if (publicUser && AInfo['Term of License'] == '2 Year') {
	thisLic = new licenseObject();
	thisLic.setExpiration(dateAddMonths(thisLic.b1ExpDate,24));
	thisLic.setStatus('Active');
	editAppSpecific('Expiration Date', dateAddMonths(AInfo['Expiration Date'], 24));
	}

if (publicUser && AInfo['Term of License'] == '3 Year') {
	thisLic = new licenseObject();
	thisLic.setExpiration(dateAddMonths(thisLic.b1ExpDate,36));
	thisLic.setStatus('Active');
	editAppSpecific('Expiration Date', dateAddMonths(AInfo['Expiration Date'], 36));
	}

if (!publicUser && AInfo['Term of License'] == '1 Year') {
	thisLic = new licenseObject();
	thisLic.setExpiration(dateAddMonths(thisLic.b1ExpDate,6));
	thisLic.setStatus('Active');
	editAppSpecific('Expiration Date', dateAddMonths(AInfo['Expiration Date'], 12));
	}
`^
ES_WORKFLOWTASKUPDATEAFTER_ALL^`
if (wfTask == 'Close' && (wfStatus == 'Closed' || wfStatus == 'Completed')) {
	pCapID = getParent();
	comment('Parent ID is: ' + pCapID);
	}

if (wfTask == 'Close' && (wfStatus == 'Closed' || wfStatus == 'Completed')  && pCapID != false) {
	pCapObj = aa.cap.getCap(pCapID).getOutput();
	pCapStatus = pCapObj.getCapStatus();
	pAppTypeResult = pCapObj.getCapType();
	pAppTypeString = pAppTypeResult.toString();
	}

if (wfTask == 'Close' && (wfStatus == 'Closed' || wfStatus == 'Completed')  && pCapID != false && pAppTypeString == 'ServiceRequest/Service Request/NA/NA') {
	branch('COEP_SERVICE_REQUEST_GETDISTRICT');
	}
`^
ES_WORKFLOW_BUILDING_ACA_EMAIL^`
if (wfStatus == 'Ready to Issue') {
	conType = conArray[y].getPeople().contactType;
	emailAddr = conArray[y].getPeople().email;
	lastName= conArray[y].getPeople().lastName;
	firstName= conArray[y].getPeople().firstName;
	middleName= conArray[y].getPeople().middleName;
	userObj = aa.person.getUser(firstName,middleName,lastName).getOutput();
	userPhoneNumber = user.getPhoneNumber();
	sender= 'accela@elpasotexas.gov';
	subject = 'Record ' + capIDString  + ' has a status of ' + wfStatus;
	emailBody = 'If you have any questions Please contact your Case Manager below: ';
	reviewerInfo =  ('<BR>'+ userFirst + ' ' + userLast + '<BR>' + userEmail + '<BR>' + userPhoneNumber);
	}

if (wfStatus == 'Hold for Corrections') {
	conType = conArray[y].getPeople().contactType;
	emailAddr = conArray[y].getPeople().email;
	lastName= conArray[y].getPeople().lastName;
	firstName= conArray[y].getPeople().firstName;
	middleName= conArray[y].getPeople().middleName;
	userObj = aa.person.getUser(firstName,middleName,lastName).getOutput();
	userPhoneNumber = user.getPhoneNumber();
	sender= 'accela@elpasotexas.gov';
	subject = 'Record ' + capIDString  + ' has a status of ' + wfStatus;
	emailBody = 'If you have any questions Please contact your Case Manager below: ';
	reviewerInfo =  ('<BR>'+ userFirst + ' ' + userLast + '<BR>' + userEmail + '<BR>' + userPhoneNumber);
	}

if (wfStatus == 'No Revisions') {
	conType = conArray[y].getPeople().contactType;
	emailAddr = conArray[y].getPeople().email;
	lastName = conArray[y].getPeople().lastName;
	firstName= conArray[y].getPeople().firstName;
	middleName= conArray[y].getPeople().middleName;
	userObj = aa.person.getUser(firstName,middleName,lastName).getOutput();
	userPhoneNumber = user.getPhoneNumber();
	sender= 'accela@elpasotexas.gov';
	subject = ('Your Record' + capIDString  + ' is ready to go to CRC');
	emailBody = 'Your Record is ready to go to CRC. <BR> If you have any questions Please contact your Case Manager below: ';
	reviewerInfo =  ('<BR>'+ userFirst + ' ' + userLast + '<BR>' + userEmail + '<BR>' + userPhoneNumber);
	}

if (wfStatus == 'Recommend Approval') {
	conType = conArray[y].getPeople().contactType;
	emailAddr = conArray[y].getPeople().email;
	lastName = conArray[y].getPeople().lastName;
	firstName= conArray[y].getPeople().firstName;
	middleName= conArray[y].getPeople().middleName;
	userObj = aa.person.getUser(firstName,middleName,lastName).getOutput();
	userPhoneNumber = user.getPhoneNumber();
	sender= 'accela@elpasotexas.gov';
	subject = 'Case ' + capIDString  + ' has a status of ' + wfStatus;
	emailBody = 'Your subdivision application has been set to Recommend Approval';
	reviewerInfo =  ('<BR>'+ userFirst + ' ' + userLast + '<BR>' + userEmail + '<BR>' + userPhoneNumber);
	}

assignedToUser = getAssignedToStaff(capId);
var user = aa.person.getUser(assignedToUser);
userEmail = undefined;
userFirst = undefined;
userLast = undefined;
emailAddr = undefined;
if (user.getSuccess()) {
	user = user.getOutput();
	userEmail= user.getEmail();
	userFirst = user.getFirstName();
	userLast = user.getLastName();
	showMessage=true;
	comment(userFirst + ' ' + userLast + ' ' + userEmail );
	}

if ((wfStatus == 'Revisions Required' || wfStatus == 'Revisions Requested' || wfStatus == 'Recommend Denial')) {
	failedTasks = CompileFailedTasks(capId);
	conType = conArray[y].getPeople().contactType;
	emailAddr = conArray[y].getPeople().email;
	lastName = conArray[y].getPeople().lastName;
	firstName= conArray[y].getPeople().firstName;
	middleName= conArray[y].getPeople().middleName;
	userObj = aa.person.getUser(firstName,middleName,lastName).getOutput();
	userPhoneNumber = user.getPhoneNumber();
	sender= 'accela@elpasotexas.gov';
	subject = 'Case ' + capIDString  + ' ,  ' + wfTask + ' has a status of ' + wfStatus;
	emailBody = failedTasks;
	reviewerInfo =  ('<BR>'+ userFirst + ' ' + userLast + '<BR>' + userEmail + '<BR>' + userPhoneNumber);
	}

if (emailAddr != undefined && (conType =='Applicant' || conType =='APPLICANT' || conType =='APPLICANT/DEVELOPER' || conType == 'REPRESENTATIVE')) {
	email(emailAddr , sender, subject, (emailBody + '<BR>' + reviewerInfo + '<BR><BR>' + 'To access your application please click on the link below:<BR>http://epermit.elpasotexas.gov/CitizenAccess/'));
	}

showMessage=true;
comment(emailAddr + ', ' + lastName + ', ' + firstName + ' ' +  userPhoneNumber + ' ' + conType );
`^
ES_WORKFLOW_CASE_EMAIL_NOTIFICATION^`
sender= 'accela@elpasotexas.gov';
subject = 'Case Manager,  Record ' + capIDString  + 'Workflow Task  ' + wfTask + ' has a status of ' + wfStatus + '.';
emailBody = 'Notification for Case Manager. Workflow Task ' + wfTask + ' has a status of ' + wfStatus + ', Thank you.';
assignedToUser = getAssignedToStaff();
if(assignedToUser != null) emailAddrs = aa.person.getUser(assignedToUser).getOutput().getEmail();
if ((emailAddrs != undefined && emailAddrs != '' && emailAddrs != null)) {
	email(emailAddrs, sender, subject,emailBody);
	}

assignedToUser = getAssignedToStaff();
if(assignedToUser != null) emailAddrs = aa.person.getUser(assignedToUser).getOutput().getEmail();
var fullName = aa.person.getUser(assignedToUser).getOutput().getFirstName() + ' ' + aa.person.getUser(assignedToUser).getOutput().getLastName();
if ((AInfo['Expedited'] == 'PBA' || AInfo['Expedited'] == 'CPR')) {
	subject = 'Expedited Record ' + capIDString  + ';
	' + wfTask + ' ' + wfStatus +'.';
	emailBody = 'Case Manager <b> ' + fullName + '</b>, <BR><BR>Workflow task <b>' + wfTask + '</b> for <b>Expedited</b> record <b>' + capIDString + '</b> has a status of <b>' + wfStatus + '</b> <BR><BR> Thank you.';
	} else {
	subject = 'Record ' + capIDString  + ';
	' + wfTask + ' ' + wfStatus +'.';
	emailBody = 'Case Manager <b> ' + fullName + '</b>, <BR><BR>Workflow task <b>' + wfTask + '</b> for record <b>' + capIDString + '</b> has a status of <b>' + wfStatus + '</b> <BR><BR> Thank you.';
	}

if ((emailAddrs != undefined && emailAddrs != '' && emailAddrs != null)) {
	email(emailAddrs,'accela@elpasotexas.gov',subject,emailBody);
	}
`^
ES_WORKFLOW_CASE_FLAG_EMAIL_NOTIFICATION^`
sender= 'accela@elpasotexas.gov';
subject = 'Case Manager,  Record ' + capIDString  + 'Is active for review.';
emailBody = 'Notification for Case Manager. The Record has been submitted for your review, Thank you.';
assignedToUser = getAssignedToStaff();
if(assignedToUser != null) emailAddrs = aa.person.getUser(assignedToUser).getOutput().getEmail();
comment('this is the email address: ' + emailAddrs);
comment('this is the user: ' + assignedToUser);
if ((emailAddrs != undefined && emailAddrs != '' && emailAddrs != null)) {
	email(emailAddrs, sender, subject,emailBody);
	}
`^
ES_WORKFLOW_PLAN_EMAIL_APPLICANT^`
assignedToUser = getAssignedToStaff(capId);
var user = aa.person.getUser(assignedToUser);
userEmail = undefined;
userFirst = undefined;
userLast = undefined;
emailAddr = undefined;
if (user.getSuccess()) {
	user = user.getOutput();
	userEmail= user.getEmail();
	userFirst = user.getFirstName();
	userLast = user.getLastName();
	showMessage=true;
	comment(userFirst + ' ' + userLast + ' ' + userEmail );
	}

if (wfStatus == 'Recommend Denial') {
	conType = conArray[y].getPeople().contactType;
	emailAddr = conArray[y].getPeople().email;
	lastName= conArray[y].getPeople().lastName;
	firstName= conArray[y].getPeople().firstName;
	middleName= conArray[y].getPeople().middleName;
	userObj = aa.person.getUser(firstName,middleName,lastName).getOutput();
	userPhoneNumber = user.getPhoneNumber();
	sender= 'accela@elpasotexas.gov';
	subject = 'Case ' + capIDString  + ' ,  ' + wfTask + ' has a status of ' + wfStatus;
	emailBody = 'If you have any questions please contact your case manager';
	reviewerInfo =  ('<BR>'+ userFirst + ' ' + userLast + '<BR>' + userEmail + '<BR>' + userPhoneNumber);
	}

if (wfStatus == 'Ready to Issue') {
	conType = conArray[y].getPeople().contactType;
	emailAddr = conArray[y].getPeople().email;
	lastName= conArray[y].getPeople().lastName;
	firstName= conArray[y].getPeople().firstName;
	middleName= conArray[y].getPeople().middleName;
	userObj = aa.person.getUser(firstName,middleName,lastName).getOutput();
	userPhoneNumber = user.getPhoneNumber();
	sender= 'accela@elpasotexas.gov';
	subject = 'Record ' + capIDString  + ' has a status of ' + wfStatus;
	emailBody = 'If you have any questions Please contact your Case Manager below: ';
	reviewerInfo =  ('<BR>'+ userFirst + ' ' + userLast + '<BR>' + userEmail + '<BR>' + userPhoneNumber);
	}

if (wfStatus == 'Hold for Corrections') {
	conType = conArray[y].getPeople().contactType;
	emailAddr = conArray[y].getPeople().email;
	lastName= conArray[y].getPeople().lastName;
	firstName= conArray[y].getPeople().firstName;
	middleName= conArray[y].getPeople().middleName;
	userObj = aa.person.getUser(firstName,middleName,lastName).getOutput();
	userPhoneNumber = user.getPhoneNumber();
	sender= 'accela@elpasotexas.gov';
	subject = 'Record ' + capIDString  + ' has a status of ' + wfStatus;
	emailBody = 'If you have any questions Please contact your Case Manager below: ';
	reviewerInfo =  ('<BR>'+ userFirst + ' ' + userLast + '<BR>' + userEmail + '<BR>' + userPhoneNumber);
	}

if (wfStatus == 'No Revisions') {
	conType = conArray[y].getPeople().contactType;
	emailAddr = conArray[y].getPeople().email;
	lastName= conArray[y].getPeople().lastName;
	firstName= conArray[y].getPeople().firstName;
	middleName= conArray[y].getPeople().middleName;
	userObj = aa.person.getUser(firstName,middleName,lastName).getOutput();
	userPhoneNumber = user.getPhoneNumber();
	sender= 'accela@elpasotexas.gov';
	subject = ('Your Record' + capIDString  + ' is ready to go to CRC');
	emailBody = 'Your Record is ready to go to CRC. <BR> If you have any questions Please contact your Case Manager below: ';
	reviewerInfo =  ('<BR>'+ userFirst + ' ' + userLast + '<BR>' + userEmail + '<BR>' + userPhoneNumber);
	}

if (emailAddr != undefined && (conType =='Applicant' || conType =='APPLICANT' || conType =='APPLICANT/DEVELOPER')) {
	email(emailAddr , sender, subject, (emailBody + '<BR>' + reviewerInfo + '<BR><BR>' + 'To access your application please click on the link below:<BR>http://epermit.elpasotexas.gov/CitizenAccess/'));
	}

showMessage=true;
comment(emailAddr + ', ' + lastName + ', ' + firstName + ' ' +  userPhoneNumber + ' ' + conType );
`^
ES_WRKF_COMPLCHK_RLSVET^`
asiRow = QUARANTINE[eachrow];
if (asiRow['Released by Shelter Vet'] == 'No') {
	showMessage = true;
	comment('This record has not been Released by Shelter Vet in Quarantine ASIT');
	cancel = true;
	}

showMessage = true;
comment('This record has not been Released by Shelter Vet in Quarantine ASIT');
cancel = true;
`^
FeeAssessAfter^`
showDebug = false;
showMessage = false;
if (calcValue > 0 && feeFactor != 'CALC') {
	aa.finance.reCalculateFees(capId, 'CALC',null);
	}
`^
FeeAssessBefore^`
showDebug = false;
showMessage = false;
comment('estValue = ' + estValue);
comment('calcValue = ' + calcValue);
comment(calcValue + estValue);
estValue = calcValue;
comment('estValue = ' + estValue);
comment('calcValue = ' + calcValue);
estValue = estValue;
if (appMatch('Licenses/*/*/*') && !appMatch('Licenses/Sexually Oriented Business/NA/NA') && !appMatch('Licenses/Sexually Oriented Business Emp/NA/NA') && isTaskActive('Application Submittal')) {
	showMessage = true;
	message = 'You cannot add fees yet!  <BR> <BR> Go to Workflow to have fees automatically added.';
	cancel = true;
	}
`^
GIS BLDG^`
editAppSpecific('GIS BLDG.Flood Zone', getGISInfo('Accela_map', 'FloodZone', 'FLOODZONE_'));
editAppSpecific('GIS BLDG.Historical District', getGISInfo('Accela_map', 'HistoricalDistrict', 'NAME'));
editAppSpecific('GIS BLDG.Zoning', getGISInfo('Accela_map', 'Zoning', 'ZONE_'));
editAppSpecific('GIS BLDG.Building Inspection Areas', getGISInfo('Accela_map', 'RES BLD INSP AREA', 'NAME'));
`^
GIS DATA^`
editAppSpecific('Census Tract', getGISInfo('Accela_map', 'Census_Blocks', 'TRACTCE00'));
editAppSpecific('Plan Area', getGISInfo('Accela_map', 'PlanArea', 'NAME'));
editAppSpecific('Rep Districts', getGISInfo('Accela_map', 'RepDistricts', 'DISTRICT'));
editAppSpecific('Subdivisions', getGISInfo('Accela_map', 'Subdivisions', 'NAME'));
editAppSpecific('TIRZ', getGISInfo('Accela_map', 'TIRZ', 'TEXT'));
editAppSpecific('Zoning', getGISInfo('Accela_map', 'Zoning', 'ZONE_'));
editAppSpecific('Food Inspection Areas', getGISInfo('Accela_map','Health Inspection Areas','HealthArea'));
editAppSpecific('Fire Inspection Areas', getGISInfo('Accela_map', 'FireCodesInpectonAreas', 'Area_'));
editAppSpecific('Building Inspection Areas', getGISInfo('Accela_map', 'DSD Sectors', 'NAME'));
editAppSpecific('Downtown Plan', getGISInfo('Accela_map', 'Downtown Districts', 'DISTRICTS'));
editAppSpecific('Mountain Development', getGISInfo('Accela_map', 'Mountain_development_area', 'FID'));
editAppSpecific('GIS DATA.Municipal Bounds', getGISInfo('Accela_map', 'Municipal Bounds', 'NAME'));
editAppSpecific('Impact Fee Area', getGISInfo('Accela_map', 'Impact Fee Areas', 'IMPACTAREA'));
editAppSpecific('Homestead', getGISInfo('Accela_map', 'Address Point', 'HOMESTEAD'));
arterialField = getGISInfo('Accela_Map', 'Centerline', 'Class');
if (arterialField != undefined || arterialField != '') {
	editAppSpecific('Arterials', 'Arterial');
	}

if (arterialField == undefined || arterialField == '') {
	editAppSpecific('Arterials', 'Non-Arterial');
	}

editAppSpecific('ESD Code Inspection Areas', getGISInfo('Accela_map', 'ESD Inspection Region', 'REGION_NUM'));
editAppSpecific('Annex History', getGISInfo('Accela_map', 'Annex History', 'DATE_'));
editAppSpecific('Association Boundary', getGISInfo('Accela_map', 'Association Boundary', 'NAME'));
editAppSpecific('CDBG Eligible Area', getGISInfo('Accela_map', 'CDBG Eligible Area', 'CDBG_ELIGI'));
editAppSpecific('Flood Zone', getGISInfo('Accela_map', 'FloodZone', 'FLOODZONE_'));
editAppSpecific('Historical District', getGISInfo('Accela_map', 'HistoricalDistrict', 'NAME'));
editAppSpecific('Police Region', getGISInfo('Accela_map', 'PoliceRegion', 'DISTRICT'));
`^
GIS_DATA_HEALTH^`
editAppSpecific('Food Inspection Areas', getGISInfo('Accela_map','Health Inspection Areas','HealthArea'));
editAppSpecific('Zoning', getGISInfo('Accela_map', 'Zoning', 'ZONE_'));
`^
INSPECTIONMULTIPLESCHEDULEAFTER^`
showDebug=false;
showMessage=false;
`^
INSPECTIONMULTIPLESCHEDULEBEFORE^`
showDebug=false;
showMessage=false;
`^
IRSA;Animal!Complaint!NA!NA^`
branch('ES_Animal_InspectionResultSubmitAfter');
`^
IRSA;Building!~!~!~^`
pCapID = getParent();
comment('Parent CAP ID is: ' + pCapID);
if (inspType == '740 Plumbing Final Inspection' &&  inspResult == 'Pass') {
	branch('ES_BUILDING_PLUMBING_EMAIL_ONEGAS_NOTIFICATION');
	}

if (publicUser && (inspResult == 'Fail w ReFee' || inspResult == 'Fail w/Refee')) {
	branch('ES_ADD_BLDG_REINSP_FEES_ACA');
	}

if (pCapID != false) {
	pCapObj = aa.cap.getCap(pCapID).getOutput();
	pGroupType = pCapObj.getCapType().getType();
	pGroupTypeString = pGroupType.toString();
	pSubType = pCapObj.getCapType().getSubType();
	pGroupTypeString = pGroupType.toString();
	}

if (pCapID != false && ((pGroupTypeString == '3rd' && pSubTypeString == 'Commercial') || pGroupTypeString == 'Commercial')) {
	editAppSpecific('Expiration Date',dateAdd(inspManualDate,180),pCapID);
	}

if (pCapID != false && ((pGroupTypeString == '3rd' && pSubTypeString == 'Commercial') || pGroupTypeString == 'Commercial')) {
	siblingCapID = getChildren('*/*/*/*',pCapID);
	}

if (siblingCapID != false && typeof(siblingCapID) == 'object') {
	for (eachchild in siblingCapID) branch('ES_UPDATE_CHILD_EXPDATE_LOOP');
	}

if ((inspResult == 'Fail w ReFee' || inspResult == 'Fail w/Refee')) {
	branch('ES_ADD_BLDG_REINSP_FEES');
	}

branch('ES_IRSA_BLDG_FEES');
branch('ES_BLDG_INSPRESULTSUBMITAFTER');
if ((inspType == '300 Elec Temporary Service' || inspType == '310 Electrical Service Release' || inspType == '300 Temporary Service Inspection' || inspType == '370 Electrical Service Change Inspection') && inspResult == 'Pass') {
	email('Laurie.Fleming@epelectric.com;
	Rosa.Nigro@epelectric.com;
	Yara.Diaz@epelectric.com;
	Ivonne.Escriche@epelectric.com','accela@elpasotexas.gov',('The ' + inspType +  ' has passed for permit # ' + capIDString), ('The ' + inspType + ' has passed for permit # ' + capIDString));
	}
`^
IRSA;Building!3rd!Residential!~^`
editAppSpecific('Expiration Date',dateAdd(inspManualDate,180));
`^
IRSA;Building!3rd!Residential!New^`
if ((inspType == '800 Final Building Inspection' || inspType == '320 Electrical Final Insp' || inspType == '630 Mechanical Final Insp' || inspType == '740 Plumbing Final Inspection')) {
	branch('COEP_THIRDPARTY_INSPECTIONS');
	}
`^
IRSA;Building!Commercial!~!~^`
editAppSpecific('Expiration Date',dateAdd(inspManualDate,180));
showMessage=true;
comment(inspManualDate);
childrenCapID = getChildren('*/*/*/*',capId);
showMessage = true;
comment('childrenCapID'+ childrenCapID + 'typeOfChildCap:'+typeof(childrenCapID));
if ((childrenCapID != null && childrenCapID != false) && typeof(childrenCapID) == 'object') {
	for (eachchild in childrenCapID) branch('ES_UPDATE_CHILD_EXPDATE_LOOP');
	}
`^
IRSA;Building!Electrical!NA!NA^`
pCapID = getParent();
comment('pCapID is : ' + pCapID);
if (pCapID  != false) {
	pCapObj = aa.cap.getCap(pCapID).getOutput();
	pCapStatus = pCapObj.getCapStatus();
	pAppTypeResult = pCapObj.getCapType();
	pAppTypeString = pAppTypeResult.toString();
	}

if (pAppTypeString == 'Building/Audit/NA/NA') {
	showDebug=3;
	showMessage=true;
	comment('====> YES ');
	}

if (inspType == '320 Electrical Final Insp' && (inspResult == 'Passed' || inspResult == 'Pass') && isTaskActive('Inspection') == true && isTaskComplete('Inspection') == false) {
	updateTask('Inspection','Closed',' ',' ');
	deactivateTask('Inspection');
	closeTask('Close','Closed','Closed by Script after passing 320 Electrical Final Inspection ',' ');
	updateAppStatus('Closed','Status set by batch script');
	}
`^
IRSA;Building!Irrigation!NA!NA^`
if (inspType == '220 Irrigation Final Insp' && (inspResult == 'Passed' || inspResult == 'Pass') && isTaskActive('Inspection') == true && isTaskComplete('Inspection') == false) {
	updateTask('Inspection','Passed',' ',' ');
	deactivateTask('Inspection');
	closeTask('Close','Closed','Closed by Script after passing 220 Final Irrigation Inspection ',' ');
	updateAppStatus('Closed','Status set by batch script');
	}
`^
IRSA;Building!Mechanical!NA!NA^`
if (inspType == '630 Mechanical Final Insp' && (inspResult == 'Passed' || inspResult == 'Pass') && isTaskActive('Inspection') == true && isTaskComplete('Inspection') == false) {
	updateTask('Inspection','Closed',' ',' ');
	deactivateTask('Inspection');
	closeTask('Close','Closed','Closed by Script after passing 630 Mechanical Final Inspection ',' ');
	updateAppStatus('Closed','Status set by batch script');
	}
`^
IRSA;Building!Plumbing!Consumer Health Protection!NA^`
if (AInfo['GENERAL.Work Done By'] == 'Owner' && inspResult == 'Fail') {
	updateTask('Close','Closed','Inspection Failed',' ');
	updateAppStatus('Closed', 'Inspection Failed');
	addAppCondition('Parcel','Applied(Applied)','Denied w/o Appeal','Condition added because inspection Failed','Lock');
	}

if (inspType == '755 CHP Inspection' && (inspResult == 'Passed' || inspResult == 'Pass') && isTaskActive('Inspection') == true && isTaskComplete('Inspection') == false) {
	updateTask('Inspection','Passed',' ',' ');
	deactivateTask('Inspection');
	closeTask('Close','Closed','Closed by Script after passing 755 CHP Inspection',' ');
	updateAppStatus('Closed','Status set by batch script');
	}
`^
IRSA;Building!Plumbing!NA!NA^`
if (inspType == '740 Plumbing Final Inspection' && (inspResult == 'Passed' || inspResult == 'Pass') && isTaskActive('Inspection') == true && isTaskComplete('Inspection') == false) {
	updateTask('Inspection','Closed',' ',' ');
	deactivateTask('Inspection');
	closeTask('Close','Closed','Closed by Script after passing 740 Plumbing Final Inspection ',' ');
	updateAppStatus('Closed','Status set by batch script');
	}
`^
IRSA;Building!Residential!~!~^`
editAppSpecific('Expiration Date',dateAdd(inspManualDate,180));
`^
IRSA;Building!Right of Way!NA!NA^`
editAppSpecific('Expiration Date',dateAdd(inspManualDate,180));
if (inspType == '915 Sidewalk/Driveway Final' && (inspResult == 'Passed' || inspResult == 'Pass') && isTaskActive('Inspection') == true && isTaskComplete('Inspection') == false) {
	updateTask('Inspection','Passed',' ',' ');
	deactivateTask('Inspection');
	closeTask('Close','Closed','Closed by Script after passing 915 Sidewalk/Driveway Final',' ');
	updateAppStatus('Closed','Status set by batch script');
	}
`^
IRSA;Building!Siding!NA!NA^`
editAppSpecific('Expiration Date',dateAdd(inspManualDate,180));
`^
IRSA;Enforcement!~!~!~^`
branch('ES_ENFORCEMENT_INSPRESULTSUBMITAFTER');
`^
IRSA;Enforcement!Environmental Complaints!NA!NA^`
inspType == '1145 Pet Claim Notice';
`^
IRSA;Enforcement!Fire Code Compliance!Codes!NA^`
if (inspType == '460 Inspection' && (inspResult == 'Pass' || inspResult == 'No Violation')) {
	updateTask('Investigate','Closed',' ',' ');
	deactivateTask('Investigate');
	closeTask('Close','Closed','Closed by Script after passing 460 Inspection',' ');
	updateAppStatus('Closed','Status set by Script');
	}

if (inspType == '460 Inspection' && (inspResult == 'Fail' || inspResult == 'Fail w/Refee')) {
	updateTask('Investigate','Non-Complaint',' ',' ');
	updateAppStatus('Non-Complaint','Status set by Script');
	}

if ((inspResult == 'Fail w/Refee')) {
	addFee('FC001','FIRECOMP','STANDARD',1,'N');
	}
`^
IRSA;Enforcement!Property Maintenance!Housing Safety!NA^`
if (inspType == '215 Property Maint Inspection' && inspResult == 'Violation') {
	branch ('ES_ENHS_SCHEDULE_FOLLOWUP');
	}
`^
IRSA;Fire!~!~!~^`
branch('ES_FIRE_INSPRESULTSUBMITAFTER');
`^
IRSA;Fire!Supression System!NA!NA^`
pCapID = getParent();
comment('Parent CAP ID is: ' + pCapID);
if (pCapID != false) {
	pCapObj = aa.cap.getCap(pCapID).getOutput();
	pGroupType = pCapObj.getCapType().getType();
	pGroupTypeString = pGroupType.toString();
	pSubType = pCapObj.getCapType().getSubType();
	pGroupTypeString = pGroupType.toString();
	}

if (pCapID != false && ((pGroupTypeString == '3rd' && pSubTypeString == 'Commercial') || pGroupTypeString == 'Commercial')) {
	editAppSpecific('Expiration Date',dateAdd(inspManualDate,180),pCapID);
	}

if (pCapID != false && ((pGroupTypeString == '3rd' && pSubTypeString == 'Commercial') || pGroupTypeString == 'Commercial')) {
	siblingCapID = getChildren('*/*/*/*',pCapID);
	}

if (siblingCapID != false && typeof(siblingCapID) == 'object') {
	for (eachchild in siblingCapID) branch('ES_UPDATE_CHILD_EXPDATE_LOOP');
	}
`^
IRSA;Health!~!~!~^`
branch('ES_HEALTH_INSPRESULTSUBMITAFTER');
`^
IRSA;Health!Food Inspections!~!~^`
if ((inspType == '1310 Routine Inspection' || inspType == '1320 Re-inspection')) {
	branch('ES_GUIDE_SHEET_SCORE');
	}
`^
IRSA;Licenses!~!~!~^`
branch('ES_LIC_INSP_UPDATE_WF');
if ((inspResult == 'Fail w/refee' || inspResult == 'Fail w/re-fee')) {
	branch('ES_ADD_LIC_REINSP_FEES');
	}
`^
IRSA;Licenses!Animal!~!~^`
branch('ES_LICENSES_FEES');
if (inspType == '1200 Site Inspection' && (inspResult == 'Passed' || inspResult == 'Pass') && isTaskActive('Inspection') == true && isTaskComplete('Inspection') == false) {
	branch('COEP_UPDATE_LICENSE_ANIMAL_WFTASK');
	}
`^
IRSA;Planning!~!~!~^`
(inspResult == 'Fail w ReFee' || inspResult == 'Fail w/Refee');
if ((inspType == '300 Elec Temporary Service' || inspType == '310 Electrical Service Release' || inspType == '300 Temporary Service Inspection' || inspType == '370 Electrical Service Change Inspection') && inspResult == 'Pass') {
	email('Laurie.Fleming@epelectric.com;
	Rosa.Nigro@epelectric.com;
	Yara.Diaz@epelectric.com;
	Ivonne.Escriche@epelectric.com','accela@elpasotexas.gov',('The ' + inspType +  ' has passed for permit # ' + capIDString), ('The ' + inspType + ' has passed for permit # ' + capIDString));
	}
`^
IRSA;Planning!Zoning!Sign Demo Permit!NA^`
if ((inspType == '2900 Final Inspection' || inspType == '2910 Foundation' || inspType == '2905 Pre-Inspection (Sign Shop)'  || inspType == '2920 Site Investigation') && inspResult == 'Fail w/Refee') {
	addFee('FB082', 'PLNSIGNP', 'STANDARD', 1, 'N');
	}
`^
IRSA;Planning!Zoning!Sign Permit!NA^`
if (inspType == '2900 Final Inspection' && (inspResult == 'Passed' || inspResult == 'Pass') && isTaskActive('Inspection') == true && isTaskComplete('Inspection') == false) {
	updateTask('Inspection','Passed',' ',' ');
	deactivateTask('Inspection');
	closeTask('Close','Closed','Closed by Script after passing 2900 Final Inspectiont ',' ');
	updateAppStatus('Closed','Status set by batch script');
	}

if ((inspType == '2900 Final Inspection' || inspType == '2910 Foundation' || inspType == '2905 Pre-Inspection (Sign Shop)' || inspType == '2920 Site Investigation') && inspResult == 'Fail w/Refee') {
	addFee('FB082', 'PLNSIGNP', 'STANDARD', 1, 'N');
	}
`^
ISA;Building!3rd!Residential!New^`
cCapId = childGetByCapType('Building/Audit/NA/NA',capId);
comment('cCapId is: ' + cCapId);
if ((cCapId != undefined && cCapId != false)) {
	tempCap = capId;
	capId = cCapId;
	scheduleInspectDate('500 Audit',(dateAdd(inspSchedDate, 1,true)),null,null,('Auditing Inspection : ' + inspType));
	}
`^
ISA;Building!Electrical!NA!NA^`
branch('ES_SCHEDULE_AUDIT_INSPECTION');
`^
ISA;Building!Mechanical!NA!NA^`
branch('ES_SCHEDULE_AUDIT_INSPECTION');
`^
ISA;Building!Plumbing!NA!NA^`
branch('ES_SCHEDULE_AUDIT_INSPECTION');
`^
ISA;Building!Residential!New!NA^`
cCapId = childGetByCapType('Building/Audit/NA/NA',capId);
comment('cCapId is: ' + cCapId);
if ((cCapId != undefined && cCapId != false)) {
	tempCap = capId;
	capId = cCapId;
	scheduleInspectDate('500 Audit',(dateAdd(inspSchedDate, 1,true)),null,null,('Auditing Inspection : ' + inspType));
	}
`^
ISB;Building!~!~!~^`
branch('ES_BLDG_INSPSCHEDULEBEFORE');
if (matches(inspType,'320 Electrical Final Insp','800 Final Building Inspection','220 Irrigation Final Insp','630 Mechanical Final Insp','740 Plumbing Final Inspection') && balanceDue > 0) {
	showMessage = true;
	comment('Cannot schedule inspection. There is a balance for on the record.');
	cancel = true;
	}

if (matches(inspType,'320 Electrical Final Insp','800 Final Building Inspection','220 Irrigation Final Insp','630 Mechanical Final Insp','740 Plumbing Final Inspection') && AInfo['Conditional Release'] == 'Yes') {
	showMessage=true;
	comment('Record has Condition Release = Yes, please contact Barbra Shipp or One Stop Shop for more information.');
	cancel=true;
	}

if ((!appMatch('Building/Existing Building C of O/NA/NA') && !appMatch('Building/Commercial/Tenant Improvement/NA')) && !matches(capStatus, 'Issued', 'Issued TCO', 'Inspection')) {
	showMessage=true;
	comment('Cannot allow Inspections until record Status is Issued, Issued TCO or Inspection');
	cancel=true;
	}
`^
ISB;Building!Demolition!NA!NA^`
branch('COEP_BLDG_DEMOLITION_GET_INSPECTION');
`^
ISB;Engineering!Pavement Cut!NA!NA^`
if (isTaskComplete('Close')) {
	showMessage = true;
	comment('Cannot schedule inspection because the application is closed.');
	cancel = true;
	}
`^
ISB;Planning!Zoning!PWSF Communications!NA^`
if (inspType == '800 Final Building Inspection' && balanceDue > 0) {
	cancel = true;
	showMessage=true;
	comment('Pending/Unpaid fees prevented this inspection to be scheduled. <br> Please pay any unpaid fees.');
	}
`^
InspectionResultSubmitAfter^`
if (matches(currentUserID,'GUTIERREZMA','BSHIPP','CHAVEZJ1','RIVERALD','NUNEZR')) {
	showDebug = 3;
	showMessage = true;
	}

if (appMatch ('Enforcement/Environmental Complaints/NA/NA')) {
	branch ('ES_AMO_ASSIGN_SUPERVISOR');
	}

pCapID = false;
childrenCapID = false;
siblingCapID = false;
inspObj = aa.inspection.getInspection(capId,inspId).getOutput();
inspManualDate = inspObj.getInspectionDate().getMonth() + '/' + inspObj.getInspectionDate().getDayOfMonth() + '/' + inspObj.getInspectionDate().getYear();
comment('inspManualDate = ' + inspManualDate);
branch('IRSA:' + appTypeArray[0] + '/*/*/*');
branch('IRSA:' + appTypeArray[0] + '/' + appTypeArray[1] + '/*/*');
branch('IRSA:' + appTypeArray[0] + '/' + appTypeArray[1] + '/' + appTypeArray[2] +'/*');
branch('IRSA:' + appTypeArray[0] + '/' + appTypeArray[1] + '/*/' + appTypeArray[3]);
branch('IRSA:' + appTypeArray[0] + '/*/*/' + appTypeArray[3]);
branch('IRSA:' + appTypeString);
`^
InspectionResultSubmitBefore^`
showDebug = false;
showMessage = false;
`^
InspectionScheduleAfter^`
showDebug = false;
showMessage = false;
if (matches(currentUserID,'KHOBDAY','ADMIN', 'LEDEZMAJA')) {
	showDebug = true;
	}

if ((InspectorFirstName == ''  || InspectorFirstName == 'Selectron') && appMatch('Building/*/*/*')) {
	branch('ES_BLDG_AUTO_ASSIGN_INSPECTOR');
	}

if ((InspectorFirstName == ''  || InspectorFirstName == 'Selectron') && appMatch('Engineering/Pavement Cut/*/*')) {
	assignInspection(inspId,'Robert Shadrick');
	}

if ((InspectorFirstName == ''  || InspectorFirstName == 'Selectron') && appMatch('License/*/*/*')) {
	branch('ES_LICENSE_AUTO_ASSIGN_INSPECTOR');
	}

if (appMatch('Animal/*/*/*')) {
	branch('ES_Animal_InspectionScheduleAfter');
	}

if (appMatch('Enforcement/Environmental Complaints/NA/NA')) {
	branch('ES_AMO_SCHEDULE_INSP');
	}
`^
InspectionScheduleBefore^`
showDebug = false;
showMessage = false;
if (matches(currentUserID,'GUTIERREZMA','MARTINEZA','NUNEZR','BSHIPP', 'LEDEZMAJA')) {
	showDebug = true;
	}

branch('ISB:' + appTypeArray[0] + '/*/*/*');
branch('ISB:' + appTypeArray[0] + '/' + appTypeArray[1] + '/*/*');
branch('ISB:' + appTypeArray[0] + '/' + appTypeArray[1] + '/' + appTypeArray[2] +'/*');
branch('ISB:' + appTypeArray[0] + '/' + appTypeArray[1] + '/*/' + appTypeArray[3]);
branch('ISB:' + appTypeArray[0] + '/*/*/' + appTypeArray[3]);
branch('ISB:' + appTypeString);
`^
InvoiceFeeAfter^`
showDebug = false;
showMessage = false;
if (matches(currentUserID,'PMONTOYA','DBROWN','SMINOR')) {
	showDebug = true;
	}

if (appMatch('Animal/*/*/*')) {
	branch('ES_ANIMAL_INVOICEFEEAFTER');
	}
`^
LIC Establish Links to Reference Contacts^`
iArr = new Array();
//attributes to ignore;
contactTypeArray = new Array();
// ignored.  Uses std choice REF_CONTACT_CREATION_RULES;
createRefContactsFromCapContactsAndLinkForElPasoTX(capId, contactTypeArray,iArr,false,false,comparePeopleStandard);
`^
LIC_VACANT_BLDG_getGIS_DATA^`
var gisData = getGISInfo('Accela_map', 'Vacant Building Enforcement Area', 'Subarea');
var isDowntown = gisData.substr(0,8);
var isLowerDyer = gisData.substr(0,5);
if (isDowntown == 'Downtown') {
	editAppSpecific('18.40 Downtown', getGISInfo('Accela_map', 'Vacant Building Enforcement Area', 'Subarea'));
	}

if (isLowerDyer == 'Lower') {
	editAppSpecific('18.40 Northeast', getGISInfo('Accela_map', 'Vacant Building Enforcement Area', 'Subarea'));
	}
`^
LicProfUpdateAfter^`
showMessage = false;
showDebug = false;
`^
PRA;Animal!License!NA!NA^`
branch('ES_Animal_Master_On_Payment');
`^
PRA;Animal!License!Renewal!~^`
branch('ES_Animal_Renew_On_Payment');
`^
PRA;Licenses!Fire!Commercial!ChildCare^`
branch('ES_PRA_FIRE_EMAIL');
`^
PRA;Licenses!Home Occupation!NA!NA^`
branch('ES_PRA_FIRE_EMAIL');
`^
PRA;Licenses!POS!~!~^`
branch('ES_POS_On_Payment');
`^
PRA;Licenses!Renewal!~!~^`
branch('ES_RENEW_ON_PAYMENT');
`^
ParcelUpdateAfter^`
showDebug = false;
showMessage = false;
`^
PaymentReceiveAfter^`
if (matches(appTypeArray[2],'Security Alarm')) {
	branch('ES_RENEW_ON_PAYMENT');
	comment(appTypeArray[2]);
	}

if (appMatch('Animal/License/Renewal/*')) {
	branch('ES_Animal_Renew_On_Payment');
	}

if (appMatch('Animal/License/NA/NA')) {
	branch('ES_Animal_Master_On_Payment');
	}

showMessage = false;
showDebug = 3;
showDebug=false;
branch('PRA:' + appTypeArray[0] + '/*/*/' + appTypeArray[3] );
branch('PRA:' + appTypeString );
if (matches(currentUserID,'KHOBDAY', 'JCIPRIANO','SMINOR', 'PMONTOYA','LEDEZMAJA')) {
	showDebug = true;
	}

branch('PRA:' + appTypeArray[0] + '/*/*/*');
branch('PRA:' + appTypeArray[0] + '/' + appTypeArray[1] + '/*/*');
branch('PRA:' + appTypeArray[0] + '/' + appTypeArray[1] + '/' + appTypeArray[2] + '/*');
branch('PRA:' + appTypeArray[0] + '/' + appTypeArray[1] + '/*/' + appTypeArray[3] );
`^
RENEWAL;ALCOHOL_FEES_01^`
feeCode = '';
classCode = tblLiquorClass[rec]['Class'];
classCode = classCode.toString();
if (classCode.indexOf('-') > -1) {
	classCode = classCode.substring(0, classCode.indexOf('-'));
	classCode = classCode.trim();
	feeCode = lookup('LIC_ALCOHOL_RENEWAL_FEE_MAPPING', classCode);
	}

if (feeCode != '') {
	updateFee(feeCode, 'RENEWALLICALC','STANDARD', feeQuantity,'Y','N');
	updateFee('CC003','RENEWALLICALC','STANDARD', 1, 'Y','N');
	}

if (feeCode == undefined) {
	logDebug('Fee Code was not found for classCode: ' + classCode);
	}
`^
SEX_LIC_POPULATE_CREATED_ON_DATE^`
editAppSpecific('Created On', sysDate.getMonth() + '/' + sysDate.getDayOfMonth()+'/' + sysDate.getYear());
`^
WF_CREATE_BAUD_10TH_PLAN^`
if (((appMatch('Building/Residential/New/NA') || appMatch('Building/3rd/Residential/New') || appMatch('Building/Commercial/New/NA'))  && wfTask == 'Issue'  && wfStatus == 'Issued' && getAssignedToStaff() != null)) {
	userRecordAudit();
	}
`^
WTUA;AMS!~!~!~^`
branch('ES_WORKFLOWTASKUPDATEAFTER_ALL');
`^
WTUA;AMS!ESD!Containers!~^`
if (wfTask == 'Work Order Submittal' && wfStatus == 'Completed') {
	branch('ES_AMS_ASSIGN_WORK_ORDER');
	}
`^
WTUA;AMS!ESD!Containers!Drop-Off^`
if (((wfTask == 'Submittal' || wfTask == 'Finance') && wfStatus == 'Cancel')) {
	deactivateTask('Close');
	closeTask('Close', 'Close', 'Closed by Script');
	}

if ((wfTask == 'Finance' && wfStatus == 'Adjusted')) {
	deactivateTask('Close');
	closeTask('Close', 'Close', 'Closed by Script');
	}
`^
WTUA;AMS!ESD!Containers!Lid Wheel Repair^`
if (((wfTask == 'Work Order Submittal' || wfTask == 'Work Order') && wfStatus == 'Cancelled')) {
	deactivateTask('Close');
	closeTask('Close', 'Closed', 'Closed by Script');
	}

if ((wfTask == 'Work Order' && wfStatus == 'Completed')) {
	deactivateTask('Close');
	closeTask('Close', 'Closed', 'Closed by Script');
	}

if ((wfTask == 'Supervisor Review' && wfStatus == 'Close WO')) {
	deactivateTask('Close');
	closeTask('Close', 'Closed', 'Closed by Script');
	}

if ((wfTask == 'Finance Review' && (wfStatus == 'Close' || wfStatus == 'Completed'))) {
	deactivateTask('Close');
	closeTask('Close', 'Closed', 'Closed by Script');
	}

if ((wfTask == 'Work Order' && wfStatus == 'Closed No Charge')) {
	deactivateTask('Close');
	closeTask('Close', 'Closed', 'Closed by Script');
	}
`^
WTUA;AMS!ESD!Containers!NA^`
if ((wfTask == 'Finance Review' && wfStatus == 'Billed Enquesta')) {
	deactivateTask('Close');
	closeTask('Close', 'Close', 'Closed by Script');
	updateAppStatus('Closed','Closed by Script');
	showDebug = true;
	}

if ((wfTask == 'Supervisor Review' && wfStatus == 'Close')) {
	deactivateTask('Close');
	closeTask('Close', 'Close', 'Closed by Script');
	updateAppStatus('Closed','Closed by Script');
	showDebug = true;
	}

if ((wfTask == 'Work Order' && wfStatus == 'Cancelled' && (feeExists('EC100') == false && feeExists('EC110') == false ))) {
	editTaskComment('Work Order', 'No Fee Entered - Added by Script');
	}
`^
WTUA;AMS!ESD!Containers!Pick up^`
if (wfTask == 'Work Order' && wfStatus == 'Customer Drop Off') {
	activateTask('Finance Review');
	updateAppStatus('Customer Drop Off', 'Status set by script');
	}
`^
WTUA;AMS!ESD!Dead Animal Pick Up!NA^`
if ((wfTask == 'Work Order Submittal' && wfStatus == 'Cancelled')) {
	deactivateTask('Close');
	closeTask('Close', 'Closed', 'Closed by Script');
	}

if ((wfTask == 'Supervisor Review' && wfStatus == 'Close')) {
	deactivateTask('Close');
	closeTask('Close', 'Closed', 'Closed by Script');
	}

if ((wfTask == 'Finance Review' && wfStatus == 'Billed Enquesta')) {
	deactivateTask('Close');
	closeTask('Close', 'Closed', 'Closed by Script');
	}

if ((wfTask == 'Finance Review' && wfStatus == 'Cancel')) {
	deactivateTask('Close');
	closeTask('Close', 'Closed', 'Closed by Script');
	}
`^
WTUA;AMS!ESD!Extra Lift!NA^`
if ((wfTask == 'Finance Review')) {
	deactivateTask('Close');
	closeTask('Close', 'Close', 'Closed by Script');
	}
`^
WTUA;AMS!ESD!Missed Garbage!Missed Garbage^`
if ((wfTask == 'Finance Review' && (wfStatus == 'Bill EnQuesta' || wfStatus == 'Complete'))) {
	deactivateTask('Close');
	closeTask('Close', 'Close', 'Closed by Script');
	}

if ((wfTask == 'Field Work Order' && (wfStatus == 'Complete NO BILL'))) {
	deactivateTask('Close');
	closeTask('Close', 'Close', 'Closed by Script');
	}
`^
WTUA;AMS!ESD!Special and Bulk Pick Up!NA^`
if ((wfTask == 'Work Order Submittal' && wfStatus == 'Cancelled')) {
	deactivateTask('Close');
	closeTask('Close', 'Closed', 'Closed by Script');
	}

if ((wfTask == 'Supervisor Review' && wfStatus == 'Close')) {
	deactivateTask('Close');
	closeTask('Close', 'Closed', 'Closed by Script');
	}

if ((wfTask == 'Finance Review' && wfStatus == 'Billed Enquesta')) {
	deactivateTask('Close');
	closeTask('Close', 'Closed', 'Closed by Script');
	}

if ((wfTask == 'Finance Review' && wfStatus == 'Cancel')) {
	deactivateTask('Close');
	closeTask('Close', 'Closed', 'Closed by Script');
	}
`^
WTUA;Animal!~!~!~^`
branch('ES_WORKFLOWTASKUPDATEAFTER_ALL');
`^
WTUA;Animal!Animal!NA!NA^`
branch('ES_Animal_SocialMedia_AppSubmitAfter');
if (wfTask=='Completeness Check' && wfStatus=='Disposal Fees Paid') {
	deactivateTask('Close');
	deactivateTask('Euthanization');
	closeTask('Close', 'Close', 'Closed by Script');
	}

if (wfTask=='Completeness Check' && wfStatus=='DIK') {
	deactivateTask('Close');
	deactivateTask('Euthanization');
	closeTask('Close', 'Close', 'Closed by Script');
	}

if (wfTask=='Completeness Check' && wfStatus=='Record Cancelled') {
	deactivateTask('Close');
	deactivateTask('Euthanization');
	closeTask('Close', 'Close', 'Closed by Script');
	}

if (wfTask=='Completeness Check' && wfStatus=='RTO') {
	deactivateTask('Close');
	deactivateTask('Euthanization');
	closeTask('Close', 'Close', 'Closed by Script');
	}

if (wfTask=='Completeness Check' && wfStatus=='TNR Release') {
	deactivateTask('Close');
	deactivateTask('Euthanization');
	closeTask('Close', 'Close', 'Closed by Script');
	}

if (wfTask=='Completeness Check' && wfStatus=='Transfer') {
	deactivateTask('Close');
	deactivateTask('Euthanization');
	closeTask('Close', 'Close', 'Closed by Script');
	}

if (wfTask=='Completeness Check' && wfStatus=='Transfer Adopted') {
	deactivateTask('Euthanization');
	}

if (wfTask=='Completeness Check' && wfStatus=='Transfer Foster') {
	deactivateTask('Euthanization');
	}

if (wfTask=='Completeness Check' && wfStatus=='Transfer Rescue Partner') {
	deactivateTask('Close');
	deactivateTask('Euthanization');
	closeTask('Close', 'Close', 'Closed by Script');
	}

if (wfTask=='Euthanization' && wfStatus=='Euthanized') {
	deactivateTask('Close');
	closeTask('Close', 'Close', 'Closed by Script');
	}

if ((wfTask == 'Claim' && wfStatus == 'Claim VNR')) {
	email('youngke@elpasotexas.gov;
	PadillaR@elpasotexas.gov;
	CarrascoMA@elpasotexas.gov;
	DavilaE2@elpasotexas.gov;
	BurdenKL@elpasotexas.gov;
	MartinezSJ@elpasotexas.gov;
	MarabotoGL@elpasotexas.gov;
	MucinoRX@elpasotexas.gov;
	HolguinMX@elpasotexas.gov','accela@elpasotexas.gov', ('Claim pending VNR/Microchip - ' + capIDString), 'Please Review');
	}

if (wfTask=='Completeness Check' && wfStatus=='Transfer Adopted') {
	deactivateTask('Close');
	deactivateTask('Euthanization');
	closeTask('Close', 'Close', 'Closed by Script');
	}

if (wfTask=='Completeness Check' && wfStatus=='Transfer Foster') {
	deactivateTask('Close');
	deactivateTask('Euthanization');
	closeTask('Close', 'Close', 'Closed by Script');
	}

if ((wfTask == 'Close' && wfStatus == 'Close')) {
	inspCancelAll();
	}

if ((wfTask == 'Close' && wfStatus == 'Close')) {
	deactivateTask('Close');
	closeTask('Close', 'Close', 'Closed by Script');
	}

if (wfTask=='Completeness Check' && wfStatus=='DIK') {
	deactivateTask('Close');
	closeTask('Close', 'Close', 'Closed by Script');
	}

if (wfTask=='Submittal' && wfStatus=='Cancel') {
	deactivateTask('Completeness Check');
	closeTask('Completeness Check', 'Record Cancelled', 'Closed by Script');
	deactivateTask('Close');
	deactivateTask('Euthanization');
	closeTask('Close', 'Close', 'Closed by Script');
	}

if (wfTask=='Animal Scan' && wfStatus=='Cancel') {
	deactivateTask('Completeness Check');
	closeTask('Completeness Check', 'Record Cancelled', 'Closed by Script');
	deactivateTask('Close');
	deactivateTask('Euthanization');
	closeTask('Close', 'Close', 'Closed by Script');
	}

if (wfTask=='Animal Scan' && wfStatus=='DOAS') {
	deactivateTask('Completeness Check');
	closeTask('Completeness Check', 'DIK', 'Closed by Script');
	deactivateTask('Close');
	deactivateTask('Euthanization');
	closeTask('Close', 'Close', 'Closed by Script');
	}

if (wfTask=='Claim' && wfStatus=='DIK') {
	deactivateTask('Completeness Check');
	closeTask('Completeness Check', 'DIK', 'Closed by Script');
	deactivateTask('Close');
	deactivateTask('Euthanization');
	closeTask('Close', 'Close', 'Closed by Script');
	}
`^
WTUA;Animal!License!~!~^`
branch('ES_Animal_WFTUA');
`^
WTUA;Building!~!~!~^`
if (wfStatus != 'Approved per BPI Director') {
	inspResult = null;
	branch('ES_BUILDING_FEES');
	}

if (wfTask == 'Task Assignment' && matches(wfStatus, 'Assign Electronic Review', 'Assign Paper Review')) {
	logDebug('Call function autoRouteReviews(E, Y, ALL BLDG)');
	autoRouteReviews('E', 'Y', 'ALL BLDG');
	}

if (wfTask == 'Issue' && wfStatus == 'Issued') {
	branch('ES_UPDATE_EXP_DATE');
	}

if (wfTask == 'Issue' && wfStatus == 'Issued') {
	branch('ES_PRINT_BLDG');
	}

branch('ES_WORKFLOWTASKUPDATEAFTER_ALL');
branch('ES_BLDG_WFTASKUPDATEAFTER');
branch('WF_CREATE_BAUD_10TH_PLAN');
if ((wfTask == 'Close' && wfStatus == 'Closed')) {
	addLockConditionToRecord(capId,'Record','Closed Condition','No changes allowed if Close task is Closed','Lock','Applied(Applied)');
	}
`^
WTUA;Building!3rd!~!~^`
branch('COEP_THIRD_PARTY_FEES');
`^
WTUA;Building!3rd!Residential!Addition^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAdd(null,180));
	showMessage=true;
	comment('Expiration Date : ' + AInfo['Expiration Date']);
	}
`^
WTUA;Building!3rd!Residential!Alteration^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAdd(null,180));
	showMessage=true;
	comment('Expiration Date : ' + AInfo['Expiration Date']);
	}
`^
WTUA;Building!3rd!Residential!New^`
if (wfTask == 'Inspection' && wfStatus == 'Issued TCO' && AInfo['Expiration Date'] > dateAdd(null,30)) {
	editAppSpecific('Expiration Date', dateAdd(null,30));
	}

if (wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAdd(null,180));
	showMessage=true;
	comment('Expiration Date : ' + AInfo['Expiration Date']);
	}

if (wfTask == 'Issue' && wfStatus == 'Issued') {
	branch('ES_TITLE_19 WEBSERVICE');
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	branch('ES_WORKFLOW_CASE_EMAIL_NOTIFICATION');
	}

if ((wfStatus == 'Failed' || wfStatus == 'Fail')) {
	branch('ES_WORKFLOW_CASE_EMAIL_NOTIFICATION');
	}
`^
WTUA;Building!After Hours Construction!NA!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAddMonths(null, 12));
	}
`^
WTUA;Building!Commercial!~!~^`
if (wfTask == 'Inspection' && wfStatus == 'Extension Issued') {
	editAppSpecific('Expiration Date', dateAdd(wfDateMMDDYYYY.toString(), 90));
	}
`^
WTUA;Building!Commercial!Addition!NA^`
if (wfTask == 'Completeness Check' && (wfStatus == 'Revisions Required' || wfStatus == 'Ready to Issue')) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_BUILDING_ACA_EMAIL');
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	branch('ES_WORKFLOW_CASE_EMAIL_NOTIFICATION');
	}

if (isTaskActive('Completeness Check') == true) {
	branch('ES_COMP_WORKFLOW_CASE_MGR_EMAIL_NOTIFICATION');
	}
`^
WTUA;Building!Commercial!Completion!NA^`
if (wfTask == 'Completeness Check' && (wfStatus == 'Revisions Required' || wfStatus == 'Ready to Issue')) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_BUILDING_ACA_EMAIL');
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	branch('ES_WORKFLOW_CASE_EMAIL_NOTIFICATION');
	}

if (isTaskActive('Completeness Check') == true) {
	branch('ES_COMP_WORKFLOW_CASE_MGR_EMAIL_NOTIFICATION');
	}
`^
WTUA;Building!Commercial!New!NA^`
if (wfTask == 'Inspection' && wfStatus == 'Issued TCO' && AInfo['Expiration Date'] > dateAdd(null,30)) {
	editAppSpecific('Expiration Date', dateAdd(null,30));
	}

if (wfTask == 'Issue Certificate' && wfStatus == 'Issued' && (AInfo['GENERAL.Census Category'] == '213 - New Hotels' || AInfo['GENERAL.Census Category'] == '213a - New Motels & Cabins')) {
	email('perezbx@elpasotexas.gov;
	gardeajx@elpasotexas.gov;
	brionesev@elpasotexas.gov','accela@elpasotexas.gov','New Hotel/Motel Have been Issued', 'Record ' + capIDString + ' is a new Hotel/Motel/Cabin and has been final and it is ready to occupied');
	}

if ((wfStatus == 'Failed' || wfStatus == 'Fail')) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_BUILDING_ACA_EMAIL');
	}

if ((wfStatus == 'Failed' || wfStatus == 'Fail')) {
	branch('ES_WORKFLOW_CASE_EMAIL_NOTIFICATION');
	}

if (wfTask == 'Completeness Check' && (wfStatus == 'Revisions Required' || wfStatus == 'Ready to Issue' || wfStatus == 'Hold for Corrections')) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_BUILDING_ACA_EMAIL');
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	branch('ES_WORKFLOW_CASE_EMAIL_NOTIFICATION');
	}

if (isTaskActive('Completeness Check') == true) {
	branch('ES_COMP_WORKFLOW_CASE_MGR_EMAIL_NOTIFICATION');
	}
`^
WTUA;Building!Commercial!Shell!NA^`
if (wfTask == 'Completeness Check' && (wfStatus == 'Revisions Required' || wfStatus == 'Ready to Issue')) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_BUILDING_ACA_EMAIL');
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	branch('ES_WORKFLOW_CASE_EMAIL_NOTIFICATION');
	}

if (isTaskActive('Completeness Check') == true) {
	branch('ES_COMP_WORKFLOW_CASE_MGR_EMAIL_NOTIFICATION');
	}
`^
WTUA;Building!Commercial!Tenant Improvement!NA^`
if (wfTask == 'Completeness Check' && (wfStatus == 'Revisions Required' || wfStatus == 'Ready to Issue')) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_BUILDING_ACA_EMAIL');
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	branch('ES_WORKFLOW_CASE_EMAIL_NOTIFICATION');
	}

if (isTaskActive('Completeness Check') == true) {
	branch('ES_COMP_WORKFLOW_CASE_MGR_EMAIL_NOTIFICATION');
	}
`^
WTUA;Building!Demolition!NA!NA^`
if (wfTask == 'Inspection' && wfStatus == 'Extension Issued') {
	editAppSpecific('Expiration Date', dateAdd(wfDateMMDDYYYY.toString(), 180));
	}

if (wfTask == 'Issue' && wfStatus == 'Issued') {
	branch ('ES_CREATE_CHILD_EPCDM');
	}
`^
WTUA;Building!Existing Building C of O!NA!NA^`
if ((wfTask == 'Application Submittal' && wfStatus == 'Cancelled')) {
	closeTask('Close', 'Closed', 'Closed by Script');
	}

if ((wfTask == 'Inspection' && wfStatus == 'Cancelled')) {
	closeTask('Close', 'Closed', 'Closed by Script');
	}

if ((wfTask == 'Issue Certificate' && (wfStatus == 'Cancelled' || wfStatus == 'Issued'))) {
	closeTask('Close', 'Closed', 'Closed by Script');
	}
`^
WTUA;Building!Fences!NA!NA^`
if (wfTask == 'Application Submittal' && wfStatus == 'Documents Needed') {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray)  branch('ES_BUILDING_ACA_DOCUMENT_NEEDED_EMAIL');
	}

if (wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue') {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray)  branch('ES_BUILDING_FENCE_ACA_READY_TO_ISSUE_EMAIL');
	}

if (isTaskActive('Completeness Check') == true) {
	branch('ES_COMP_WORKFLOW_CASE_MGR_EMAIL_NOTIFICATION');
	}

if (wfTask == 'Completeness Check' &&  (wfStatus == 'Revisions Required' || wfStatus == 'Ready to Issue' || wfStatus == 'Hold for Corrections')) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_BUILDING_ACA_EMAIL');
	}
`^
WTUA;Building!Land Development!Grading!Commercial^`
if (wfTask=='Flood Determination' && (wfStatus == 'In Flood Zone' || wfStatus == 'LOMR/CLOMR' || wfStatus == 'No Flood Zone')) {
	activateTask('Task Assignment');
	}

if (isTaskComplete('Task Assignment') == true && isTaskComplete('Completeness Check') == false) {
	activateTask('Historical Review');
	activateTask('Zoning Review');
	}

if (isTaskComplete('Task Assignment') == true && isTaskComplete('Completeness Check') == true) {
	deactivateTask('Historical Review');
	deactivateTask('Zoning Review');
	}
`^
WTUA;Building!Land Development!Grading!Mountain Development^`
if (wfTask=='Flood Determination' && (wfStatus == 'In Flood Zone' || wfStatus == 'LOMR/CLOMR' || wfStatus == 'No Flood Zone')) {
	activateTask('Task Assignment');
	}

if (isTaskComplete('Task Assignment') == true && isTaskComplete('Completeness Check') == false) {
	activateTask('Historical Review');
	activateTask('Zoning Review');
	}

if (isTaskComplete('Task Assignment') == true && isTaskComplete('Completeness Check') == true) {
	deactivateTask('Historical Review');
	deactivateTask('Zoning Review');
	}
`^
WTUA;Building!Land Development!Grading!Subdivision^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAdd(null, 365));
	}
`^
WTUA;Building!Mechanical!~!~^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAddMonths(null, 6));
	}
`^
WTUA;Building!Meeting!Project Assistant!NA^`
if (wfTask == 'Meeting Notes' && wfStatus == 'Completed') {
	deactivateTask('Closed');
	closeTask('Closed', 'Closed', 'Closed by Script');
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Cancelled') {
	deactivateTask('Meeting Notes');
	closeTask('Meeting Notes', 'Completed', 'Closed by Script');
	deactivateTask('Closed');
	closeTask('Closed', 'Closed', 'Closed by Script');
	}
`^
WTUA;Building!Plumbing!Consumer Health Protection!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAdd(null,180));
	}
`^
WTUA;Building!Residential!~!~^`
if (isTaskActive('Completeness Check') == true) {
	branch('ES_COMP_WORKFLOW_CASE_MGR_EMAIL_NOTIFICATION');
	}

if (wfTask == 'Completeness Check' && (wfStatus == 'Revisions Required' || wfStatus == 'Ready to Issue' || wfStatus == 'Hold for Corrections')) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_BUILDING_ACA_EMAIL');
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	branch('ES_WORKFLOW_CASE_EMAIL_NOTIFICATION');
	}

if (wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAdd(null,180));
	showMessage=true;
	comment('Expiration Date : ' + AInfo['Expiration Date']);
	}
`^
WTUA;Building!Residential!Addition!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAdd(null,180));
	showMessage=true;
	comment('Expiration Date : ' + AInfo['Expiration Date']);
	}
`^
WTUA;Building!Residential!Alteration!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAdd(null,180));
	showMessage=true;
	comment('Expiration Date : ' + AInfo['Expiration Date']);
	}
`^
WTUA;Building!Residential!Completion!NA^`
if (wfTask == 'Inspection' && wfStatus == 'Extension Issued') {
	editAppSpecific('Expiration Date', dateAdd(null,180));
	showMessage=true;
	comment('Expiration Date : ' + AInfo['Expiration Date']);
	}
`^
WTUA;Building!Residential!Master Plan!NA^`
if (wfTask == 'Task Assignment' && AInfo['Master Plan Review'] == 'Yes') {
	activateTask('Master Plan Review');
	}

if (wfTask == 'Task Assignment' && AInfo['Electrical Review'] == 'Yes') {
	activateTask('Electrical Review');
	}

if (wfTask == 'Master Plan Review' && (wfStatus == 'Approved' || wfStatus == 'Approved/Electrical Req' || wfStatus == 'Failed') && isTaskActive('Electrical Review')) {
	deactivateTask('Master Plan Review');
	closeTask('Master Plan Review',wfStatus, '');
	}

if (wfTask == 'Master Plan Review' && (wfStatus == 'Approved' || wfStatus == 'Approved/Electrical Req' || wfStatus == 'Failed') && isTaskActive('Electrical Review')== false) {
	deactivateTask('Master Plan Review');
	closeTask('Master Plan Review', wfStatus, '');
	activateTask('Completeness Check');
	deactivateTask('Electrical Review');
	}

if (wfTask == 'Completeness Check' && wfStatus == 'Approved') {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for(y in conArray) branch('AA_WORKFLOW_EMAIL_APPLICANT');
	}

if (wfTask == 'Task Assignment' && wfStatus == 'Approved/Electrical Req') {
	activateTask('Electrical Review');
	email('SernaRJ@elpasotexas.gov;
	ChaviraD1@elpasotexas.gov;
	RiveraLD@elpasotexas.gov','accela@elpasotexas.gov','TEST - Electrical Review Required','Attention, <BR><BR> Record <b>' + capIDString + '</b> is now in <b>Electrical Review</b> and needs your attention. <BR><BR> Thank You.');
	}

if (wfTask == 'Application Submittal') {
	cap = aa.cap.getCap(capId).getOutput();
	rec_hour = cap.getAuditDate().getHourOfDay();
	comment('HOUR:  ' + rec_hour);
	}
`^
WTUA;Building!Residential!New!NA^`
if (wfTask == 'Inspection' && wfStatus == 'Issued TCO' && AInfo['Expiration Date'] > dateAdd(null,30)) {
	editAppSpecific('Expiration Date', dateAdd(null,30));
	}

if (wfTask == 'Completeness Check' && wfStatus == 'Completed') {
	branch('ES_ADD_TRADE_FEES');
	}

if (wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAdd(null,180));
	showMessage=true;
	comment('Expiration Date : ' + AInfo['Expiration Date']);
	}

if ((wfStatus == 'Failed' || wfStatus == 'Fail')) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_BUILDING_ACA_EMAIL');
	}

if ((wfStatus == 'Failed' || wfStatus == 'Fail')) {
	branch('ES_WORKFLOW_CASE_EMAIL_NOTIFICATION');
	}

if (wfTask == 'Completeness Check' &&  (wfStatus == 'Revisions Required' || wfStatus == 'Ready to Issue' || wfStatus == 'Hold for Corrections')) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_BUILDING_ACA_EMAIL');
	}

if (wfTask == '' && wfStatus == 'Issued') {
	branch('ES_TITLE_19 WEBSERVICE');
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	branch('ES_WORKFLOW_CASE_EMAIL_NOTIFICATION');
	}

if (isTaskActive('Completeness Check') == true) {
	branch('ES_COMP_WORKFLOW_CASE_MGR_EMAIL_NOTIFICATION');
	}

if (wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue') {
	branch('ES_CREATE_TRADE_CHILD_RECORDS');
	}
`^
WTUA;Building!Residential!Swimming Pool-Spa!NA^`
if (wfTask == 'Inspection' && wfStatus == 'Expired') {
	deactivateTask('Issue Certificate');
	activateTask('Close');
	}
`^
WTUA;Building!Right of Way!NA!NA^`
if (wfTask == 'Inspection' && wfStatus == 'Extension Issued') {
	editAppSpecific('Expiration Date', dateAdd(AInfo['Expiration Date'], 180));
	}
`^
WTUA;Building!Siding!NA!NA^`
if (wfTask == 'Task Assignment' && wfStatus == 'No Review Required') {
	BSID_noReviewRequired(capId);
	}
`^
WTUA;City!~!~!~^`
branch('ES_WORKFLOWTASKUPDATEAFTER_ALL');
`^
WTUA;City!Permit!Super!NA^`
branch('ES_CITY_WFTASKUPDATEAFTER');
`^
WTUA;City!Special Privilege!Sidewalk Vending!License^`
sender = 'accela@elpasotexas.gov';
recipient = 'GibsonEk@elpasotexas.gov';
subject = ('TEST A City Special Privilege Permit is non-compliant with contract, permit number is ' + capIDString + '.');
content = ('TEST A City Special Privilege License is non-compliant with contract, permit number is ' + capIDString + '.');
if (wfTask == 'Tracking' && wfStatus == 'Not Compliant') {
	email(recipient, sender, subject, content);
	}

if (wfTask == 'Issue' && wfStatus == 'Cancelled') {
	updateTask('Close','Closed','Closed via Script','Closed via script');
	updateAppStatus('Closed', 'Status set by script');
	deactivateTask('Close');
	closeTask('Close','Closed','Closed by Script due to Cancelled Status',' ');
	}

if (wfTask == 'Issue Certificate' && wfStatus == 'Issued') {
	if(AInfo['License Term'] == 'One') editAppSpecific('Expiration Date', dateAdd(null,365));
	if(AInfo['License Term'] == 'Five') editAppSpecific('Expiration Date', dateAdd(null,1825));
	}
`^
WTUA;City!Special Privilege!Sidewalk Vending!Permit^`
if (wfTask == 'Issue Certificate' && wfStatus == 'Issued') {
	if(AInfo['Permit Term'] == 'One' editAppSpecific('Expiration Date', dateAdd(null,365));
	if(AInfo['Permit Term'] == 'Five') editAppSpecific('Expiration Date', dateAdd(null,1825));
	}

sender = 'accela@elpasotexas.gov';
recipient = 'Rodriguez-HefnerE@elpasotexas.gov;
SarateJX@elpasotexas.gov';
subject = ('TEST A City Special Privilege Permit has been issued, permit number is ' + capIDString + '.');
content = ('TEST A City Special Privilege Permit has been issued, permit number is ' + capIDString + '.');
revokedTitle = ('TEST A City Special Privilege Permit has been revoked, permit number is ' + capIDString + '.');
revokedContent = ('TEST A City Special Privilege Permit has been revoked, permit number is ' + capIDString + '.');
if (wfTask == 'Issue' && wfSstatus == 'Issued') {
	email(recipient,sender,subject,content);
	}

if (wfTask == 'Issue' && wfStatus == 'Revoked') {
	email(recipient,sender,revokedTitle, revokedContent);
	}

if (wfTask == 'Issue' && wfStatus == 'Cancelled') {
	updateTask('Close','Closed',' ',' ');
	deactivateTask('Close');
	}
`^
WTUA;Economic!~!~!~^`
branch('ES_WORKFLOWTASKUPDATEAFTER_ALL');
`^
WTUA;Enforcement!~!~!~^`
branch('ES_ENFORCEMENT_WORKFLOWTASKUPDATEAFTER');
branch('ES_WORKFLOWTASKUPDATEAFTER_ALL');
`^
WTUA;Enforcement!Environmental Complaints!NA!NA^`
if (wfTask == 'Receive Complaint' && wfStatus == 'Assigned') {
	branch('ES_ENV_SCHEDULE_1120_INSPECTION');
	}

if (wfTask == 'Completeness Check' && wfStatus == 'Transferred') {
	activateTask('SWM Completeness Check');
	deactivateTask('Completeness Check');
	assignTask('SWM Completeness Check', 'LUISA.E.BUSTAMANTE');
	}

branch ('ES_AMO_ASSIGN_SUPERVISOR');
`^
WTUA;Enforcement!Property Maintenance!Housing Safety!NA^`
if (wfTask == 'Complaint Received' && wfStatus == 'Assigned') {
	branch('COEP_SCHED_HOUSESAFETY_INSP');
	}

if (wfTask == 'Receive Complaint' && wfStatus == 'Assigned') {
	branch('COEP_SCHED_ENV_PRPRTY_MAINT_INSP');
	}

if (wfTask == 'Receive Complaint' && wfStatus == 'Assigned') {
	branch('ES_ENV_SCHEDULE_1120_INSPECTION');
	}
`^
WTUA;Enforcement!Solid Waste!Residential!Recycling^`
if (wfTask == 'Complaint Received' && wfStatus == 'Cancelled') {
	deactivateTask('Complaint Received');
	updateTask('Close','Closed','Closed by Script',' ');
	deactivateTask('Close');
	}

if (wfTask == 'Complaint Received' && wfStatus == 'Assigned') {
	uId = getTaskAssignedUserID(wfTask);
	}

if ((wfTask == 'Complaint Received' && wfStatus == 'Assigned' && uId != ' ')) {
	assignTask('Investigation', uId);
	} else {
	showMessage = false;
	comment('Assigned staff couldn't be applied');
	}
`^
WTUA;Enforcement!Solid Waste!Residential!Waste^`
if (wfTask == 'Complaint Received' && wfStatus == 'Assigned') {
	uId = getTaskAssignedUserID(wfTask);
	}

if ((wfTask == 'Complaint Received' && wfStatus == 'Assigned' && uId != '')) {
	assignTask('Investigation', uId);
	} else {
	showMessage = false;
	comment('Assigned staff couldn't be applied');
	}

var getInvestigationUserID = getTaskAssignedUser3('Investigation');
comment('********USERID IS ' + getInvestigationUserID);
if (getInvestigationUserID != '') {
	assignTask('Court',getInvestigationUserID );
	}

var getCourtUserID = getTaskAssignedUser3('Court');
comment('********USERID IS ' + getCourtUserID);
if (getCourtUserID != '') {
	assignTask('Close',getCourtUserID);
	}
`^
WTUA;Engineering!~!~!~^`
branch('ES_WORKFLOWTASKUPDATEAFTER_ALL');
`^
WTUA;Engineering!Parade!NA!NA^`
if (wfTask == 'Application Submittal' && wfStatus == 'Submitted') {
	branch('ES_ADD_ENGPARADE_FEES');
	}
`^
WTUA;Engineering!Pavement Cut!NA!NA^`
if (wfTask == 'Application Submittal' && wfStatus == 'Submitted') {
	branch('COEP_PAVEMENT_CUT_ORDER');
	}

if (wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAdd(null,30));
	}
`^
WTUA;Engineering!Special Privilege!NA!NA^`
if (wfTask == 'Issue' && (wfStatus == 'Issued' || wfStatus == 'Renewed')) {
	branch('ES_UPDATE_EXP_DATE');
	}
`^
WTUA;Environmental!~!~!~^`
branch('ES_WORKFLOWTASKUPDATEAFTER_ALL');
`^
WTUA;Environmental!Curbside Exemption Waiver!NA!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAdd(null,365));
	}
`^
WTUA;Environmental!Permits!Haulers!NA^`
if (wfTask == 'Issue' && (wfStatus == 'Suspended' || wfStatus == 'Revoked')) {
	addAppCondition('Record','Applied(Applied)', 'Suspended/Revoked', 'Condition Added because workflow was Suspended or Revoked', 'Lock');
	branch('ES_ADD_ENVHAULERS_PENALTY_FEES');
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && compareDate('08/31/'+sysDate.getYear()) == false) {
	editAppSpecific('Expiration Date', '08/31/'+sysDate.getYear());
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && compareDate('06/31/'+sysDate.getYear()) == true) {
	editAppSpecific('Expiration Date', dateAddMonths('08/31/'+sysDate.getYear(),12));
	}
`^
WTUA;Environmental!Permits!Special Waste!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['INFORMATION.Expiration Date'] == null && wfDateMMDDYYYY > '08/31/' + sysDate.getYear()) {
	editAppSpecific('Expiration Date','08/31/' + (sysDate.getYear() + 1));
	}
`^
WTUA;Fire!~!~!~^`
branch('ES_FIRE_WFTASKUPDATEAFTER');
branch('ES_WORKFLOWTASKUPDATEAFTER_ALL');
`^
WTUA;Fire!Supression System!NA!NA^`
if (wfTask == 'Fire Review' && (wfStatus == 'Hold for Correction' || wfStatus == 'Failed' || wfStatus == 'Passed')) {
	branch('COEP_EMAIL_LIC_PRO');
	}
`^
WTUA;Health!~!~!~^`
inspResult = null;
branch('ES_HEALTH_FEES');
branch('ES_HEALTH_WFTASKUPDATEAFTER');
branch('ES_WORKFLOWTASKUPDATEAFTER_ALL');
`^
WTUA;Health!Food Inspections!Fixed Location!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	branch('ES_UPDATE_EXP_DATE');
	}
`^
WTUA;Health!Food Inspections!Food Handler!NA^`
if (wfTask == 'Application Submittal' && (wfStatus == 'Received' || wfStatus == 'External Class Taken') && (AInfo['Subtype'] == 'Course' || AInfo['Subtype'] == 'Challenge Exam' || AInfo['Subtype'] == 'Recognized')) {
	branch('COEP_FOOD_HANDLER');
	}
`^
WTUA;Health!Food Inspections!Mobile!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	branch('COEP_HEALTH_MOBILE');
	}
`^
WTUA;Health!Food Inspections!Recurrent!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	branch('COEP_HEALTH_RECURRENT');
	}
`^
WTUA;Health!Food Inspections!Roadside-Outdoor Market!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	branch('COEP_HEALTH_OUTDOOR');
	}
`^
WTUA;Health!Food Inspections!Seasonal!NA^`
branch('COEP_HEALTH_SEASONAL');
`^
WTUA;Licenses!~!~!~^`
if (matches(currentUserID,'CHAVEZJ1') == true) {
	showDebug = true;
	showMessage = false;
	branch('EMSE:GlobalFlags');
	}

inspResult = null;
branch('ES_LICENSES_FEES');
branch('ES_LICENSE_EDIT_EXPIRATION');
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	branch('ES_PRINT_LIC');
	}

branch('ES_WORKFLOWTASKUPDATEAFTER_ALL');
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	onlineUser = createPublicUserFromApplicantInfo();
	}

if (wfTask == 'Issue' && wfStatus == 'Issued') {
	if(onlineUser) attachResult = aa.cap.updateCreatedAccessBy4ACA(capId,'PUBLICUSER' + onlineUser.getUserSeqNum(),'Y','Y');
	}

if (wfTask == 'Issue' && wfStatus == 'Issued') {
	onlineUser = createPublicUserFromContactForElPasoTX('APPLICANT');
	}
`^
WTUA;Licenses!Alcohol!NA!NA^`
if ((AInfo['Term of License'] == '1 Year' || AInfo['Term of License'] == '2 Year')) {
	branch('COEP_LICENSES_RENEWAL_YEARS');
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Appeal Granted') {
	activateTask('Inspection');
	setTask('Application Submittal', 'N','Y',getWorkflowProcess(wfTask));
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Appeal Denied') {
	activateTask('Close');
	setTask('Application Submittal', 'N','Y',getWorkflowProcess(wfTask));
	}

if (wfTask == 'Inspection' && wfStatus == 'Failed') {
	activateTask('Appeal');
	setTask('Inspection', 'N','Y',getWorkflowProcess(wfTask));
	}

if (wfTask == 'Inspection' && wfStatus == 'Failed') {
	email('RubioAX@elpasotexas.gov;
	McElroyMS@elpasotexas.gov','accela@elpasotexas.gov','[DEV] ' + '[TEST] ' +  ('* TEST * - ' + capIDString + ' Failed Inspection'), ('Record ' + capIDString + ' has failed inspection.'));
	}
`^
WTUA;Licenses!Amusement Occupation Tax!NA!NA^`
if (wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	branch('COEP_AMUSE_OCC_TAX_QTR_FEES');
	}
`^
WTUA;Licenses!Animal!~!~^`
if (wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	branch('COEP_SCHED_LICENSE_ANIMAL_INSP');
	}
`^
WTUA;Licenses!Car Dealer!NA!NA^`
if (wfTask == 'Application Submittal' && wfStatus == 'Completed' && (AInfo['Term of License'] == '1 Year' || AInfo['Term of License'] == '2 Year')) {
	branch('ES_LICENSES_CAR_DEALER_FEE');
	}
`^
WTUA;Licenses!City Registration!NA!NA^`
if (wfTask == 'Registration' && wfStatus == 'Complete') {
	addFee('FL001','LICCREG','STANDARD',1,'N');
	}
`^
WTUA;Licenses!Fire!NA!NA^`
if (wfTask == 'Application' && wfStatus == 'Completed') {
	branch('ES_ADD_LICFIRE_LICTYPE_FEES');
	}
`^
WTUA;Licenses!Laundry!NA!NA^`
if ((AInfo['Term of License'] == '1 Year' || AInfo['Term of License'] == '2 Year')) {
	branch('COEP_LICENSES_RENEWAL_YEARS');
	}
`^
WTUA;Licenses!Renewal!~!~^`
if (wfStatus == 'Issue Renewal') {
	branch('ES_UPDATE_RENEWAL_PARENT');
	//update License to 'Active';
	}

if (wfStatus == 'Issue Renewal') {
	logDebug('Running WTUA4Renewal');
	aa.runScript('WORKFLOWTASKUPDATEAFTER4RENEW');
	logDebug('Messages in WTUA4Renewal:<br>'+ aa.env.getValue('ScriptReturnMessage'));
	}
`^
WTUA;Licenses!Security Alarm!NA!NA^`
if (wfTask == 'Issue' && wfStatus == 'About to Expire') {
	lic = new licenseObject(capIDString);
	lic.setStatus('About to Expire');
	}
`^
WTUA;Licenses!Shoe Shine!NA!NA^`
if (wfTask == 'Issue' && wfStatus == 'Renewed') {
	branch('COEP_LICENSES_ADDASIT_EXPDATE');
	}
`^
WTUA;Licenses!Sign!NA!NA^`
if ((AInfo['Term of License'] == '1 Year' || AInfo['Term of License'] == '2 Year')) {
	branch('COEP_LICENSES_RENEWAL_YEARS');
	}
`^
WTUA;Licenses!Swimming Pool and Spa!NA!NA^`
if ((AInfo['Term of License'] == '1 Year' || AInfo['Term of License'] == '2 Year')) {
	branch('COEP_LICENSES_RENEWAL_YEARS');
	}
`^
WTUA;Licenses!Tattoo Studio!NA!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAddMonths(null, 12));
	}

if (wfTask == 'Application Submittal' && wfStatus == 'No Review Required') {
	closeTask('Completeness Check', 'Ready to Issue', 'Closed by Script');
	activateTask('Issue');
	deactivateTask('Application Submittal');
	}
`^
WTUA;Licenses!Tax Exempt Vendor!NA!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	branch('ES_TAXDATE_CHECK');
	}
`^
WTUA;Planning!~!~!~^`
inspResult = null;
branch('ES_PLANNING_FEES');
if (wfTask == 'Task Assignment' && matches(wfStatus, 'Assign Electronic Review', 'Assign Paper Review')) {
	logDebug('Call function autoRouteReviews(E, Y)');
	autoRouteReviews('E', 'Y','ALL PLN');
	autoRouteReviews('E','Y','ALL PLN2');
	}

branch('ES_WORKFLOWTASKUPDATEAFTER_ALL');
`^
WTUA;Planning!Historic Preservation!Cert of Demolition!NA^`
if (wfTask == 'HLC' && wfStatus == 'Denied w/o Appeal') {
	closeTask('Close','Closed','Closed because it was Denied w/o Appeal','') addAppCondition('Parcel','Applied(Applied)', 'Denied w/o Appeal', 'Condition added because workflow HLC was Denied without Appeal','Lock');
	}
`^
WTUA;Planning!Long Range!Building Scale Plan!Final^`
if (wfTask=='SmartCode Compliance Check' && wfStatus=='Variance Requested') {
	var newChild=createChild('Planning','Zoning Board of Adjustment','NA','NA','Child of record ID ' + capIDString);
	}

if (wfTask == 'Revisions' && wfStatus == 'Revisions Requested') {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_BUILDING_ACA_EMAIL');
	}

if (wfTask == 'Consolidated Review Committee (CRC) Review'  && wfStatus == 'Recommend Approval') {
	sender = 'accela@elpasotexas.gov';
	recipient = 'gutierrezma@elpasotexas.gov';
	subject = ('Record id ' + capIDString + ' has completed CRC Review');
	content = ('Below are the comments for this review: <BR> ' + wfComment + '.');
	email(recipient, sender, subject, content);
	}

if (wfTask == 'Revisions' && (wfStatus == 'No Revisions')) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_BUILDING_ACA_EMAIL');
	}
`^
WTUA;Planning!Long Range!Building Scale Plan!Preliminary^`
if (wfTask=='SmartCode Compliance Check' && wfStatus=='Variance Requested') {
	var newChild=createChild('Planning','Zoning Board of Adjustment','NA','NA','Child of record ID ' + capIDString);
	}

if (wfTask == 'Revisions' && wfStatus == 'Revisions Requested') {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_BUILDING_ACA_EMAIL');
	}

if (wfTask == 'Consolidated Review Committee (CRC) Review'  && wfStatus == 'Recommend Approval') {
	sender = 'accela@elpasotexas.gov';
	recipient = 'gutierrezma@elpasotexas.gov';
	subject = ('Record id ' + capIDString + ' has completed CRC Review');
	content = ('Below are the comments for this review: <BR> ' + wfComment + '.');
	email(recipient, sender, subject, content);
	}
`^
WTUA;Planning!Long Range!Regulating Plan Adjustment!NA^`
if (wfTask=='SmartCode Compliance Check' && wfStatus=='Variance Requested') {
	var newChild=createChild('Planning','Zoning Board of Adjustment','NA','NA','Child of record ID ' + capIDString);
	}
`^
WTUA;Planning!Long Range!SmartCode Rezone!Infill^`
if (wfTask=='SmartCode Compliance Check' && wfStatus=='Variance Requested') {
	var newChild=createChild('Planning','Zoning Board of Adjustment','NA','NA','Child of record ID ' + capIDString);
	}
`^
WTUA;Planning!Long Range!SmartCode Rezone!New^`
if (wfTask=='SmartCode Compliance Check' && wfStatus=='Variance Requested') {
	var newChild=createChild('Planning','Zoning Board of Adjustment','NA','NA','Child of record ID ' + capIDString);
	}
`^
WTUA;Planning!Subdivision!~!~^`
if ((wfStatus == 'Recommend Denial')) {
	branch('ES_WORKFLOW_CASE_EMAIL_NOTIFICATION');
	}

if ((wfStatus == 'Recommend Denial')) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_BUILDING_ACA_EMAIL');
	}
`^
WTUA;Planning!Subdivision!Five Day Review!NA^`
if (wfTask == 'Task Assignment' && (wfStatus == 'Assign Electronic Review' || wfStatus == 'Assign Paper Review' )) {
	branch('ES_SUB_FIVE_DAY_ASSIGN_NOTIFICATIONS');
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Assigned') {
	branch('ES_WORKFLOW_CASE_EMAIL_NOTIFICATION');
	}
`^
WTUA;Planning!Subdivision!Grading!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued' && (AInfo['Type'] == 'Borrow' || AInfo['Type'] == 'Waste')) {
	editAppSpecific('Expiration Date', dateAddMonths(null, 6));
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && (AInfo['Type'] == 'Clear & Access' || AInfo['Type'] == 'Final' || AInfo['Type'] == 'Pre-Final')) {
	editAppSpecific('Expiration Date', dateAddMonths(null, 12));
	}
`^
WTUA;Planning!Subdivision!Improvement Permits!Curb and Gutter^`
if ((wfTask == 'Inspection'  || wfTask == 'Inspections') && wfStatus == 'Passed') {
	branch('ES_UPDATE_PARENT_WF');
	}
`^
WTUA;Planning!Subdivision!Improvement Permits!Park^`
if ((wfTask == 'Inspection'  || wfTask == 'Inspections') && wfStatus == 'Passed') {
	branch('ES_UPDATE_PARENT_WF');
	}
`^
WTUA;Planning!Subdivision!Improvement Permits!ROW^`
if ((wfTask == 'Inspection'  || wfTask == 'Inspections') && wfStatus == 'Passed') {
	branch('ES_UPDATE_PARENT_WF');
	}
`^
WTUA;Planning!Subdivision!Improvement Permits!Sewer Mainline^`
if ((wfTask == 'Inspection'  || wfTask == 'Inspections') && wfStatus == 'Passed') {
	branch('ES_UPDATE_PARENT_WF');
	}
`^
WTUA;Planning!Subdivision!Improvement Permits!Storm Sewer Water - Drainage^`
if ((wfTask == 'Inspection'  || wfTask == 'Inspections') && wfStatus == 'Passed') {
	branch('ES_UPDATE_PARENT_WF');
	}
`^
WTUA;Planning!Subdivision!Improvement Permits!Street^`
if ((wfTask == 'Inspection'  || wfTask == 'Inspections') && wfStatus == 'Passed') {
	branch('ES_UPDATE_PARENT_WF');
	}
`^
WTUA;Planning!Subdivision!Improvement Permits!Wall^`
if ((wfTask == 'Inspection'  || wfTask == 'Inspections') && wfStatus == 'Passed') {
	branch('ES_UPDATE_PARENT_WF');
	}
`^
WTUA;Planning!Subdivision!Improvement Permits!Water Mainline^`
if ((wfTask == 'Inspection'  || wfTask == 'Inspections') && wfStatus == 'Passed') {
	branch('ES_UPDATE_PARENT_WF');
	}
`^
WTUA;Planning!Subdivision!Land Study!NA^`
if (wfTask == 'City Planning Commission' && wfStatus == 'Approved') {
	editAppSpecific('Expiration Date', dateAddMonths(wfDateMMDDYYYY,60));
	}
`^
WTUA;Planning!Subdivision!Plat Determination!NA^`
if (wfTask == 'Application Submittal' && wfStatus == 'Assigned') {
	branch('ES_WORKFLOW_CASE_EMAIL_NOTIFICATION');
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Incomplete') {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_BUILDING_ACA_EMAIL');
	}

if ((wfStatus == 'Recommend Denial')) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_BUILDING_ACA_EMAIL');
	}
`^
WTUA;Planning!Subdivision!Subdivision!~^`
if (wfTask == 'Revisions' && wfStatus == 'Recommend Approval') {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_BUILDING_ACA_EMAIL');
	}

if ((wfStatus == 'Recommend Denial')) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_BUILDING_ACA_EMAIL');
	}
`^
WTUA;Planning!Subdivision!Subdivision!Combo^`
if (wfTask == 'City Planning Commission' && wfStatus == 'Approved' && AInfo['Expiration Date'] == null) {
	editAppSpecific('Expiration Date', dateAddMonths(wfDateMMDDYYYY,24));
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Assigned') {
	branch('ES_WORKFLOW_CASE_EMAIL_NOTIFICATION');
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Incomplete') {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_SUBDIVISION_INCOMPLETE_APP_EMAIL');
	}

if (wfTask == 'Task Assignment' && (wfStatus == 'Assign Electronic Review' || wfStatus == 'Assign Paper Review' )) {
	branch('ES_PLAN_ASSIGN_NOTIFICATIONS');
	}

if (wfTask == 'Pre Mylar Review' && (wfStatus == 'Completed no Improvements' || wfStatus == 'Completed w/Improvements' || wfStatus == 'Not Required' || wfStatus == 'Recommend Approval w/Conditions')) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_SUBDIVISION_EMAIL_PRE_MYLAR_COMPLETE');
	}

if ((wfStatus == 'Recommend Denial')) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_PLAN_EMAIL_APPLICANT');
	}
`^
WTUA;Planning!Subdivision!Subdivision!Final^`
if (wfTask == 'City Planning Commission' && wfStatus == 'Approved' && AInfo['Expiration Date'] == null) {
	editAppSpecific('Expiration Date', dateAddMonths(wfDateMMDDYYYY,24));
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Assigned') {
	branch('ES_WORKFLOW_CASE_EMAIL_NOTIFICATION');
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Incomplete') {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_SUBDIVISION_INCOMPLETE_APP_EMAIL');
	}

if (wfTask == 'Task Assignment' && (wfStatus == 'Assign Electronic Review' || wfStatus == 'Assign Paper Review' )) {
	branch('ES_PLAN_ASSIGN_NOTIFICATIONS');
	}

if (wfTask == 'Pre Mylar Review' && (wfStatus == 'Completed no Improvements' || wfStatus == 'Completed w/Improvements' || wfStatus == 'Not Required' || wfStatus == 'Recommend Approval w/Conditions')) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_SUBDIVISION_EMAIL_PRE_MYLAR_COMPLETE');
	}

if ((wfStatus == 'Recommend Denial')) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_PLAN_EMAIL_APPLICANT');
	}
`^
WTUA;Planning!Subdivision!Subdivision!Preliminary^`
if (wfTask == 'City Planning Commission' && wfStatus == 'Approved' && AInfo['Expiration Date'] == null) {
	editAppSpecific('Expiration Date', dateAddMonths(wfDateMMDDYYYY,24));
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Assigned') {
	branch('ES_WORKFLOW_CASE_EMAIL_NOTIFICATION');
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Incomplete') {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_SUBDIVISION_INCOMPLETE_APP_EMAIL');
	}

if (wfTask == 'Task Assignment' && (wfStatus == 'Assign Electronic Review' || wfStatus == 'Assign Paper Review' )) {
	branch('ES_PLAN_ASSIGN_NOTIFICATIONS');
	}

if (wfTask == 'Pre Mylar Review' && (wfStatus == 'Completed no Improvements' || wfStatus == 'Completed w/Improvements' || wfStatus == 'Not Required' || wfStatus == 'Recommend Approval w/Conditions')) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_SUBDIVISION_EMAIL_PRE_MYLAR_COMPLETE');
	}

if ((wfStatus == 'Recommend Denial')) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_PLAN_EMAIL_APPLICANT');
	}
`^
WTUA;Planning!Zoning Verification!NA!NA^`
for (eachrow in GROUPHOUSING) branch('ES_PZVE_CLOSE_LOOP');
`^
WTUA;Planning!Zoning!~!~^`
if ((wfStatus == 'Recommend Denial')) {
	branch('ES_WORKFLOW_CASE_EMAIL_NOTIFICATION');
	}

if ((wfStatus == 'Recommend Denial')) {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_BUILDING_ACA_EMAIL');
	}
`^
WTUA;Planning!Zoning!Condition Amend or Release!NA^`
if (wfTask == 'Task Assignment' && (wfStatus == 'Assign Electronic Review' || wfStatus == 'Assign Paper Review' )) {
	branch('ES_REZONING_ASSIGN_NOTIFICATIONS');
	}
`^
WTUA;Planning!Zoning!Detailed Site Plan!NA^`
if (wfTask == 'Revisions' && wfStatus == 'Revisions Required') {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_BUILDING_ACA_EMAIL');
	}

if (wfTask == 'Task Assignment' && (wfStatus == 'Assign Electronic Review' || wfStatus == 'Assign Paper Review' )) {
	branch('ES_REZONING_ASSIGN_NOTIFICATIONS');
	}
`^
WTUA;Planning!Zoning!Legal Non-Conforming!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issue') {
	email('SotoMX@elpasotexas.gov','accela@elpasotexas.gov',(capIDString + ' has been updated'), (capIDString +' has been Issued.'));
	}

for (eachrow in GROUPHOUSING) branch('ES_PLAC_CLOSE_LOOP');
`^
WTUA;Planning!Zoning!PWSF Communications!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date',dateAddMonths(null, 12));
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Submitted' && AInfo['Fast Track'] == 'Yes') {
	branch('ES_CASE_MANAGER_EMAIL_NOTIFICATION');
	}

if (wfTask == 'Task Assignment' && (wfStatus == 'Assign Electronic Review' || wfStatus == 'Assign Paper Review' )) {
	branch('ES_REZONING_ASSIGN_NOTIFICATIONS');
	}

if (wfTask == 'Inspection' && wfStatus == 'Fail w ReFee') {
	addFee('FB082','BLDGPWSF ','STANDARD',1,'N');
	}
`^
WTUA;Planning!Zoning!Rezoning!NA^`
if (wfTask == 'Revisions' && wfStatus == 'Revisions Required') {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_BUILDING_ACA_EMAIL');
	}

if (wfTask == 'Task Assignment' && (wfStatus == 'Assign Electronic Review' || wfStatus == 'Assign Paper Review' )) {
	branch('ES_REZONING_ASSIGN_NOTIFICATIONS');
	}
`^
WTUA;Planning!Zoning!Sign Permit!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAdd(null,183));
	}
`^
WTUA;Planning!Zoning!Special Permit!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	editAppSpecific('Expiration Date', dateAdd(null,375));
	}

if (wfTask == 'Revisions' && wfStatus == 'Revisions Required') {
	capIdString = capId.getCustomID();
	capContactResult = aa.people.getCapContactByCapID(capId);
	conArray= capContactResult.getOutput();
	for (y in conArray) branch('ES_WORKFLOW_BUILDING_ACA_EMAIL');
	}

if (wfTask == 'Task Assignment' && (wfStatus == 'Assign Electronic Review' || wfStatus == 'Assign Paper Review' )) {
	branch('ES_REZONING_ASSIGN_NOTIFICATIONS');
	}

for (eachrow in GROUPHOUSING) branch('ES_PZST_CLOSE_LOOP');
if (wfTask == 'Application Submittal' && wfStatus == 'Submitted' && AInfo['Special Permit Type'] == 'PWSF (Personal Wireless Service Facility)') {
	branch('ES_CASE_MANAGER_EMAIL_NOTIFICATION');
	}

if (isTaskActive('Revisions') == true) {
	branch('ES_COMP_WORKFLOW_CASE_MGR_EMAIL_NOTIFICATION');
	}
`^
WTUA;ServiceRequest!~!~!~^`
branch('ES_WORKFLOWTASKUPDATEAFTER_ALL');
`^
WTUB;Animal!Animal!NA!NA^`
branch('ES_ANIMAL_WFTUB4');
if (wfTask == 'Medical' && wfStatus == 'Complete' && AInfo['Released By Shelter Vet'] == 'No') {
	showMessage = true;
	comment('This record has not been Released by Shelter Vet in ASI General Field');
	cancel = true;
	}

if (wfTask == 'Medical' && wfStatus == 'Complete' && typeof(QUARANTINE) == 'object') {
	for(eachrow in QUARANTINE) branch('ES_WRKF_COMPLCHK_RLSVET');
	}

if (wfTask == 'Claim' && wfStatus != null && typeof(QUARANTINE) == 'object') {
	for(eachrow in QUARANTINE) branch('ES_WRKF_COMPLCHK_RLSVET');
	}
`^
WTUB;Animal!License!Renewal!NA^`
if (wfTask == 'Renewal Application' && wfStatus == 'Issue Renewal' && balanceDue > 0) {
	showMessage = true;
	comment('Task cannot be completed. There is a balance on the renewal. All invoiced fees must be paid before renewal issuance.');
	cancel = true;
	}
`^
WTUB;Building!~!~!~^`
if ((wfTask == 'Task Assignment' && matches(wfStatus, 'Assign Electronic Review') && docsList.length > 0)) {
	docCategoryArray = new Array();
	docCategoryList = lookup(docTypesStdChoice,'ALL BLDG');
	docCategoryArray = docCategoryList.split(',');
	requiredDocFound = false;
	if(docsList.length > 1) if(showDebug == true || showDebug == 3) for(doc in docsList);
	for(doc in docsList) logDebug('Doc Status=' + docsList[doc].getDocStatus() + '<br />Doc Category=' + docsList[doc].getDocCategory());
	if(!requiredDocFound && docsList[doc].getDocStatus().equals('Uploaded') && exists(docsList[doc].getDocCategory().toUpperCase(),docCategoryArray)) requiredDocFound = true;
	if(!requiredDocFound) cancel = true;
	if(!requiredDocFound) showMessage = true;
	if(!requiredDocFound) comment('No documents found that meet the criteria for Electronic Plan Review.  Make sure the document category is applicable for Plan Review, and that the document status is 'Uploaded'.');
	}

showMessage=false;
showDebug=false;
if (wfTask == 'Task Assignment' && matches(wfStatus, 'Assign Electronic Review')) {
	docsList = new Array;
	docsList = getDocumentList();
	}

branch('ES_CHECK_LIC_PROF');
branch('ES_CHECK_SUB_STATUS');
if (fileDate >= '02/28/2011') {
	branch('ES_BLDG_CHCK_PREFLDPLNCERT');
	}

branch('ES_BLDG_WFTASKUPDATEBEFORE');
if (!appMatch('Building/Right of Way/NA/NA') && wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['Work Done By'] == 'Owner') {
	branch('COEP_CHECK_NO_LIC_PROF');
	}

if (( wfTask == 'Issue Certificate' || wfTask == 'Issue') && wfStatus == 'Issued' && balanceDue > 0) {
	showMessage = true;
	comment('Task cannot be completed. There is a balance on the application. All invoiced fees must be paid before permit issuance. ');
	cancel = true;
	}
`^
WTUB;Building!3rd!~!~^`
if (wfTask == 'Inspection'  && wfStatus == 'Extension Issued' && wfGetHistCount(capId,'Inspection','Extension Issued') >= 4) {
	showMessage = true;
	comment('Cannot allow more than 4 Inspection Extensions');
	cancel = true;
	}

if ((wfTask == 'Issue Certificate' && wfStatus == 'Issued' && AInfo['Conditional Release'] == 'Yes')) {
	showMessage=true;
	comment('Cannot continue due to Conditional Release, please contact Barbra Shipp or Brenda Cantu for more details');
	cancel=true;
	}
`^
WTUB;Building!3rd!Commercial!Addition^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	pCapID = getParent();
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && pCapID != false) {
	comment('pCapID is : ' + pCapID);
	}
`^
WTUB;Building!3rd!Commercial!New^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	pCapID = getParent();
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && pCapID != false) {
	comment('pCapID is : ' + pCapID);
	}
`^
WTUB;Building!3rd!Residential!Accessory Structure^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	pCapID = getParent();
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && pCapID != false) {
	comment('pCapID is : ' + pCapID);
	}

if (wfTask == 'Completeness Check'  && wfStatus == 'Ready to Issue' && CompileFailedTasks(capId) != null) {
	showMessage = true;
	comment('This License has Failed Reviews. Requires Revisions');
	cancel = true;
	}
`^
WTUB;Building!3rd!Residential!Addition^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	pCapID = getParent();
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && pCapID != false) {
	comment('pCapID is : ' + pCapID);
	}

if (wfTask == 'Completeness Check'  && wfStatus == 'Ready to Issue' && CompileFailedTasks(capId) != null) {
	showMessage = true;
	comment('This License has Failed Reviews. Requires Revisions');
	cancel = true;
	}
`^
WTUB;Building!3rd!Residential!Alteration^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	pCapID = getParent();
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && pCapID != false) {
	comment('pCapID is : ' + pCapID);
	}

if (wfTask == 'Completeness Check'  && wfStatus == 'Ready to Issue' && CompileFailedTasks(capId) != null) {
	showMessage = true;
	comment('This License has Failed Reviews. Requires Revisions');
	cancel = true;
	}
`^
WTUB;Building!3rd!Residential!New^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	pCapID = getParent();
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && pCapID != false) {
	sibCapId = childGetByCapType('Planning/Subdivision/Grading/*',pCapID,capId);
	comment('sibCapId is : ' + sibCapId);
	}

if (AInfo['Grading Permit Req'] == 'Yes' && sibCapId != false && taskStatus('Issue','',sibCapId) != 'Issued' && wfTask == 'Issue' && wfStatus == 'Issued') {
	showMessage = true;
	comment('Building Permit cannot be issued until sibling grading permit has been issued.');
	cancel = true;
	}

if (sibCapId == false && wfTask == 'Issue' && wfStatus == 'Issued') {
	showMessage = true;
	comment('Building Permit cannot be issued until sibling grading permit has been issued. No Grading Permit exists as a sibling to this Building CAP.');
	cancel = true;
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && pCapID != false) {
	comment('pCapID is : ' + pCapID);
	}

if (pCapID != false && taskStatus('Issue','',pCapID) != 'Issued' && wfTask == 'Issue' && wfStatus == 'Issued'  && taskStatus('Issue','',pCapID ) != 'Issued') {
	showMessage = true;
	comment('Building Permit cannot be issued until Parent Grading permit has been issued.');
	cancel = true;
	}

if (sibCapId == false && wfTask == 'Issue' && wfStatus == 'Issued') {
	showMessage = true;
	comment('Building Permit cannot be issued until sibling grading permit has been issued. No Grading Permit exists as a sibling to this Building CAP.');
	cancel = true;
	}

if (wfTask == 'Completeness Check'  && wfStatus == 'Ready to Issue' && CompileFailedTasks(capId) != null) {
	showMessage = true;
	comment('This License has Failed Reviews. Requires Revisions');
	cancel = true;
	}
`^
WTUB;Building!3rd!Residential!Swimming Pool^`
if (wfTask == 'Completeness Check'  && wfStatus == 'Ready to Issue' && CompileFailedTasks(capId) != null) {
	showMessage = true;
	comment('This License has Failed Reviews. Requires Revisions');
	cancel = true;
	}
`^
WTUB;Building!After Hours Construction!NA!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	pCapID = getParent();
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && pCapID == false) {
	showMessage=true;
	comment('Need to have a Parent Planning Subdivision Grading Permit or a Parent record Building');
	cancel = true;
	}
`^
WTUB;Building!Commercial!~!~^`
if (wfTask == 'Inspection'  && wfStatus == 'Extension Issued' && wfGetHistCount(capId,'Inspection','Extension Issued') >= 4) {
	showMessage = true;
	comment('Cannot allow more than 4 Inspection Extensions');
	cancel = true;
	}

if (((wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue') && (AInfo['EAB'] == null  && calcValue >= 50000))) {
	showMessage = true;
	comment('EAB is required for issuance');
	cancel = true;
	}

if (wfTask == 'Completeness Check'  && wfStatus == 'Ready to Issue' && CompileFailedTasks(capId) != null) {
	showMessage = true;
	comment('This Permit has Failed Reviews. Requires Revisions');
	cancel = true;
	}
`^
WTUB;Building!Commercial!Addition!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	pCapID = getParent();
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && pCapID != false) {
	comment('pCapID is : ' + pCapID);
	}

if (wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue' && CONSTRUCTIONANDOCCUPANCY.length < 1) {
	showMessage = true;
	comment('A value in Construction and Occupancy ASI table is required to continue');
	cancel = true;
	}

if (wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue' && isTaskStatus('Land Development Review', 'Obtain Permit')) {
	cancel = true;
	showMessage = true;
	comment('Action not allowed. Status 'Obtain Permit' must be changed in Land Development Review');
	}

if (((wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue') && (AInfo['EAB No.'] == null  && calcValue >= 50000 ))) {
	showMessage = true;
	comment('EAB is required for issuance');
	cancel = true;
	}
`^
WTUB;Building!Commercial!New!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	pCapID = getParent();
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && pCapID != false) {
	comment('pCapID is : ' + pCapID);
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Completed' && (getAssignedToStaff() == '' || getAssignedToStaff() == null)) {
	showMessage=true;
	comment('Assign a Case Manager before proceding ' + getAssignedToStaff());
	cancel=true;
	}

if (wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue' && CONSTRUCTIONANDOCCUPANCY.length < 1) {
	showMessage = true;
	comment('A value in Construction and Occupancy ASI table is required to continue');
	cancel = true;
	}

if (wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue' && isTaskStatus('Land Development Review', 'Obtain Permit')) {
	cancel = true;
	showMessage = true;
	comment('Action not allowed. Status 'Obtain Permit' must be changed in Land Development Review');
	}

if (((wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue') && (AInfo['EAB No.'] == null  && calcValue >= 50000 ))) {
	showMessage = true;
	comment('EAB is required for issuance');
	cancel = true;
	}
`^
WTUB;Building!Commercial!Shell!NA^`
if (wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue' && isTaskStatus('Land Development Review', 'Obtain Permit')) {
	cancel = true;
	showMessage = true;
	comment('Action not allowed. Status 'Obtain Permit' must be changed in Land Development Review');
	}

if (((wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue') && (AInfo['EAB No.'] == null  && calcValue >= 50000 ))) {
	showMessage = true;
	comment('EAB is required for issuance');
	cancel = true;
	}
`^
WTUB;Building!Commercial!Swimming Pool-Spa!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	pCapID = getParent();
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && pCapID != false) {
	comment('pCapID is : ' + pCapID);
	}
`^
WTUB;Building!Commercial!Tenant Improvement!NA^`
if (wfTask == 'Issue Certificate' && wfStatus == 'Issued') {
	pCapID = getParent();
	comment('Parent ID is: ' + pCapID);
	}

if (wfTask == 'Issue Certificate' && wfStatus == 'Issued' && pCapID != false) {
	pCapObj = aa.cap.getCap(pCapID).getOutput();
	pCapStatus = pCapObj.getCapStatus();
	}

if (wfTask == 'Issue Certificate' && wfStatus == 'Issued' && pCapID != false && pCapStatus != 'Issue Certificate') {
	showMessage=true;
	comment('Cannot Issue because Parent Record Status is not Issue Certificate');
	cancel=true;
	}

if (wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue' && CONSTRUCTIONANDOCCUPANCY.length < 1) {
	showMessage = true;
	comment('A value in Construction and Occupancy ASI table is required to continue');
	cancel = true;
	}

if (wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue' && isTaskStatus('Land Development Review', 'Obtain Permit')) {
	cancel = true;
	showMessage = true;
	comment('Action not allowed. Status 'Obtain Permit' must be changed in Land Development Review');
	}

if (((wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue') && (AInfo['EAB'] == null  && calcValue >= 50000 ))) {
	showMessage = true;
	comment('EAB is required for issuance');
	cancel = true;
	}
`^
WTUB;Building!Demolition!NA!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	sibCapId  = getChildren('Environmental/Permits/CDM/NA', capId);
	sibCapId != null && typeof(sibCapId) == 'object';
	} else {
	for (eachchild in sibCapId) branch('ES_CHECK_SIB_APP_SUB_LOOP');
	}
`^
WTUB;Building!Electrical!NA!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued' && AInfo['GENERAL.Type of Work'] == 'Elec Permit B' && typeof(ELECTRICALEQUIPMENT) != 'object') {
	showMessage=true;
	comment('Cannot Issue Record, need to fill ASI Tables');
	cancel=true;
	}
`^
WTUB;Building!Existing Building C of O!NA!NA^`
if (wfTask == 'Inspection'  && wfStatus == 'Extension Issued' && wfGetHistCount(capId,'Inspection','Extension Issued') >= 4) {
	showMessage = true;
	comment('Cannot allow more than 4 Inspection Extensions');
	cancel = true;
	}
`^
WTUB;Building!Fences!NA!NA^`
if (wfTask == 'Application Submittal' && wfStatus == 'Completed' && (getAssignedToStaff() == '' || getAssignedToStaff() == null)) {
	showMessage=true;
	comment('Assign a Case Manager before proceding ' + getAssignedToStaff());
	cancel=true;
	}

if (wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue' && (getAssignedToStaff() == '' || getAssignedToStaff() == null)) {
	showMessage=true;
	comment('Assign a Case Manager before proceding ' + getAssignedToStaff());
	cancel=true;
	}
`^
WTUB;Building!Historic!APP!NA^`
if (wfTask == 'Inspection'  && wfStatus == 'Extension Issued' && wfGetHistCount(capId,'Inspection','Extension Issued') >= 4) {
	showMessage = true;
	comment('Cannot allow more than 4 Inspection Extensions');
	cancel = true;
	}
`^
WTUB;Building!Historic!BLD!NA^`
if (wfTask == 'Inspection'  && wfStatus == 'Extension Issued' && wfGetHistCount(capId,'Inspection','Extension Issued') >= 4) {
	showMessage = true;
	comment('Cannot allow more than 4 Inspection Extensions');
	cancel = true;
	}
`^
WTUB;Building!Historic!Project!NA^`
if (wfTask == 'Inspection'  && wfStatus == 'Extension Issued' && wfGetHistCount(capId,'Inspection','Extension Issued') >= 4) {
	showMessage = true;
	comment('Cannot allow more than 4 Inspection Extensions');
	cancel = true;
	}
`^
WTUB;Building!Irrigation!NA!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued' && typeof(IRRIGATIONFIXTURES) != 'object') {
	showMessage = true;
	comment('Record cannot be issued, need to fill ASI Tables');
	cancel = true;
	}
`^
WTUB;Building!Mechanical!NA!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued' && typeof(MECHANICALEQUIPMENT) != 'object') {
	showMessage = true;
	comment('Record cannot be issued, need to fill ASI Tables');
	cancel = true;
	}
`^
WTUB;Building!Plumbing!NA!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued' && typeof(PLUMBINGFIXTURES) != 'object') {
	showMessage=true;
	comment('Cannot Issue Record, need to fill ASI Tables');
	cancel=true;
	}
`^
WTUB;Building!Public Education!NA!NA^`
if (wfTask == 'Inspection'  && wfStatus == 'Extension Issued' && wfGetHistCount(capId,'Inspection','Extension Issued') >= 4) {
	showMessage = true;
	comment('Cannot allow more than 4 Inspection Extensions');
	cancel = true;
	}
`^
WTUB;Building!Residential!~!~^`
if (( wfTask == 'Issue' || wfTask == 'Issued')  && wfStatus == 'Issued' && balanceDue > 0) {
	showMessage = true;
	comment('Task cannot be completed. There is a balance on the application. All invoiced fees must be paid before permit issuance. ');
	cancel = true;
	}

if (wfTask == 'Completeness Check' && wfStatus != 'Cancelled' && wfStatus != 'Resubmitted' && isTaskComplete('Electrical Review') == false) {
	branch('ES_COUNT_SQFT');
	}

if (wfTask == 'Inspection'  && wfStatus == 'Extension Issued' && wfGetHistCount(capId,'Inspection','Extension Issued') >= 4) {
	showMessage = true;
	comment('Cannot allow more than 4 Inspection Extensions');
	cancel = true;
	}

if ((wfTask == 'Issue Certificate' && wfStatus == 'Issued' && AInfo['Conditional Release'] == 'Yes')) {
	showMessage=true;
	comment('Cannot continue due to Conditional Release, please contact Barbra Shipp or Brenda Cantu for more details');
	cancel=true;
	}
`^
WTUB;Building!Residential!Accessory Structure!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	pCapID = getParent();
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && pCapID != false) {
	comment('pCapID is : ' + pCapID);
	}

if (wfTask == 'Completeness Check'  && wfStatus == 'Ready to Issue' && CompileFailedTasks(capId) != null) {
	showMessage = true;
	comment('This License has Failed Reviews. Requires Revisions');
	cancel = true;
	}
`^
WTUB;Building!Residential!Addition!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	pCapID = getParent();
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && pCapID != false) {
	comment('pCapID is : ' + pCapID);
	}

if (wfTask == 'Completeness Check'  && wfStatus == 'Ready to Issue' && CompileFailedTasks(capId) != null) {
	showMessage = true;
	comment('This License has Failed Reviews. Requires Revisions');
	cancel = true;
	}
`^
WTUB;Building!Residential!Alteration!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	pCapID = getParent();
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && pCapID != false) {
	comment('pCapID is : ' + pCapID);
	}

if (wfTask == 'Completeness Check'  && wfStatus == 'Ready to Issue' && CompileFailedTasks(capId) != null) {
	showMessage = true;
	comment('This License has Failed Reviews. Requires Revisions');
	cancel = true;
	}
`^
WTUB;Building!Residential!Master Plan!NA^`
if (wfTask == 'Completeness Check'  && wfStatus == 'Ready to Issue' && CompileFailedTasks(capId) != null) {
	showMessage = true;
	comment('This License has Failed Reviews. Requires Revisions');
	cancel = true;
	}

if (wfTask == 'Application Submittal' && (wfStatus == 'Completed' || wfStatus == 'Complete') && (getAssignedToStaff() == '' || getAssignedToStaff() == null)) {
	showMessage=true;
	comment('Assign a Case Manager before proceding ' + getAssignedToStaff());
	cancel=true;
	}

if (wfTask == 'Task Assignment' && AInfo['Updated.Master Plan Review'] == 'No' && AInfo['Updated.Electrical Review'] == 'No') {
	showMessage = true;
	comment('Please select one task from the options provided');
	cancel = true;
	}
`^
WTUB;Building!Residential!New!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	pCapID = getParent();
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && pCapID != false) {
	comment('pCapID is : ' + pCapID);
	}

if (wfTask == 'Issued' && wfStatus == 'Issued') {
	branch('ES_TITLE_19_PREVENT_50_PERCENT');
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Completed' && (getAssignedToStaff() == '' || getAssignedToStaff() == null)) {
	showMessage=true;
	comment('Assign a Case Manager before proceding ' + getAssignedToStaff());
	cancel=true;
	}

if (wfTask == 'Completeness Check'  && wfStatus == 'Ready to Issue' && CompileFailedTasks(capId) != null) {
	showMessage = true;
	comment('This License has Failed Reviews. Requires Revisions');
	cancel = true;
	}

if (wfTask == 'Completeness Check' && wfStatus == 'Ready to Issue' && isTaskStatus('Land Development Review', 'Obtain Permit')) {
	cancel = true;
	showMessage = true;
	comment('Action not allowed. Status 'Obtain Permit' must be changed in Land Development Review');
	}
`^
WTUB;Building!Residential!Swimming Pool-Spa!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	pCapID = getParent();
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && pCapID != false) {
	comment('pCapID is : ' + pCapID);
	}

if (wfTask == 'Completeness Check'  && wfStatus == 'Ready to Issue' && CompileFailedTasks(capId) != null) {
	showMessage = true;
	comment('This License has Failed Reviews. Requires Revisions');
	cancel = true;
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Completed' && (getAssignedToStaff() == '' || getAssignedToStaff() == null)) {
	showMessage=true;
	comment('Assign a Case Manager before proceding ' + getAssignedToStaff());
	cancel=true;
	}
`^
WTUB;Building!Retaining Walls!NA!NA^`
if (wfTask == 'Inspection'  && wfStatus == 'Extension Issued' && wfGetHistCount(capId,'Inspection','Extension Issued') >= 4) {
	showMessage = true;
	comment('Cannot allow more than 4 Inspection Extensions');
	cancel = true;
	}
`^
WTUB;Building!Right of Way!NA!NA^`
if (wfTask == 'Inspection'  && wfStatus == 'Extension Issued' && wfGetHistCount(capId,'Inspection','Extension Issued') >= 4) {
	showMessage = true;
	comment('Cannot allow more than 4 Inspection Extensions');
	cancel = true;
	}
`^
WTUB;Building!Shared Parking!NA!NA^`
if (wfTask == 'Inspection'  && wfStatus == 'Extension Issued' && wfGetHistCount(capId,'Inspection','Extension Issued') >= 4) {
	showMessage = true;
	comment('Cannot allow more than 4 Inspection Extensions');
	cancel = true;
	}
`^
WTUB;Building!Siding!NA!NA^`
if (wfTask == 'Inspection'  && wfStatus == 'Extension Issued' && wfGetHistCount(capId,'Inspection','Extension Issued') >= 4) {
	showMessage = true;
	comment('Cannot allow more than 4 Inspection Extensions');
	cancel = true;
	}
`^
WTUB;Building!Temporary Amusement!NA!NA^`
if (wfTask == 'Inspection'  && wfStatus == 'Extension Issued' && wfGetHistCount(capId,'Inspection','Extension Issued') >= 4) {
	showMessage = true;
	comment('Cannot allow more than 4 Inspection Extensions');
	cancel = true;
	}
`^
WTUB;Building!Temporary Placement!NA!NA^`
if (wfTask == 'Inspection'  && wfStatus == 'Extension Issued' && wfGetHistCount(capId,'Inspection','Extension Issued') >= 4) {
	showMessage = true;
	comment('Cannot allow more than 4 Inspection Extensions');
	cancel = true;
	}
`^
WTUB;Building!Tents!NA!NA^`
if (wfTask == 'Inspection'  && wfStatus == 'Extension Issued' && wfGetHistCount(capId,'Inspection','Extension Issued') >= 4) {
	showMessage = true;
	comment('Cannot allow more than 4 Inspection Extensions');
	cancel = true;
	}
`^
WTUB;Building!Windows!NA!NA^`
if (wfTask == 'Inspection'  && wfStatus == 'Extension Issued' && wfGetHistCount(capId,'Inspection','Extension Issued') >= 4) {
	showMessage = true;
	comment('Cannot allow more than 4 Inspection Extensions');
	cancel = true;
	}
`^
WTUB;City!Permit!Super!NA^`
branch('ES_CITY_WFTASKUPDATEBEFORE');
`^
WTUB;Enforcement!Fire Code Compliance!NA!NA^`
if (wfTask == 'Close' && wfStatus == 'Closed' && (AInfo['Fire Permits Current?'] == null || AInfo['Complaint Type'] == null || AInfo['Handled By'] == null || AInfo['Building Vacant?'] == null)) {
	showMessage=true;
	comment('GENERAL Portlet needs to be filled.');
	cancel=true;
	}
`^
WTUB;Engineering!Parade!NA!NA^`
wfTask == 'Application Submittal' && wfStatus == 'Submitted';
if (wfTask == 'Application Submittal' && wfStatus == 'Submitted' && pCapID != false) {
	editAppSpecific('Charitable Solicitation Permit No.',pCapID.getCustomID());
	}
`^
WTUB;Engineering!Pavement Cut!NA!NA^`
branch('ES_CHECK_LIC_PROF');
if (wfTask == 'Issue' && wfStatus == 'Issued') {
	pCapID = getParent();
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && pCapID != false) {
	comment('pCapID is : ' + pCapID);
	}

if (wfTask == 'Issue' && wfStatus == 'Issued' && balanceDue > 0) {
	showMessage = true;
	comment('Task cannot be completed. There is a balance on the Record. All invoiced fees must be paid before permit issuance.');
	cancel = true;
	}
`^
WTUB;Engineering!Special Privilege!NA!NA^`
if (wfTask == 'Issue' && wfStatus == 'Renewed' && wfGetHistCount(capId,'Issue','Renewed') >= 2) {
	showMessage = true;
	comment('This permit has been renewed 2 times already, it may not be renewed again.');
	cancel = true;
	}
`^
WTUB;Environmental!Permits!Haulers!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued' && balanceDue > 0) {
	showMessage = true;
	comment('Task cannot be completed. There is a balance on the application. All invoiced fees must be paid before permit issuance.');
	cancel = true;
	}
`^
WTUB;Fire!~!~!~^`
branch('ES_FIRE_WFTASKUPDATEBEFORE');
`^
WTUB;Fire!Supression System!NA!NA^`
branch('ES_CHECK_LIC_PROF');
`^
WTUB;Health!~!~!~^`
branch('ES_HEALTH_WFTASKUPDATEBEFORE');
`^
WTUB;Health!Food Inspections!Fixed Location!NA^`
if (( wfTask == 'Issue' || wfTask == 'Issued')  && wfStatus == 'Issued' && balanceDue > 0) {
	showMessage = true;
	comment('Task cannot be completed. There is a balance on the application. All invoiced fees must be paid before permit issuance. ');
	cancel = true;
	}
`^
WTUB;Health!Food Inspections!Mobile!NA^`
if (( wfTask == 'Issue' || wfTask == 'Issued')  && wfStatus == 'Issued' && balanceDue > 0) {
	showMessage = true;
	comment('Task cannot be completed. There is a balance on the application. All invoiced fees must be paid before permit issuance. ');
	cancel = true;
	}
`^
WTUB;Health!Food Inspections!Recurrent!NA^`
if (( wfTask == 'Issue' || wfTask == 'Issued')  && wfStatus == 'Issued' && balanceDue > 0) {
	showMessage = true;
	comment('Task cannot be completed. There is a balance on the application. All invoiced fees must be paid before permit issuance. ');
	cancel = true;
	}
`^
WTUB;Health!Food Inspections!Roadside-Outdoor Market!NA^`
if (( wfTask == 'Issue' || wfTask == 'Issued')  && wfStatus == 'Issued' && balanceDue > 0) {
	showMessage = true;
	comment('Task cannot be completed. There is a balance on the application. All invoiced fees must be paid before permit issuance. ');
	cancel = true;
	}
`^
WTUB;Health!Food Inspections!Seasonal!NA^`
if (( wfTask == 'Issue' || wfTask == 'Issued')  && wfStatus == 'Issued' && balanceDue > 0) {
	showMessage = true;
	comment('Task cannot be completed. There is a balance on the application. All invoiced fees must be paid before permit issuance. ');
	cancel = true;
	}
`^
WTUB;Licenses!~!~!~^`
if (( wfTask == 'Issue' || wfTask == 'Issued')  && wfStatus == 'Issued' && balanceDue > 0) {
	showMessage = true;
	comment('Task cannot be completed. There is a balance on the application. All invoiced fees must be paid before permit issuance. ');
	cancel = true;
	}
`^
WTUB;Licenses!Alcohol!NA!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued' &&  balanceDue > 0) {
	cancel = true;
	showMessage=true;
	comment('Cannot proceed if fees are pending to be paid. Operation has been cancelled. <BR>' + 'Balance Due: ' + balanceDue);
	}
`^
WTUB;Licenses!Fire!NA!NA^`
if (wfTask == 'Fire Inspection' && wfStatus == 'Passed' && (AInfo['Valid Certificate of Occupancy on Site'] == null || AInfo['Change of Use'] == null)) {
	showMessage = true;
	comment('Task cannot be completed. Please set 'Valid Certificate of Occupancy on Site' and 'Change of Use' as needed before continuing and set 'Notify Building Department' to 'Yes' if needed');
	cancel = true;
	}
`^
WTUB;Licenses!Food!NA!NA^`
if (wfTask == 'Issue' && wfStatus == 'Issued' && (pCapID != false && pCapID !=null)) {
	branch('COEP_LICENSES_FOOD_EXPDATE');
	}
`^
WTUB;Licenses!Renewal!~!~^`
if (wfTask == 'Renewal Application' && wfStatus == 'Issue Renewal' && balanceDue > 0) {
	showMessage = true;
	comment('Task cannot be completed. There is a balance on the renewal. All invoiced fees must be paid before renewal issuance.');
	cancel = true;
	}
`^
WTUB;Licenses!Sexually Oriented Business Emp!NA!NA^`
if ((wfTask == 'Application Submittal' && wfStatus == 'Temp License Issued' || wfTask == 'Issue' && wfStatus == 'Issued')  && balanceDue > 0) {
	showMessage = true;
	comment('Task cannot be completed. There is a balance on the record. All invoiced fees must be paid before issuance.');
	cancel = true;
	}
`^
WTUB;Licenses!Sexually Oriented Business!NA!NA^`
if ((wfTask == 'Application Submittal' && wfStatus == 'Temp License Issued' || wfTask == 'Issue' && wfStatus == 'Issued')  && balanceDue > 0) {
	showMessage = true;
	comment('Task cannot be completed. There is a balance on the record. All invoiced fees must be paid before issuance.');
	cancel = true;
	}
`^
WTUB;Licenses!Tattoo Body Piercing Employee!NA!NA^`
if (wfTask == 'Issue' && (wfStatus == 'Issue'|| wfStatus == 'Issued') && balanceDue > 0) {
	showComment=true;
	comment('Cannot Invoice Fee when a balance exist');
	cancel=true;
	}
`^
WTUB;Planning!~!~!~^`
if (wfTask == 'Task Assignment' && matches(wfStatus, 'Assign Electronic Review')) {
	docsList = new Array;
	docsList = getDocumentList();
	docCategoryArray = new Array();
	docCategoryList = lookup(docTypesStdChoice,'ALL PLN');
	docCategoryArray = docCategoryList.split(',');
	requiredDocFound = false;
	for(doc in docsList) if(!requiredDocFound && docsList[doc].getDocStatus().equals('Uploaded') && exists(docsList[doc].getDocCategory().toUpperCase(),docCategoryArray)) requiredDocFound = true;
	if(!requiredDocFound) cancel = true;
	if(!requiredDocFound) showMessage = true;
	if(!requiredDocFound) comment('No documents found that meet the criteria for Electronic Plan Review.  Make sure the document category is applicable for Plan Review, and that the document status is 'Uploaded'.');
	}
`^
WTUB;Planning!Long Range!Building Scale Plan!Final^`
if (wfTask == 'Application Submittal' && wfStatus == 'Completed' && (getAssignedToStaff() == '' || getAssignedToStaff() == null)) {
	showMessage=true;
	comment('Assign a Case Manager before proceding ' + getAssignedToStaff());
	cancel=true;
	}
`^
WTUB;Planning!Long Range!Building Scale Plan!Preliminary^`
if (wfTask == 'Application Submittal' && wfStatus == 'Submitted' && (getAssignedToStaff() == '' || getAssignedToStaff() == null)) {
	showMessage=true;
	comment('Assign a Case Manager before proceding ' + getAssignedToStaff());
	cancel=true;
	}
`^
WTUB;Planning!Subdivision!~!~^`
branch('ES_CHECK_LIC_PROF');
`^
WTUB;Planning!Subdivision!Five Day Review!NA^`
if (wfTask == 'Application Submittal' && (wfStatus == 'Accepted' || wfStatus == 'Assigned') && (getAssignedToStaff() == '' || getAssignedToStaff() == null)) {
	showMessage=true;
	comment('Assign a Case Manager before proceding.');
	cancel=true;
	}
`^
WTUB;Planning!Subdivision!Grading!NA^`
pCapID = getParent();
comment('Parent ID is: ' + pCapID);
if (pCapID != false) {
	pCapObj = aa.cap.getCap(pCapID).getOutput();
	pCapStatus = pCapObj.getCapStatus();
	pAppTypeResult = pCapObj.getCapType();
	pAppTypeString = pAppTypeResult.toString();
	}

if (pCapID != false && wfTask == 'Issue' && wfStatus == 'Issued' && pCapStatus != 'Approved' && pAppTypeString == 'Planning/Subdivision/Plat Determination/NA') {
	showMessage = true;
	comment('Permit cannot be issued until Parent Subdivision Plat Determination CAP is approved.');
	cancel = true;
	}
`^
WTUB;Planning!Subdivision!Improvement Permits!Curb and Gutter^`
pCapID = getParent();
comment('pCapID is : ' + pCapID);
pCapStatus = null;
if (pCapID == false) {
	showMessage = true;
	comment('The workflow task cannot be updated because there is no parent associated to this CAP type.');
	cancel = true;
	}

if (pCapID != false) {
	pCapObj = aa.cap.getCap(pCapID).getOutput();
	pCapStatus = pCapObj.getCapStatus();
	}

if (pCapID != false && pCapStatus != 'Approved') {
	showMessage = true;
	comment('Permit cannot be issued until Parent Subdivision CAP is approved.');
	cancel = true;
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Completed' && pCapID != false) {
	pCapObj = aa.cap.getCap(pCapID).getOutput();
	pCapStatus = pCapObj.getCapStatus();
	comment('pCapID is : ' + pCapID);
	}

if (pCapID!= false  &&  pCapStatus == 'Expired' && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	showMessage = true;
	comment('Improvement Permit cannot be Submitted with an Expired Parent Plat Determination permit.');
	cancel = true;
	}
`^
WTUB;Planning!Subdivision!Improvement Permits!Park^`
pCapID = getParent();
comment('pCapID is : ' + pCapID);
pCapStatus = null;
if (pCapID == false) {
	showMessage = true;
	comment('The workflow task cannot be updated because there is no parent associated to this CAP type.');
	cancel = true;
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Completed' && pCapID != false) {
	pCapObj = aa.cap.getCap(pCapID).getOutput();
	pCapStatus = pCapObj.getCapStatus();
	comment('pCapID is : ' + pCapID);
	}

if (pCapID!= false  &&  pCapStatus == 'Expired' && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	showMessage = true;
	comment('Improvement Permit cannot be Submitted with an Expired Parent Plat Determination permit.');
	cancel = true;
	}
`^
WTUB;Planning!Subdivision!Improvement Permits!ROW^`
pCapID = getParent();
comment('pCapID is : ' + pCapID);
pCapStatus = null;
if (pCapID == false) {
	showMessage = true;
	comment('The workflow task cannot be updated because there is no parent associated to this CAP type.');
	cancel = true;
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Completed' && pCapID != false) {
	pCapObj = aa.cap.getCap(pCapID).getOutput();
	pCapStatus = pCapObj.getCapStatus();
	comment('pCapID is : ' + pCapID);
	}

if (pCapID!= false  &&  pCapStatus == 'Expired' && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	showMessage = true;
	comment('Improvement Permit cannot be Submitted with an Expired Parent Plat Determination permit.');
	cancel = true;
	}
`^
WTUB;Planning!Subdivision!Improvement Permits!Sewer Mainline^`
pCapID = getParent();
comment('pCapID is : ' + pCapID);
pCapStatus = null;
if (pCapID == false) {
	showMessage = true;
	comment('The workflow task cannot be updated because there is no parent associated to this CAP type.');
	cancel = true;
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Completed' && pCapID != false) {
	pCapObj = aa.cap.getCap(pCapID).getOutput();
	pCapStatus = pCapObj.getCapStatus();
	comment('pCapID is : ' + pCapID);
	}

if (pCapID!= false  &&  pCapStatus == 'Expired' && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	showMessage = true;
	comment('Improvement Permit cannot be Submitted with an Expired Parent Plat Determination permit.');
	cancel = true;
	}
`^
WTUB;Planning!Subdivision!Improvement Permits!Storm Sewer Water - Drainage^`
pCapID = getParent();
comment('pCapID is : ' + pCapID);
pCapStatus = null;
if (pCapID == false) {
	showMessage = true;
	comment('The workflow task cannot be updated because there is no parent associated to this CAP type.');
	cancel = true;
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Completed' && pCapID != false) {
	pCapObj = aa.cap.getCap(pCapID).getOutput();
	pCapStatus = pCapObj.getCapStatus();
	comment('pCapID is : ' + pCapID);
	}

if (pCapID!= false  &&  pCapStatus == 'Expired' && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	showMessage = true;
	comment('Improvement Permit cannot be Submitted with an Expired Parent Plat Determination permit.');
	cancel = true;
	}
`^
WTUB;Planning!Subdivision!Improvement Permits!Street^`
pCapID = getParent();
comment('pCapID is : ' + pCapID);
pCapStatus = null;
if (pCapID == false) {
	showMessage = true;
	comment('The workflow task cannot be updated because there is no parent associated to this CAP type.');
	cancel = true;
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Completed' && pCapID != false) {
	pCapObj = aa.cap.getCap(pCapID).getOutput();
	pCapStatus = pCapObj.getCapStatus();
	comment('pCapID is : ' + pCapID);
	}

if (pCapID!= false  &&  pCapStatus == 'Expired' && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	showMessage = true;
	comment('Improvement Permit cannot be Submitted with an Expired Parent Plat Determination permit.');
	cancel = true;
	}
`^
WTUB;Planning!Subdivision!Improvement Permits!Wall^`
pCapID = getParent();
comment('pCapID is : ' + pCapID);
pCapStatus = null;
if (pCapID == false) {
	showMessage = true;
	comment('The workflow task cannot be updated because there is no parent associated to this CAP type.');
	cancel = true;
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Completed' && pCapID != false) {
	pCapObj = aa.cap.getCap(pCapID).getOutput();
	pCapStatus = pCapObj.getCapStatus();
	comment('pCapID is : ' + pCapID);
	}

if (pCapID!= false  &&  pCapStatus == 'Expired' && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	showMessage = true;
	comment('Improvement Permit cannot be Submitted with an Expired Parent Plat Determination permit.');
	cancel = true;
	}
`^
WTUB;Planning!Subdivision!Improvement Permits!Water Mainline^`
pCapID = getParent();
comment('pCapID is : ' + pCapID);
pCapStatus = null;
if (pCapID == false) {
	showMessage = true;
	comment('The workflow task cannot be updated because there is no parent associated to this CAP type.');
	cancel = true;
	}

if (wfTask == 'Application Submittal' && wfStatus == 'Completed' && pCapID != false) {
	pCapObj = aa.cap.getCap(pCapID).getOutput();
	pCapStatus = pCapObj.getCapStatus();
	comment('pCapID is : ' + pCapID);
	}

if (pCapID!= false  &&  pCapStatus == 'Expired' && wfTask == 'Application Submittal' && wfStatus == 'Completed') {
	showMessage = true;
	comment('Improvement Permit cannot be Submitted with an Expired Parent Plat Determination permit.');
	cancel = true;
	}
`^
WTUB;Planning!Subdivision!Plat Determination!NA^`
if (wfTask == 'Application Submittal' && (wfStatus == 'Completed' || wfStatus == 'Assigned') && (getAssignedToStaff() == '' || getAssignedToStaff() == null)) {
	showMessage=true;
	comment('Assign a Case Manager before proceding.');
	cancel=true;
	}
`^
WTUB;Planning!Zoning!~!~^`
branch('ES_CHECK_LIC_PROF');
`^
WTUB;Planning!Zoning!Condition Amend or Release!NA^`
if (wfTask == 'Application Submittal' && wfStatus == 'Submitted' && (getAssignedToStaff() == '' || getAssignedToStaff() == null)) {
	showMessage=true;
	comment('Assign a Case Manager before proceding ' + getAssignedToStaff());
	cancel=true;
	}
`^
WTUB;Planning!Zoning!Detailed Site Plan!NA^`
if (wfTask == 'Application Submittal' && wfStatus == 'Submitted' && (getAssignedToStaff() == '' || getAssignedToStaff() == null)) {
	showMessage=true;
	comment('Assign a Case Manager before proceding ' + getAssignedToStaff());
	cancel=true;
	}
`^
WTUB;Planning!Zoning!PWSF Communications!NA^`
if (wfTask == 'Application Submittal' && wfStatus == 'Submitted' && (getAssignedToStaff() == '' || getAssignedToStaff() == null)) {
	showMessage=true;
	comment('Assign a Case Manager before proceding ' + getAssignedToStaff());
	cancel=true;
	}
`^
WTUB;Planning!Zoning!Rezoning!NA^`
if (wfTask == 'Application Submittal' && wfStatus == 'Submitted' && (getAssignedToStaff() == '' || getAssignedToStaff() == null)) {
	showMessage=true;
	comment('Assign a Case Manager before proceding ' + getAssignedToStaff());
	cancel=true;
	}
`^
WTUB;Planning!Zoning!Special Permit!NA^`
if (wfTask == 'Application Submittal' && wfStatus == 'Submitted' && (getAssignedToStaff() == '' || getAssignedToStaff() == null)) {
	showMessage=true;
	comment('Assign a Case Manager before proceding ' + getAssignedToStaff());
	cancel=true;
	}
`^
WorkflowTaskUpdateAfter^`
showDebug = false;
showMessage = false;
branch('EMSE:GlobalFlags');
if (matches(currentUserID,'RIVERALD','SALCIDOJR1','CHAVEZJ1','CPARKS','STASOSD','BSHIPP', 'VONSCHOECHRF') || enablePublicUserACADebug == true) {
	showDebug = 3;
	showMessage=true;
	}

branch('WTUA:' + appTypeArray[0] + '/*/*/*');
branch('WTUA:' + appTypeArray[0] + '/' + appTypeArray[1] + '/*/*');
branch('WTUA:' + appTypeArray[0] + '/' + appTypeArray[1] + '/' + appTypeArray[2] +'/*');
branch('WTUA:' + appTypeArray[0] + '/' + appTypeArray[1] + '/*/' + appTypeArray[3]);
branch('WTUA:' + appTypeArray[0] + '/*/*/' + appTypeArray[3]);
branch('WTUA:' + appTypeString);
`^
WorkflowTaskUpdateBefore^`
if (true) {
	branch('EMSE:GlobalFlags');
	showDebug = false;
	showMessage = false;
	if(matches(currentUserID,'CHAVEZJ1', 'RIVERALD') || enablePublicUserACADebug == true) showDebug=3;
	showMessage=true;
	}

pCapID = null;
sibCapId = false;
childCapID = null;
sibCapID = false;
PerGroup = null;
PerType = null;
branch('WTUB:' + appTypeArray[0] + '/*/*/*');
branch('WTUB:' + appTypeArray[0] + '/' + appTypeArray[1] + '/*/*');
branch('WTUB:' + appTypeArray[0] + '/' + appTypeArray[1] + '/' + appTypeArray[2] +'/*');
branch('WTUB:' + appTypeArray[0] + '/' + appTypeArray[1] + '/*/' + appTypeArray[3]);
branch('WTUB:' + appTypeArray[0] + '/*/*/' + appTypeArray[3]);
branch('WTUB:' + appTypeString);
`^
